/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface TestFixinProtocolFeesInterface extends utils.Interface {
  functions: {
    "PROTOCOL_FEE_MULTIPLIER()": FunctionFragment;
    "collectProtocolFee(bytes32)": FunctionFragment;
    "getFeeCollector(bytes32)": FunctionFragment;
    "getSingleProtocolFee()": FunctionFragment;
    "transferFeesForPool(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PROTOCOL_FEE_MULTIPLIER"
      | "collectProtocolFee"
      | "getFeeCollector"
      | "getSingleProtocolFee"
      | "transferFeesForPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSingleProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeesForPool",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSingleProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFeesForPool",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestFixinProtocolFees extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestFixinProtocolFeesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<[number]>;

    collectProtocolFee(
      poolId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getFeeCollector(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSingleProtocolFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { protocolFeeAmount: BigNumber }>;

    transferFeesForPool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  collectProtocolFee(
    poolId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getFeeCollector(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSingleProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferFeesForPool(
    poolId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    collectProtocolFee(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getFeeCollector(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSingleProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFeesForPool(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFee(
      poolId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getFeeCollector(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSingleProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFeesForPool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PROTOCOL_FEE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      poolId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getFeeCollector(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSingleProtocolFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFeesForPool(
      poolId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
