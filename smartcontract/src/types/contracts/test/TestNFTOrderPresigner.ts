/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNFTOrder {
  export type FeeStruct = {
    recipient: string;
    amount: BigNumberish;
    feeData: BytesLike;
  };

  export type FeeStructOutput = [string, BigNumber, string] & {
    recipient: string;
    amount: BigNumber;
    feeData: string;
  };

  export type PropertyStruct = {
    propertyValidator: string;
    propertyData: BytesLike;
  };

  export type PropertyStructOutput = [string, string] & {
    propertyValidator: string;
    propertyData: string;
  };

  export type ERC1155OrderStruct = {
    direction: BigNumberish;
    maker: string;
    taker: string;
    expiry: BigNumberish;
    nonce: BigNumberish;
    erc20Token: string;
    erc20TokenAmount: BigNumberish;
    fees: LibNFTOrder.FeeStruct[];
    erc1155Token: string;
    erc1155TokenId: BigNumberish;
    erc1155TokenProperties: LibNFTOrder.PropertyStruct[];
    erc1155TokenAmount: BigNumberish;
  };

  export type ERC1155OrderStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[],
    BigNumber
  ] & {
    direction: number;
    maker: string;
    taker: string;
    expiry: BigNumber;
    nonce: BigNumber;
    erc20Token: string;
    erc20TokenAmount: BigNumber;
    fees: LibNFTOrder.FeeStructOutput[];
    erc1155Token: string;
    erc1155TokenId: BigNumber;
    erc1155TokenProperties: LibNFTOrder.PropertyStructOutput[];
    erc1155TokenAmount: BigNumber;
  };

  export type ERC721OrderStruct = {
    direction: BigNumberish;
    maker: string;
    taker: string;
    expiry: BigNumberish;
    nonce: BigNumberish;
    erc20Token: string;
    erc20TokenAmount: BigNumberish;
    fees: LibNFTOrder.FeeStruct[];
    erc721Token: string;
    erc721TokenId: BigNumberish;
    erc721TokenProperties: LibNFTOrder.PropertyStruct[];
  };

  export type ERC721OrderStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[]
  ] & {
    direction: number;
    maker: string;
    taker: string;
    expiry: BigNumber;
    nonce: BigNumber;
    erc20Token: string;
    erc20TokenAmount: BigNumber;
    fees: LibNFTOrder.FeeStructOutput[];
    erc721Token: string;
    erc721TokenId: BigNumber;
    erc721TokenProperties: LibNFTOrder.PropertyStructOutput[];
  };
}

export interface TestNFTOrderPresignerInterface extends utils.Interface {
  functions: {
    "approveERC1155(address)": FunctionFragment;
    "approveERC20(address)": FunctionFragment;
    "approveERC721(address)": FunctionFragment;
    "cancelERC1155Order(uint256)": FunctionFragment;
    "cancelERC721Order(uint256)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "preSignERC1155Order((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128))": FunctionFragment;
    "preSignERC721Order((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveERC1155"
      | "approveERC20"
      | "approveERC721"
      | "cancelERC1155Order"
      | "cancelERC721Order"
      | "onERC1155Received"
      | "preSignERC1155Order"
      | "preSignERC721Order"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveERC1155",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveERC721",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelERC1155Order",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelERC721Order",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preSignERC1155Order",
    values: [LibNFTOrder.ERC1155OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "preSignERC721Order",
    values: [LibNFTOrder.ERC721OrderStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelERC1155Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelERC721Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSignERC1155Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSignERC721Order",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestNFTOrderPresigner extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestNFTOrderPresignerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveERC1155(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveERC721(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveERC1155(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC20(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveERC721(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelERC1155Order(
    orderNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelERC721Order(
    orderNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preSignERC1155Order(
    order: LibNFTOrder.ERC1155OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preSignERC721Order(
    order: LibNFTOrder.ERC721OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveERC1155(token: string, overrides?: CallOverrides): Promise<void>;

    approveERC20(token: string, overrides?: CallOverrides): Promise<void>;

    approveERC721(token: string, overrides?: CallOverrides): Promise<void>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveERC1155(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveERC721(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveERC1155(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC20(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveERC721(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
