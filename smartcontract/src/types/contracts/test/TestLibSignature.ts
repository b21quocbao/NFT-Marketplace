/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface TestLibSignatureInterface extends utils.Interface {
  functions: {
    "getSignerOfHash(bytes32,(uint8,uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "getSignerOfHash"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSignerOfHash",
    values: [BytesLike, LibSignature.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSignerOfHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestLibSignature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLibSignatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSignerOfHash(
      hash: BytesLike,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;
  };

  getSignerOfHash(
    hash: BytesLike,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    getSignerOfHash(
      hash: BytesLike,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getSignerOfHash(
      hash: BytesLike,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSignerOfHash(
      hash: BytesLike,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
