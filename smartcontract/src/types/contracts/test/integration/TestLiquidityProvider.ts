/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface TestLiquidityProviderInterface extends utils.Interface {
  functions: {
    "sellEthForToken(address,address,uint256,bytes)": FunctionFragment;
    "sellTokenForEth(address,address,uint256,bytes)": FunctionFragment;
    "sellTokenForToken(address,address,address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "sellEthForToken"
      | "sellTokenForEth"
      | "sellTokenForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sellEthForToken",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForEth",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForToken",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "sellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForToken",
    data: BytesLike
  ): Result;

  events: {
    "SellEthForToken(address,address,uint256,uint256)": EventFragment;
    "SellTokenForEth(address,address,uint256,uint256)": EventFragment;
    "SellTokenForToken(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SellEthForToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTokenForEth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTokenForToken"): EventFragment;
}

export interface SellEthForTokenEventObject {
  outputToken: string;
  recipient: string;
  minBuyAmount: BigNumber;
  ethBalance: BigNumber;
}
export type SellEthForTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SellEthForTokenEventObject
>;

export type SellEthForTokenEventFilter = TypedEventFilter<SellEthForTokenEvent>;

export interface SellTokenForEthEventObject {
  inputToken: string;
  recipient: string;
  minBuyAmount: BigNumber;
  inputTokenBalance: BigNumber;
}
export type SellTokenForEthEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SellTokenForEthEventObject
>;

export type SellTokenForEthEventFilter = TypedEventFilter<SellTokenForEthEvent>;

export interface SellTokenForTokenEventObject {
  inputToken: string;
  outputToken: string;
  recipient: string;
  minBuyAmount: BigNumber;
  inputTokenBalance: BigNumber;
}
export type SellTokenForTokenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  SellTokenForTokenEventObject
>;

export type SellTokenForTokenEventFilter =
  TypedEventFilter<SellTokenForTokenEvent>;

export interface TestLiquidityProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLiquidityProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  sellEthForToken(
    outputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForEth(
    inputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForToken(
    inputToken: string,
    outputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "SellEthForToken(address,address,uint256,uint256)"(
      outputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      ethBalance?: null
    ): SellEthForTokenEventFilter;
    SellEthForToken(
      outputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      ethBalance?: null
    ): SellEthForTokenEventFilter;

    "SellTokenForEth(address,address,uint256,uint256)"(
      inputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      inputTokenBalance?: null
    ): SellTokenForEthEventFilter;
    SellTokenForEth(
      inputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      inputTokenBalance?: null
    ): SellTokenForEthEventFilter;

    "SellTokenForToken(address,address,address,uint256,uint256)"(
      inputToken?: null,
      outputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      inputTokenBalance?: null
    ): SellTokenForTokenEventFilter;
    SellTokenForToken(
      inputToken?: null,
      outputToken?: null,
      recipient?: null,
      minBuyAmount?: null,
      inputTokenBalance?: null
    ): SellTokenForTokenEventFilter;
  };

  estimateGas: {
    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
