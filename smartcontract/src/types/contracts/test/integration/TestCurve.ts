/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface TestCurveInterface extends utils.Interface {
  functions: {
    "BASE_SWAP_SELECTOR()": FunctionFragment;
    "BUY_TOKEN_COIN_IDX()": FunctionFragment;
    "ETH_COIN_IDX()": FunctionFragment;
    "RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG()": FunctionFragment;
    "SELL_TOKEN_COIN_IDX()": FunctionFragment;
    "buyAmount()": FunctionFragment;
    "buyToken()": FunctionFragment;
    "sellToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASE_SWAP_SELECTOR"
      | "BUY_TOKEN_COIN_IDX"
      | "ETH_COIN_IDX"
      | "RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG"
      | "SELL_TOKEN_COIN_IDX"
      | "buyAmount"
      | "buyToken"
      | "sellToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASE_SWAP_SELECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BUY_TOKEN_COIN_IDX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_COIN_IDX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SELL_TOKEN_COIN_IDX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "buyToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "sellToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASE_SWAP_SELECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BUY_TOKEN_COIN_IDX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_COIN_IDX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SELL_TOKEN_COIN_IDX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;

  events: {
    "CurveCalled(uint256,bytes4,int128,int128,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurveCalled"): EventFragment;
}

export interface CurveCalledEventObject {
  value: BigNumber;
  selector: string;
  fromCoinIdx: BigNumber;
  toCoinIdx: BigNumber;
  sellAmount: BigNumber;
  minBuyAmount: BigNumber;
}
export type CurveCalledEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  CurveCalledEventObject
>;

export type CurveCalledEventFilter = TypedEventFilter<CurveCalledEvent>;

export interface TestCurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestCurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASE_SWAP_SELECTOR(overrides?: CallOverrides): Promise<[string]>;

    BUY_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<[BigNumber]>;

    ETH_COIN_IDX(overrides?: CallOverrides): Promise<[BigNumber]>;

    RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SELL_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyToken(overrides?: CallOverrides): Promise<[string]>;

    sellToken(overrides?: CallOverrides): Promise<[string]>;
  };

  BASE_SWAP_SELECTOR(overrides?: CallOverrides): Promise<string>;

  BUY_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

  ETH_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

  RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG(
    overrides?: CallOverrides
  ): Promise<string>;

  SELL_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

  buyAmount(overrides?: CallOverrides): Promise<BigNumber>;

  buyToken(overrides?: CallOverrides): Promise<string>;

  sellToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASE_SWAP_SELECTOR(overrides?: CallOverrides): Promise<string>;

    BUY_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG(
      overrides?: CallOverrides
    ): Promise<string>;

    SELL_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    buyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(overrides?: CallOverrides): Promise<string>;

    sellToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CurveCalled(uint256,bytes4,int128,int128,uint256,uint256)"(
      value?: null,
      selector?: null,
      fromCoinIdx?: null,
      toCoinIdx?: null,
      sellAmount?: null,
      minBuyAmount?: null
    ): CurveCalledEventFilter;
    CurveCalled(
      value?: null,
      selector?: null,
      fromCoinIdx?: null,
      toCoinIdx?: null,
      sellAmount?: null,
      minBuyAmount?: null
    ): CurveCalledEventFilter;
  };

  estimateGas: {
    BASE_SWAP_SELECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    BUY_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SELL_TOKEN_COIN_IDX(overrides?: CallOverrides): Promise<BigNumber>;

    buyAmount(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(overrides?: CallOverrides): Promise<BigNumber>;

    sellToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_SWAP_SELECTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BUY_TOKEN_COIN_IDX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_COIN_IDX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RETURN_BOUGHT_AMOUNT_SELECTOR_FLAG(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SELL_TOKEN_COIN_IDX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
