/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace InitialMigration {
  export type BootstrapFeaturesStruct = { registry: string; ownable: string };

  export type BootstrapFeaturesStructOutput = [string, string] & {
    registry: string;
    ownable: string;
  };
}

export interface TestInitialMigrationInterface extends utils.Interface {
  functions: {
    "bootstrap(address,(address,address))": FunctionFragment;
    "bootstrapFeature()": FunctionFragment;
    "callBootstrap(address)": FunctionFragment;
    "die(address)": FunctionFragment;
    "dieRecipient()": FunctionFragment;
    "initializeCaller()": FunctionFragment;
    "initializeZeroEx(address,address,(address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bootstrap"
      | "bootstrapFeature"
      | "callBootstrap"
      | "die"
      | "dieRecipient"
      | "initializeCaller"
      | "initializeZeroEx"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bootstrap",
    values: [string, InitialMigration.BootstrapFeaturesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapFeature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callBootstrap",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "die", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dieRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeZeroEx",
    values: [string, string, InitialMigration.BootstrapFeaturesStruct]
  ): string;

  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapFeature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callBootstrap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "die", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dieRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeZeroEx",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestInitialMigration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestInitialMigrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bootstrap(
      owner: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bootstrapFeature(overrides?: CallOverrides): Promise<[string]>;

    callBootstrap(
      zeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    die(
      ethRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dieRecipient(overrides?: CallOverrides): Promise<[string]>;

    initializeCaller(overrides?: CallOverrides): Promise<[string]>;

    initializeZeroEx(
      owner: string,
      zeroEx: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bootstrap(
    owner: string,
    features: InitialMigration.BootstrapFeaturesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bootstrapFeature(overrides?: CallOverrides): Promise<string>;

  callBootstrap(
    zeroEx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  die(
    ethRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dieRecipient(overrides?: CallOverrides): Promise<string>;

  initializeCaller(overrides?: CallOverrides): Promise<string>;

  initializeZeroEx(
    owner: string,
    zeroEx: string,
    features: InitialMigration.BootstrapFeaturesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bootstrap(
      owner: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    bootstrapFeature(overrides?: CallOverrides): Promise<string>;

    callBootstrap(zeroEx: string, overrides?: CallOverrides): Promise<void>;

    die(ethRecipient: string, overrides?: CallOverrides): Promise<void>;

    dieRecipient(overrides?: CallOverrides): Promise<string>;

    initializeCaller(overrides?: CallOverrides): Promise<string>;

    initializeZeroEx(
      owner: string,
      zeroEx: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bootstrap(
      owner: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bootstrapFeature(overrides?: CallOverrides): Promise<BigNumber>;

    callBootstrap(
      zeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    die(
      ethRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dieRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    initializeCaller(overrides?: CallOverrides): Promise<BigNumber>;

    initializeZeroEx(
      owner: string,
      zeroEx: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bootstrap(
      owner: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bootstrapFeature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callBootstrap(
      zeroEx: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    die(
      ethRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dieRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeZeroEx(
      owner: string,
      zeroEx: string,
      features: InitialMigration.BootstrapFeaturesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
