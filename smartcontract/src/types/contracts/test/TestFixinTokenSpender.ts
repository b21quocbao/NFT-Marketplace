/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface TestFixinTokenSpenderInterface extends utils.Interface {
  functions: {
    "getSpendableERC20BalanceOf(address,address)": FunctionFragment;
    "transferERC20TokensFrom(address,address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSpendableERC20BalanceOf"
      | "transferERC20TokensFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSpendableERC20BalanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20TokensFrom",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSpendableERC20BalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20TokensFrom",
    data: BytesLike
  ): Result;

  events: {
    "FallbackCalled(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FallbackCalled"): EventFragment;
}

export interface FallbackCalledEventObject {
  token: string;
  owner: string;
  to: string;
  amount: BigNumber;
}
export type FallbackCalledEvent = TypedEvent<
  [string, string, string, BigNumber],
  FallbackCalledEventObject
>;

export type FallbackCalledEventFilter = TypedEventFilter<FallbackCalledEvent>;

export interface TestFixinTokenSpender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestFixinTokenSpenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferERC20TokensFrom(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getSpendableERC20BalanceOf(
    token: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferERC20TokensFrom(
    token: string,
    owner: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC20TokensFrom(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FallbackCalled(address,address,address,uint256)"(
      token?: null,
      owner?: null,
      to?: null,
      amount?: null
    ): FallbackCalledEventFilter;
    FallbackCalled(
      token?: null,
      owner?: null,
      to?: null,
      amount?: null
    ): FallbackCalledEventFilter;
  };

  estimateGas: {
    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferERC20TokensFrom(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferERC20TokensFrom(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
