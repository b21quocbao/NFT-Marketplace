/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PermissionlessTransformerDeployerInterface
  extends utils.Interface {
  functions: {
    "deploy(bytes,bytes32)": FunctionFragment;
    "isDelegateCallSafe(address)": FunctionFragment;
    "toDeploymentSalt(address)": FunctionFragment;
    "toInitCodeHash(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy"
      | "isDelegateCallSafe"
      | "toDeploymentSalt"
      | "toInitCodeHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegateCallSafe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toDeploymentSalt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toInitCodeHash",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelegateCallSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toDeploymentSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toInitCodeHash",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export interface DeployedEventObject {
  deployedAddress: string;
  salt: string;
  sender: string;
}
export type DeployedEvent = TypedEvent<
  [string, string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface PermissionlessTransformerDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PermissionlessTransformerDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      bytecode: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDelegateCallSafe(
      target: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toDeploymentSalt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toInitCodeHash(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  deploy(
    bytecode: BytesLike,
    salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDelegateCallSafe(
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  toDeploymentSalt(arg0: string, overrides?: CallOverrides): Promise<string>;

  toInitCodeHash(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy(
      bytecode: BytesLike,
      salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isDelegateCallSafe(
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    toDeploymentSalt(arg0: string, overrides?: CallOverrides): Promise<string>;

    toInitCodeHash(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Deployed(address,bytes32,address)"(
      deployedAddress?: null,
      salt?: null,
      sender?: null
    ): DeployedEventFilter;
    Deployed(
      deployedAddress?: null,
      salt?: null,
      sender?: null
    ): DeployedEventFilter;
  };

  estimateGas: {
    deploy(
      bytecode: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDelegateCallSafe(
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toDeploymentSalt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toInitCodeHash(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      bytecode: BytesLike,
      salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDelegateCallSafe(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toDeploymentSalt(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInitCodeHash(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
