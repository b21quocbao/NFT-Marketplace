/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IUniswapExchangeInterface extends utils.Interface {
  functions: {
    "ethToTokenTransferInput(uint256,uint256,address)": FunctionFragment;
    "tokenToEthSwapInput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ethToTokenTransferInput"
      | "tokenToEthSwapInput"
      | "tokenToTokenSwapInput"
      | "tokenToTokenTransferInput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ethToTokenTransferInput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenTransferInput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ethToTokenTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenTransferInput",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUniswapExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ethToTokenTransferInput(
      minTokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToTokenSwapInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenToTokenTransferInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ethToTokenTransferInput(
    minTokensBought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToEthSwapInput(
    tokensSold: BigNumberish,
    minEthBought: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToTokenSwapInput(
    tokensSold: BigNumberish,
    minTokensBought: BigNumberish,
    minEthBought: BigNumberish,
    deadline: BigNumberish,
    buyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenToTokenTransferInput(
    tokensSold: BigNumberish,
    minTokensBought: BigNumberish,
    minEthBought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    buyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ethToTokenTransferInput(
      minTokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenSwapInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      buyToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenTransferInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      buyToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ethToTokenTransferInput(
      minTokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToTokenSwapInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenToTokenTransferInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ethToTokenTransferInput(
      minTokensBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapInput(
      tokensSold: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToTokenSwapInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenToTokenTransferInput(
      tokensSold: BigNumberish,
      minTokensBought: BigNumberish,
      minEthBought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      buyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
