/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IERC20BridgeInterface extends utils.Interface {
  functions: {
    "bridgeTransferFrom(address,address,address,uint256,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "bridgeTransferFrom"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeTransferFrom",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeTransferFrom",
    data: BytesLike
  ): Result;

  events: {
    "ERC20BridgeTransfer(address,address,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20BridgeTransfer"): EventFragment;
}

export interface ERC20BridgeTransferEventObject {
  inputToken: string;
  outputToken: string;
  inputTokenAmount: BigNumber;
  outputTokenAmount: BigNumber;
  from: string;
  to: string;
}
export type ERC20BridgeTransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  ERC20BridgeTransferEventObject
>;

export type ERC20BridgeTransferEventFilter =
  TypedEventFilter<ERC20BridgeTransferEvent>;

export interface IERC20Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeTransferFrom(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      bridgeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeTransferFrom(
    tokenAddress: string,
    from: string,
    to: string,
    amount: BigNumberish,
    bridgeData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeTransferFrom(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      bridgeData: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "ERC20BridgeTransfer(address,address,uint256,uint256,address,address)"(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      from?: null,
      to?: null
    ): ERC20BridgeTransferEventFilter;
    ERC20BridgeTransfer(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      from?: null,
      to?: null
    ): ERC20BridgeTransferEventFilter;
  };

  estimateGas: {
    bridgeTransferFrom(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      bridgeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeTransferFrom(
      tokenAddress: string,
      from: string,
      to: string,
      amount: BigNumberish,
      bridgeData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
