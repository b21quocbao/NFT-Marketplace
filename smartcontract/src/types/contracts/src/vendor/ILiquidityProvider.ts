/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ILiquidityProviderInterface extends utils.Interface {
  functions: {
    "getSellQuote(address,address,uint256)": FunctionFragment;
    "sellEthForToken(address,address,uint256,bytes)": FunctionFragment;
    "sellTokenForEth(address,address,uint256,bytes)": FunctionFragment;
    "sellTokenForToken(address,address,address,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSellQuote"
      | "sellEthForToken"
      | "sellTokenForEth"
      | "sellTokenForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSellQuote",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellEthForToken",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForEth",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForToken",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForToken",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityProviderFill(address,address,uint256,uint256,bytes32,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityProviderFill"): EventFragment;
}

export interface LiquidityProviderFillEventObject {
  inputToken: string;
  outputToken: string;
  inputTokenAmount: BigNumber;
  outputTokenAmount: BigNumber;
  sourceId: string;
  sourceAddress: string;
  sender: string;
  recipient: string;
}
export type LiquidityProviderFillEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string, string, string],
  LiquidityProviderFillEventObject
>;

export type LiquidityProviderFillEventFilter =
  TypedEventFilter<LiquidityProviderFillEvent>;

export interface ILiquidityProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSellQuote(
      inputToken: string,
      outputToken: string,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { outputTokenAmount: BigNumber }>;

    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getSellQuote(
    inputToken: string,
    outputToken: string,
    sellAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellEthForToken(
    outputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    auxiliaryData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForEth(
    inputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    auxiliaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForToken(
    inputToken: string,
    outputToken: string,
    recipient: string,
    minBuyAmount: BigNumberish,
    auxiliaryData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSellQuote(
      inputToken: string,
      outputToken: string,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LiquidityProviderFill(address,address,uint256,uint256,bytes32,address,address,address)"(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      sourceId?: null,
      sourceAddress?: null,
      sender?: null,
      recipient?: null
    ): LiquidityProviderFillEventFilter;
    LiquidityProviderFill(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      sourceId?: null,
      sourceAddress?: null,
      sender?: null,
      recipient?: null
    ): LiquidityProviderFillEventFilter;
  };

  estimateGas: {
    getSellQuote(
      inputToken: string,
      outputToken: string,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSellQuote(
      inputToken: string,
      outputToken: string,
      sellAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellEthForToken(
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForEth(
      inputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForToken(
      inputToken: string,
      outputToken: string,
      recipient: string,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
