/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNFTOrder {
  export type FeeStruct = {
    recipient: string;
    amount: BigNumberish;
    feeData: BytesLike;
  };

  export type FeeStructOutput = [string, BigNumber, string] & {
    recipient: string;
    amount: BigNumber;
    feeData: string;
  };

  export type PropertyStruct = {
    propertyValidator: string;
    propertyData: BytesLike;
  };

  export type PropertyStructOutput = [string, string] & {
    propertyValidator: string;
    propertyData: string;
  };

  export type ERC721OrderStruct = {
    direction: BigNumberish;
    maker: string;
    taker: string;
    expiry: BigNumberish;
    nonce: BigNumberish;
    erc20Token: string;
    erc20TokenAmount: BigNumberish;
    fees: LibNFTOrder.FeeStruct[];
    erc721Token: string;
    erc721TokenId: BigNumberish;
    erc721TokenProperties: LibNFTOrder.PropertyStruct[];
  };

  export type ERC721OrderStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[]
  ] & {
    direction: number;
    maker: string;
    taker: string;
    expiry: BigNumber;
    nonce: BigNumber;
    erc20Token: string;
    erc20TokenAmount: BigNumber;
    fees: LibNFTOrder.FeeStructOutput[];
    erc721Token: string;
    erc721TokenId: BigNumber;
    erc721TokenProperties: LibNFTOrder.PropertyStructOutput[];
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface ERC721OrdersFeatureInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_SEPARATOR()": FunctionFragment;
    "FEATURE_NAME()": FunctionFragment;
    "FEATURE_VERSION()": FunctionFragment;
    "_buyERC721((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,uint8,bytes32,bytes32),uint256,bytes)": FunctionFragment;
    "batchBuyERC721s((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[])[],(uint8,uint8,bytes32,bytes32)[],bytes[],bool)": FunctionFragment;
    "batchCancelERC721Orders(uint256[])": FunctionFragment;
    "batchMatchERC721Orders((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[])[],(uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[])[],(uint8,uint8,bytes32,bytes32)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "buyERC721((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,uint8,bytes32,bytes32),bytes)": FunctionFragment;
    "cancelERC721Order(uint256)": FunctionFragment;
    "getERC721OrderHash((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]))": FunctionFragment;
    "getERC721OrderStatus((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]))": FunctionFragment;
    "getERC721OrderStatusBitVector(address,uint248)": FunctionFragment;
    "matchERC721Orders((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "migrate()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "preSignERC721Order((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]))": FunctionFragment;
    "sellERC721((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,uint8,bytes32,bytes32),uint256,bool,bytes)": FunctionFragment;
    "validateERC721OrderProperties((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),uint256)": FunctionFragment;
    "validateERC721OrderSignature((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[]),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_SEPARATOR"
      | "FEATURE_NAME"
      | "FEATURE_VERSION"
      | "_buyERC721"
      | "batchBuyERC721s"
      | "batchCancelERC721Orders"
      | "batchMatchERC721Orders"
      | "buyERC721"
      | "cancelERC721Order"
      | "getERC721OrderHash"
      | "getERC721OrderStatus"
      | "getERC721OrderStatusBitVector"
      | "matchERC721Orders"
      | "migrate"
      | "onERC721Received"
      | "preSignERC721Order"
      | "sellERC721"
      | "validateERC721OrderProperties"
      | "validateERC721OrderSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyERC721",
    values: [
      LibNFTOrder.ERC721OrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuyERC721s",
    values: [
      LibNFTOrder.ERC721OrderStruct[],
      LibSignature.SignatureStruct[],
      BytesLike[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelERC721Orders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMatchERC721Orders",
    values: [
      LibNFTOrder.ERC721OrderStruct[],
      LibNFTOrder.ERC721OrderStruct[],
      LibSignature.SignatureStruct[],
      LibSignature.SignatureStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyERC721",
    values: [
      LibNFTOrder.ERC721OrderStruct,
      LibSignature.SignatureStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelERC721Order",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721OrderHash",
    values: [LibNFTOrder.ERC721OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721OrderStatus",
    values: [LibNFTOrder.ERC721OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC721OrderStatusBitVector",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchERC721Orders",
    values: [
      LibNFTOrder.ERC721OrderStruct,
      LibNFTOrder.ERC721OrderStruct,
      LibSignature.SignatureStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preSignERC721Order",
    values: [LibNFTOrder.ERC721OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sellERC721",
    values: [
      LibNFTOrder.ERC721OrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateERC721OrderProperties",
    values: [LibNFTOrder.ERC721OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateERC721OrderSignature",
    values: [LibNFTOrder.ERC721OrderStruct, LibSignature.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_buyERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyERC721s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelERC721Orders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMatchERC721Orders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelERC721Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721OrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721OrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC721OrderStatusBitVector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchERC721Orders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSignERC721Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateERC721OrderProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateERC721OrderSignature",
    data: BytesLike
  ): Result;

  events: {
    "ERC721OrderCancelled(address,uint256)": EventFragment;
    "ERC721OrderFilled(uint8,address,address,uint256,address,uint256,address,uint256,address)": EventFragment;
    "ERC721OrderPreSigned(uint8,address,address,uint256,uint256,address,uint256,tuple[],address,uint256,tuple[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC721OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721OrderPreSigned"): EventFragment;
}

export interface ERC721OrderCancelledEventObject {
  maker: string;
  nonce: BigNumber;
}
export type ERC721OrderCancelledEvent = TypedEvent<
  [string, BigNumber],
  ERC721OrderCancelledEventObject
>;

export type ERC721OrderCancelledEventFilter =
  TypedEventFilter<ERC721OrderCancelledEvent>;

export interface ERC721OrderFilledEventObject {
  direction: number;
  maker: string;
  taker: string;
  nonce: BigNumber;
  erc20Token: string;
  erc20TokenAmount: BigNumber;
  erc721Token: string;
  erc721TokenId: BigNumber;
  matcher: string;
}
export type ERC721OrderFilledEvent = TypedEvent<
  [
    number,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ],
  ERC721OrderFilledEventObject
>;

export type ERC721OrderFilledEventFilter =
  TypedEventFilter<ERC721OrderFilledEvent>;

export interface ERC721OrderPreSignedEventObject {
  direction: number;
  maker: string;
  taker: string;
  expiry: BigNumber;
  nonce: BigNumber;
  erc20Token: string;
  erc20TokenAmount: BigNumber;
  fees: LibNFTOrder.FeeStructOutput[];
  erc721Token: string;
  erc721TokenId: BigNumber;
  erc721TokenProperties: LibNFTOrder.PropertyStructOutput[];
}
export type ERC721OrderPreSignedEvent = TypedEvent<
  [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[]
  ],
  ERC721OrderPreSignedEventObject
>;

export type ERC721OrderPreSignedEventFilter =
  TypedEventFilter<ERC721OrderPreSignedEvent>;

export interface ERC721OrdersFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721OrdersFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      ethAvailable: BigNumberish,
      takerCallbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchBuyERC721s(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelERC721Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchMatchERC721Orders(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      buyOrders: LibNFTOrder.ERC721OrderStruct[],
      sellOrderSignatures: LibSignature.SignatureStruct[],
      buyOrderSignatures: LibSignature.SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getERC721OrderHash(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getERC721OrderStatus(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<[number] & { status: number }>;

    getERC721OrderStatusBitVector(
      maker: string,
      nonceRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bitVector: BigNumber }>;

    matchERC721Orders(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      sellOrderSignature: LibSignature.SignatureStruct,
      buyOrderSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellERC721(
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc721TokenId: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateERC721OrderProperties(
      order: LibNFTOrder.ERC721OrderStruct,
      erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateERC721OrderSignature(
      order: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

  FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  _buyERC721(
    sellOrder: LibNFTOrder.ERC721OrderStruct,
    signature: LibSignature.SignatureStruct,
    ethAvailable: BigNumberish,
    takerCallbackData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchBuyERC721s(
    sellOrders: LibNFTOrder.ERC721OrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    callbackData: BytesLike[],
    revertIfIncomplete: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelERC721Orders(
    orderNonces: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchMatchERC721Orders(
    sellOrders: LibNFTOrder.ERC721OrderStruct[],
    buyOrders: LibNFTOrder.ERC721OrderStruct[],
    sellOrderSignatures: LibSignature.SignatureStruct[],
    buyOrderSignatures: LibSignature.SignatureStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyERC721(
    sellOrder: LibNFTOrder.ERC721OrderStruct,
    signature: LibSignature.SignatureStruct,
    callbackData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelERC721Order(
    orderNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getERC721OrderHash(
    order: LibNFTOrder.ERC721OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getERC721OrderStatus(
    order: LibNFTOrder.ERC721OrderStruct,
    overrides?: CallOverrides
  ): Promise<number>;

  getERC721OrderStatusBitVector(
    maker: string,
    nonceRange: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchERC721Orders(
    sellOrder: LibNFTOrder.ERC721OrderStruct,
    buyOrder: LibNFTOrder.ERC721OrderStruct,
    sellOrderSignature: LibSignature.SignatureStruct,
    buyOrderSignature: LibSignature.SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    arg1: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preSignERC721Order(
    order: LibNFTOrder.ERC721OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellERC721(
    buyOrder: LibNFTOrder.ERC721OrderStruct,
    signature: LibSignature.SignatureStruct,
    erc721TokenId: BigNumberish,
    unwrapNativeToken: boolean,
    callbackData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateERC721OrderProperties(
    order: LibNFTOrder.ERC721OrderStruct,
    erc721TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateERC721OrderSignature(
    order: LibNFTOrder.ERC721OrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      ethAvailable: BigNumberish,
      takerCallbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    batchBuyERC721s(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    batchCancelERC721Orders(
      orderNonces: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchMatchERC721Orders(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      buyOrders: LibNFTOrder.ERC721OrderStruct[],
      sellOrderSignatures: LibSignature.SignatureStruct[],
      buyOrderSignatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[]] & { profits: BigNumber[]; successes: boolean[] }
    >;

    buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getERC721OrderHash(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getERC721OrderStatus(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<number>;

    getERC721OrderStatusBitVector(
      maker: string,
      nonceRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchERC721Orders(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      sellOrderSignature: LibSignature.SignatureStruct,
      buyOrderSignature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sellERC721(
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc721TokenId: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateERC721OrderProperties(
      order: LibNFTOrder.ERC721OrderStruct,
      erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateERC721OrderSignature(
      order: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC721OrderCancelled(address,uint256)"(
      maker?: null,
      nonce?: null
    ): ERC721OrderCancelledEventFilter;
    ERC721OrderCancelled(
      maker?: null,
      nonce?: null
    ): ERC721OrderCancelledEventFilter;

    "ERC721OrderFilled(uint8,address,address,uint256,address,uint256,address,uint256,address)"(
      direction?: null,
      maker?: null,
      taker?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      erc721Token?: null,
      erc721TokenId?: null,
      matcher?: null
    ): ERC721OrderFilledEventFilter;
    ERC721OrderFilled(
      direction?: null,
      maker?: null,
      taker?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      erc721Token?: null,
      erc721TokenId?: null,
      matcher?: null
    ): ERC721OrderFilledEventFilter;

    "ERC721OrderPreSigned(uint8,address,address,uint256,uint256,address,uint256,tuple[],address,uint256,tuple[])"(
      direction?: null,
      maker?: null,
      taker?: null,
      expiry?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      fees?: null,
      erc721Token?: null,
      erc721TokenId?: null,
      erc721TokenProperties?: null
    ): ERC721OrderPreSignedEventFilter;
    ERC721OrderPreSigned(
      direction?: null,
      maker?: null,
      taker?: null,
      expiry?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      fees?: null,
      erc721Token?: null,
      erc721TokenId?: null,
      erc721TokenProperties?: null
    ): ERC721OrderPreSignedEventFilter;
  };

  estimateGas: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      ethAvailable: BigNumberish,
      takerCallbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchBuyERC721s(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelERC721Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchMatchERC721Orders(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      buyOrders: LibNFTOrder.ERC721OrderStruct[],
      sellOrderSignatures: LibSignature.SignatureStruct[],
      buyOrderSignatures: LibSignature.SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getERC721OrderHash(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721OrderStatus(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC721OrderStatusBitVector(
      maker: string,
      nonceRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchERC721Orders(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      sellOrderSignature: LibSignature.SignatureStruct,
      buyOrderSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellERC721(
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc721TokenId: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateERC721OrderProperties(
      order: LibNFTOrder.ERC721OrderStruct,
      erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateERC721OrderSignature(
      order: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      ethAvailable: BigNumberish,
      takerCallbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchBuyERC721s(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelERC721Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchMatchERC721Orders(
      sellOrders: LibNFTOrder.ERC721OrderStruct[],
      buyOrders: LibNFTOrder.ERC721OrderStruct[],
      sellOrderSignatures: LibSignature.SignatureStruct[],
      buyOrderSignatures: LibSignature.SignatureStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyERC721(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelERC721Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getERC721OrderHash(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721OrderStatus(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC721OrderStatusBitVector(
      maker: string,
      nonceRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchERC721Orders(
      sellOrder: LibNFTOrder.ERC721OrderStruct,
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      sellOrderSignature: LibSignature.SignatureStruct,
      buyOrderSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preSignERC721Order(
      order: LibNFTOrder.ERC721OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellERC721(
      buyOrder: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc721TokenId: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateERC721OrderProperties(
      order: LibNFTOrder.ERC721OrderStruct,
      erc721TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateERC721OrderSignature(
      order: LibNFTOrder.ERC721OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
