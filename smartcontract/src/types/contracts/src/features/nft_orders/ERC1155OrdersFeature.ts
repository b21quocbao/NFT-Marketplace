/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNFTOrder {
  export type FeeStruct = {
    recipient: string;
    amount: BigNumberish;
    feeData: BytesLike;
  };

  export type FeeStructOutput = [string, BigNumber, string] & {
    recipient: string;
    amount: BigNumber;
    feeData: string;
  };

  export type PropertyStruct = {
    propertyValidator: string;
    propertyData: BytesLike;
  };

  export type PropertyStructOutput = [string, string] & {
    propertyValidator: string;
    propertyData: string;
  };

  export type ERC1155OrderStruct = {
    direction: BigNumberish;
    maker: string;
    taker: string;
    expiry: BigNumberish;
    nonce: BigNumberish;
    erc20Token: string;
    erc20TokenAmount: BigNumberish;
    fees: LibNFTOrder.FeeStruct[];
    erc1155Token: string;
    erc1155TokenId: BigNumberish;
    erc1155TokenProperties: LibNFTOrder.PropertyStruct[];
    erc1155TokenAmount: BigNumberish;
  };

  export type ERC1155OrderStructOutput = [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[],
    BigNumber
  ] & {
    direction: number;
    maker: string;
    taker: string;
    expiry: BigNumber;
    nonce: BigNumber;
    erc20Token: string;
    erc20TokenAmount: BigNumber;
    fees: LibNFTOrder.FeeStructOutput[];
    erc1155Token: string;
    erc1155TokenId: BigNumber;
    erc1155TokenProperties: LibNFTOrder.PropertyStructOutput[];
    erc1155TokenAmount: BigNumber;
  };

  export type OrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
    orderAmount: BigNumberish;
    remainingAmount: BigNumberish;
  };

  export type OrderInfoStructOutput = [string, number, BigNumber, BigNumber] & {
    orderHash: string;
    status: number;
    orderAmount: BigNumber;
    remainingAmount: BigNumber;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export declare namespace NFTOrders {
  export type BuyParamsStruct = {
    buyAmount: BigNumberish;
    ethAvailable: BigNumberish;
    takerCallbackData: BytesLike;
  };

  export type BuyParamsStructOutput = [BigNumber, BigNumber, string] & {
    buyAmount: BigNumber;
    ethAvailable: BigNumber;
    takerCallbackData: string;
  };
}

export interface ERC1155OrdersFeatureInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_SEPARATOR()": FunctionFragment;
    "FEATURE_NAME()": FunctionFragment;
    "FEATURE_VERSION()": FunctionFragment;
    "_buyERC1155((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128),(uint8,uint8,bytes32,bytes32),(uint128,uint256,bytes))": FunctionFragment;
    "batchBuyERC1155s((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128)[],(uint8,uint8,bytes32,bytes32)[],uint128[],bytes[],bool)": FunctionFragment;
    "batchCancelERC1155Orders(uint256[])": FunctionFragment;
    "buyERC1155((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128),(uint8,uint8,bytes32,bytes32),uint128,bytes)": FunctionFragment;
    "cancelERC1155Order(uint256)": FunctionFragment;
    "getERC1155OrderHash((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128))": FunctionFragment;
    "getERC1155OrderInfo((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128))": FunctionFragment;
    "migrate()": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "preSignERC1155Order((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128))": FunctionFragment;
    "sellERC1155((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128),(uint8,uint8,bytes32,bytes32),uint256,uint128,bool,bytes)": FunctionFragment;
    "validateERC1155OrderProperties((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128),uint256)": FunctionFragment;
    "validateERC1155OrderSignature((uint8,address,address,uint256,uint256,address,uint256,(address,uint256,bytes)[],address,uint256,(address,bytes)[],uint128),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_SEPARATOR"
      | "FEATURE_NAME"
      | "FEATURE_VERSION"
      | "_buyERC1155"
      | "batchBuyERC1155s"
      | "batchCancelERC1155Orders"
      | "buyERC1155"
      | "cancelERC1155Order"
      | "getERC1155OrderHash"
      | "getERC1155OrderInfo"
      | "migrate"
      | "onERC1155Received"
      | "preSignERC1155Order"
      | "sellERC1155"
      | "validateERC1155OrderProperties"
      | "validateERC1155OrderSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEATURE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_buyERC1155",
    values: [
      LibNFTOrder.ERC1155OrderStruct,
      LibSignature.SignatureStruct,
      NFTOrders.BuyParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuyERC1155s",
    values: [
      LibNFTOrder.ERC1155OrderStruct[],
      LibSignature.SignatureStruct[],
      BigNumberish[],
      BytesLike[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelERC1155Orders",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyERC1155",
    values: [
      LibNFTOrder.ERC1155OrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelERC1155Order",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC1155OrderHash",
    values: [LibNFTOrder.ERC1155OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC1155OrderInfo",
    values: [LibNFTOrder.ERC1155OrderStruct]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preSignERC1155Order",
    values: [LibNFTOrder.ERC1155OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sellERC1155",
    values: [
      LibNFTOrder.ERC1155OrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      BigNumberish,
      boolean,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateERC1155OrderProperties",
    values: [LibNFTOrder.ERC1155OrderStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateERC1155OrderSignature",
    values: [LibNFTOrder.ERC1155OrderStruct, LibSignature.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEATURE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_buyERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBuyERC1155s",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelERC1155Orders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyERC1155", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelERC1155Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC1155OrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC1155OrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preSignERC1155Order",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateERC1155OrderProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateERC1155OrderSignature",
    data: BytesLike
  ): Result;

  events: {
    "ERC1155OrderCancelled(address,uint256)": EventFragment;
    "ERC1155OrderFilled(uint8,address,address,uint256,address,uint256,address,uint256,uint128,address)": EventFragment;
    "ERC1155OrderPreSigned(uint8,address,address,uint256,uint256,address,uint256,tuple[],address,uint256,tuple[],uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC1155OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155OrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155OrderPreSigned"): EventFragment;
}

export interface ERC1155OrderCancelledEventObject {
  maker: string;
  nonce: BigNumber;
}
export type ERC1155OrderCancelledEvent = TypedEvent<
  [string, BigNumber],
  ERC1155OrderCancelledEventObject
>;

export type ERC1155OrderCancelledEventFilter =
  TypedEventFilter<ERC1155OrderCancelledEvent>;

export interface ERC1155OrderFilledEventObject {
  direction: number;
  maker: string;
  taker: string;
  nonce: BigNumber;
  erc20Token: string;
  erc20FillAmount: BigNumber;
  erc1155Token: string;
  erc1155TokenId: BigNumber;
  erc1155FillAmount: BigNumber;
  matcher: string;
}
export type ERC1155OrderFilledEvent = TypedEvent<
  [
    number,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  ERC1155OrderFilledEventObject
>;

export type ERC1155OrderFilledEventFilter =
  TypedEventFilter<ERC1155OrderFilledEvent>;

export interface ERC1155OrderPreSignedEventObject {
  direction: number;
  maker: string;
  taker: string;
  expiry: BigNumber;
  nonce: BigNumber;
  erc20Token: string;
  erc20TokenAmount: BigNumber;
  fees: LibNFTOrder.FeeStructOutput[];
  erc1155Token: string;
  erc1155TokenId: BigNumber;
  erc1155TokenProperties: LibNFTOrder.PropertyStructOutput[];
  erc1155TokenAmount: BigNumber;
}
export type ERC1155OrderPreSignedEvent = TypedEvent<
  [
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    LibNFTOrder.FeeStructOutput[],
    string,
    BigNumber,
    LibNFTOrder.PropertyStructOutput[],
    BigNumber
  ],
  ERC1155OrderPreSignedEventObject
>;

export type ERC1155OrderPreSignedEventFilter =
  TypedEventFilter<ERC1155OrderPreSignedEvent>;

export interface ERC1155OrdersFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155OrdersFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<[string]>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      params: NFTOrders.BuyParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchBuyERC1155s(
      sellOrders: LibNFTOrder.ERC1155OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      erc1155FillAmounts: BigNumberish[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelERC1155Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155BuyAmount: BigNumberish,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getERC1155OrderHash(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getERC1155OrderInfo(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNFTOrder.OrderInfoStructOutput] & {
        orderInfo: LibNFTOrder.OrderInfoStructOutput;
      }
    >;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellERC1155(
      buyOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155TokenId: BigNumberish,
      erc1155SellAmount: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateERC1155OrderProperties(
      order: LibNFTOrder.ERC1155OrderStruct,
      erc1155TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateERC1155OrderSignature(
      order: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

  FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  _buyERC1155(
    sellOrder: LibNFTOrder.ERC1155OrderStruct,
    signature: LibSignature.SignatureStruct,
    params: NFTOrders.BuyParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchBuyERC1155s(
    sellOrders: LibNFTOrder.ERC1155OrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    erc1155FillAmounts: BigNumberish[],
    callbackData: BytesLike[],
    revertIfIncomplete: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelERC1155Orders(
    orderNonces: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyERC1155(
    sellOrder: LibNFTOrder.ERC1155OrderStruct,
    signature: LibSignature.SignatureStruct,
    erc1155BuyAmount: BigNumberish,
    callbackData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelERC1155Order(
    orderNonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getERC1155OrderHash(
    order: LibNFTOrder.ERC1155OrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getERC1155OrderInfo(
    order: LibNFTOrder.ERC1155OrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNFTOrder.OrderInfoStructOutput>;

  migrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    arg1: string,
    tokenId: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  preSignERC1155Order(
    order: LibNFTOrder.ERC1155OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellERC1155(
    buyOrder: LibNFTOrder.ERC1155OrderStruct,
    signature: LibSignature.SignatureStruct,
    erc1155TokenId: BigNumberish,
    erc1155SellAmount: BigNumberish,
    unwrapNativeToken: boolean,
    callbackData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateERC1155OrderProperties(
    order: LibNFTOrder.ERC1155OrderStruct,
    erc1155TokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  validateERC1155OrderSignature(
    order: LibNFTOrder.ERC1155OrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<string>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      params: NFTOrders.BuyParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    batchBuyERC1155s(
      sellOrders: LibNFTOrder.ERC1155OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      erc1155FillAmounts: BigNumberish[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    batchCancelERC1155Orders(
      orderNonces: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155BuyAmount: BigNumberish,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getERC1155OrderHash(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getERC1155OrderInfo(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNFTOrder.OrderInfoStructOutput>;

    migrate(overrides?: CallOverrides): Promise<string>;

    onERC1155Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sellERC1155(
      buyOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155TokenId: BigNumberish,
      erc1155SellAmount: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validateERC1155OrderProperties(
      order: LibNFTOrder.ERC1155OrderStruct,
      erc1155TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateERC1155OrderSignature(
      order: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ERC1155OrderCancelled(address,uint256)"(
      maker?: null,
      nonce?: null
    ): ERC1155OrderCancelledEventFilter;
    ERC1155OrderCancelled(
      maker?: null,
      nonce?: null
    ): ERC1155OrderCancelledEventFilter;

    "ERC1155OrderFilled(uint8,address,address,uint256,address,uint256,address,uint256,uint128,address)"(
      direction?: null,
      maker?: null,
      taker?: null,
      nonce?: null,
      erc20Token?: null,
      erc20FillAmount?: null,
      erc1155Token?: null,
      erc1155TokenId?: null,
      erc1155FillAmount?: null,
      matcher?: null
    ): ERC1155OrderFilledEventFilter;
    ERC1155OrderFilled(
      direction?: null,
      maker?: null,
      taker?: null,
      nonce?: null,
      erc20Token?: null,
      erc20FillAmount?: null,
      erc1155Token?: null,
      erc1155TokenId?: null,
      erc1155FillAmount?: null,
      matcher?: null
    ): ERC1155OrderFilledEventFilter;

    "ERC1155OrderPreSigned(uint8,address,address,uint256,uint256,address,uint256,tuple[],address,uint256,tuple[],uint128)"(
      direction?: null,
      maker?: null,
      taker?: null,
      expiry?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      fees?: null,
      erc1155Token?: null,
      erc1155TokenId?: null,
      erc1155TokenProperties?: null,
      erc1155TokenAmount?: null
    ): ERC1155OrderPreSignedEventFilter;
    ERC1155OrderPreSigned(
      direction?: null,
      maker?: null,
      taker?: null,
      expiry?: null,
      nonce?: null,
      erc20Token?: null,
      erc20TokenAmount?: null,
      fees?: null,
      erc1155Token?: null,
      erc1155TokenId?: null,
      erc1155TokenProperties?: null,
      erc1155TokenAmount?: null
    ): ERC1155OrderPreSignedEventFilter;
  };

  estimateGas: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      params: NFTOrders.BuyParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchBuyERC1155s(
      sellOrders: LibNFTOrder.ERC1155OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      erc1155FillAmounts: BigNumberish[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelERC1155Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155BuyAmount: BigNumberish,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getERC1155OrderHash(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC1155OrderInfo(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellERC1155(
      buyOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155TokenId: BigNumberish,
      erc1155SellAmount: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateERC1155OrderProperties(
      order: LibNFTOrder.ERC1155OrderStruct,
      erc1155TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateERC1155OrderSignature(
      order: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEATURE_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEATURE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      params: NFTOrders.BuyParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchBuyERC1155s(
      sellOrders: LibNFTOrder.ERC1155OrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      erc1155FillAmounts: BigNumberish[],
      callbackData: BytesLike[],
      revertIfIncomplete: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelERC1155Orders(
      orderNonces: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyERC1155(
      sellOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155BuyAmount: BigNumberish,
      callbackData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelERC1155Order(
      orderNonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getERC1155OrderHash(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC1155OrderInfo(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      arg1: string,
      tokenId: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    preSignERC1155Order(
      order: LibNFTOrder.ERC1155OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellERC1155(
      buyOrder: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      erc1155TokenId: BigNumberish,
      erc1155SellAmount: BigNumberish,
      unwrapNativeToken: boolean,
      callbackData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateERC1155OrderProperties(
      order: LibNFTOrder.ERC1155OrderStruct,
      erc1155TokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateERC1155OrderSignature(
      order: LibNFTOrder.ERC1155OrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
