/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNativeOrder {
  export type LimitOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    takerTokenFeeAmount: BigNumber;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };

  export type OrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
    takerTokenFilledAmount: BigNumberish;
  };

  export type OrderInfoStructOutput = [string, number, BigNumber] & {
    orderHash: string;
    status: number;
    takerTokenFilledAmount: BigNumber;
  };

  export type RfqOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type RfqOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface NativeOrdersInfoInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_SEPARATOR()": FunctionFragment;
    "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "isValidOrderSigner(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_SEPARATOR"
      | "batchGetLimitOrderRelevantStates"
      | "batchGetRfqOrderRelevantStates"
      | "getLimitOrderHash"
      | "getLimitOrderInfo"
      | "getLimitOrderRelevantState"
      | "getRfqOrderHash"
      | "getRfqOrderInfo"
      | "getRfqOrderRelevantState"
      | "isValidOrderSigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetLimitOrderRelevantStates",
    values: [LibNativeOrder.LimitOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetRfqOrderRelevantStates",
    values: [LibNativeOrder.RfqOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderHash",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderInfo",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderRelevantState",
    values: [LibNativeOrder.LimitOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderHash",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderInfo",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderRelevantState",
    values: [LibNativeOrder.RfqOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrderSigner",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetLimitOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetRfqOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrderSigner",
    data: BytesLike
  ): Result;

  events: {};
}

export interface NativeOrdersInfo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NativeOrdersInfoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
      }
    >;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
      }
    >;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;
  };

  EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  batchGetLimitOrderRelevantStates(
    orders: LibNativeOrder.LimitOrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: LibNativeOrder.OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  batchGetRfqOrderRelevantStates(
    orders: LibNativeOrder.RfqOrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: LibNativeOrder.OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  getLimitOrderHash(
    order: LibNativeOrder.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getLimitOrderInfo(
    order: LibNativeOrder.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNativeOrder.OrderInfoStructOutput>;

  getLimitOrderRelevantState(
    order: LibNativeOrder.LimitOrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: LibNativeOrder.OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  getRfqOrderHash(
    order: LibNativeOrder.RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getRfqOrderInfo(
    order: LibNativeOrder.RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNativeOrder.OrderInfoStructOutput>;

  getRfqOrderRelevantState(
    order: LibNativeOrder.RfqOrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: LibNativeOrder.OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  isValidOrderSigner(
    maker: string,
    signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNativeOrder.OrderInfoStructOutput>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNativeOrder.OrderInfoStructOutput>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
