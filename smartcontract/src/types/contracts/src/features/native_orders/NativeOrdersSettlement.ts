/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNativeOrder {
  export type LimitOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    takerTokenFeeAmount: BigNumberish;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    takerTokenFeeAmount: BigNumber;
    maker: string;
    taker: string;
    sender: string;
    feeRecipient: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };

  export type RfqOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: BytesLike;
    expiry: BigNumberish;
    salt: BigNumberish;
  };

  export type RfqOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    maker: string;
    taker: string;
    txOrigin: string;
    pool: string;
    expiry: BigNumber;
    salt: BigNumber;
  };

  export type OrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
    takerTokenFilledAmount: BigNumberish;
  };

  export type OrderInfoStructOutput = [string, number, BigNumber] & {
    orderHash: string;
    status: number;
    takerTokenFilledAmount: BigNumber;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface NativeOrdersSettlementInterface extends utils.Interface {
  functions: {
    "EIP712_DOMAIN_SEPARATOR()": FunctionFragment;
    "PROTOCOL_FEE_MULTIPLIER()": FunctionFragment;
    "_fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,address)": FunctionFragment;
    "_fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": FunctionFragment;
    "batchCancelLimitOrders((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[])": FunctionFragment;
    "batchCancelPairLimitOrders(address[],address[],uint256[])": FunctionFragment;
    "batchCancelPairLimitOrdersWithSigner(address,address[],address[],uint256[])": FunctionFragment;
    "batchCancelPairRfqOrders(address[],address[],uint256[])": FunctionFragment;
    "batchCancelPairRfqOrdersWithSigner(address,address[],address[],uint256[])": FunctionFragment;
    "batchCancelRfqOrders((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[])": FunctionFragment;
    "batchGetLimitOrderRelevantStates((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "batchGetRfqOrderRelevantStates((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[])": FunctionFragment;
    "cancelLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "cancelPairLimitOrders(address,address,uint256)": FunctionFragment;
    "cancelPairLimitOrdersWithSigner(address,address,address,uint256)": FunctionFragment;
    "cancelPairRfqOrders(address,address,uint256)": FunctionFragment;
    "cancelPairRfqOrdersWithSigner(address,address,address,uint256)": FunctionFragment;
    "cancelRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "fillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillLimitOrder((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOrKillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "getLimitOrderHash((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderInfo((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getLimitOrderRelevantState((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "getProtocolFeeMultiplier()": FunctionFragment;
    "getRfqOrderHash((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderInfo((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256))": FunctionFragment;
    "getRfqOrderRelevantState((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "isValidOrderSigner(address,address)": FunctionFragment;
    "registerAllowedOrderSigner(address,bool)": FunctionFragment;
    "registerAllowedRfqOrigins(address[],bool)": FunctionFragment;
    "transferProtocolFeesForPools(bytes32[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_DOMAIN_SEPARATOR"
      | "PROTOCOL_FEE_MULTIPLIER"
      | "_fillLimitOrder"
      | "_fillRfqOrder"
      | "batchCancelLimitOrders"
      | "batchCancelPairLimitOrders"
      | "batchCancelPairLimitOrdersWithSigner"
      | "batchCancelPairRfqOrders"
      | "batchCancelPairRfqOrdersWithSigner"
      | "batchCancelRfqOrders"
      | "batchGetLimitOrderRelevantStates"
      | "batchGetRfqOrderRelevantStates"
      | "cancelLimitOrder"
      | "cancelPairLimitOrders"
      | "cancelPairLimitOrdersWithSigner"
      | "cancelPairRfqOrders"
      | "cancelPairRfqOrdersWithSigner"
      | "cancelRfqOrder"
      | "fillLimitOrder"
      | "fillOrKillLimitOrder"
      | "fillOrKillRfqOrder"
      | "fillRfqOrder"
      | "getLimitOrderHash"
      | "getLimitOrderInfo"
      | "getLimitOrderRelevantState"
      | "getProtocolFeeMultiplier"
      | "getRfqOrderHash"
      | "getRfqOrderInfo"
      | "getRfqOrderRelevantState"
      | "isValidOrderSigner"
      | "registerAllowedOrderSigner"
      | "registerAllowedRfqOrigins"
      | "transferProtocolFeesForPools"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_fillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_fillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      string,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelLimitOrders",
    values: [LibNativeOrder.LimitOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairLimitOrders",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairLimitOrdersWithSigner",
    values: [string, string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairRfqOrders",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelPairRfqOrdersWithSigner",
    values: [string, string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCancelRfqOrders",
    values: [LibNativeOrder.RfqOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetLimitOrderRelevantStates",
    values: [LibNativeOrder.LimitOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetRfqOrderRelevantStates",
    values: [LibNativeOrder.RfqOrderStruct[], LibSignature.SignatureStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairLimitOrders",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairLimitOrdersWithSigner",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairRfqOrders",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPairRfqOrdersWithSigner",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRfqOrder",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillLimitOrder",
    values: [
      LibNativeOrder.LimitOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrKillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRfqOrder",
    values: [
      LibNativeOrder.RfqOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderHash",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderInfo",
    values: [LibNativeOrder.LimitOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderRelevantState",
    values: [LibNativeOrder.LimitOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderHash",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderInfo",
    values: [LibNativeOrder.RfqOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRfqOrderRelevantState",
    values: [LibNativeOrder.RfqOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidOrderSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAllowedOrderSigner",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAllowedRfqOrigins",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferProtocolFeesForPools",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROTOCOL_FEE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairLimitOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelPairRfqOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchCancelRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetLimitOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetRfqOrderRelevantStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairLimitOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairRfqOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPairRfqOrdersWithSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrKillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillRfqOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRfqOrderRelevantState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidOrderSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAllowedOrderSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAllowedRfqOrigins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferProtocolFeesForPools",
    data: BytesLike
  ): Result;

  events: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)": EventFragment;
    "OrderCancelled(bytes32,address)": EventFragment;
    "OrderSignerRegistered(address,address,bool)": EventFragment;
    "PairCancelledLimitOrders(address,address,address,uint256)": EventFragment;
    "PairCancelledRfqOrders(address,address,address,uint256)": EventFragment;
    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)": EventFragment;
    "RfqOrderOriginsAllowed(address,address[],bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LimitOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSignerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledLimitOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledRfqOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderOriginsAllowed"): EventFragment;
}

export interface LimitOrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  feeRecipient: string;
  makerToken: string;
  takerToken: string;
  takerTokenFilledAmount: BigNumber;
  makerTokenFilledAmount: BigNumber;
  takerTokenFeeFilledAmount: BigNumber;
  protocolFeePaid: BigNumber;
  pool: string;
}
export type LimitOrderFilledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  LimitOrderFilledEventObject
>;

export type LimitOrderFilledEventFilter =
  TypedEventFilter<LimitOrderFilledEvent>;

export interface OrderCancelledEventObject {
  orderHash: string;
  maker: string;
}
export type OrderCancelledEvent = TypedEvent<
  [string, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderSignerRegisteredEventObject {
  maker: string;
  signer: string;
  allowed: boolean;
}
export type OrderSignerRegisteredEvent = TypedEvent<
  [string, string, boolean],
  OrderSignerRegisteredEventObject
>;

export type OrderSignerRegisteredEventFilter =
  TypedEventFilter<OrderSignerRegisteredEvent>;

export interface PairCancelledLimitOrdersEventObject {
  maker: string;
  makerToken: string;
  takerToken: string;
  minValidSalt: BigNumber;
}
export type PairCancelledLimitOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCancelledLimitOrdersEventObject
>;

export type PairCancelledLimitOrdersEventFilter =
  TypedEventFilter<PairCancelledLimitOrdersEvent>;

export interface PairCancelledRfqOrdersEventObject {
  maker: string;
  makerToken: string;
  takerToken: string;
  minValidSalt: BigNumber;
}
export type PairCancelledRfqOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCancelledRfqOrdersEventObject
>;

export type PairCancelledRfqOrdersEventFilter =
  TypedEventFilter<PairCancelledRfqOrdersEvent>;

export interface RfqOrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  makerToken: string;
  takerToken: string;
  takerTokenFilledAmount: BigNumber;
  makerTokenFilledAmount: BigNumber;
  pool: string;
}
export type RfqOrderFilledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  RfqOrderFilledEventObject
>;

export type RfqOrderFilledEventFilter = TypedEventFilter<RfqOrderFilledEvent>;

export interface RfqOrderOriginsAllowedEventObject {
  origin: string;
  addrs: string[];
  allowed: boolean;
}
export type RfqOrderOriginsAllowedEvent = TypedEvent<
  [string, string[], boolean],
  RfqOrderOriginsAllowedEventObject
>;

export type RfqOrderOriginsAllowedEventFilter =
  TypedEventFilter<RfqOrderOriginsAllowedEvent>;

export interface NativeOrdersSettlement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NativeOrdersSettlementInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<[number]>;

    _fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelLimitOrders(
      orders: LibNativeOrder.LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairLimitOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelPairRfqOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchCancelRfqOrders(
      orders: LibNativeOrder.RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    cancelLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairLimitOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelPairRfqOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrKillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
      }
    >;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getProtocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<[number] & { multiplier: number }>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
      }
    >;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    registerAllowedOrderSigner(
      signer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

  _fillLimitOrder(
    order: LibNativeOrder.LimitOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    taker: string,
    sender: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _fillRfqOrder(
    order: LibNativeOrder.RfqOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    taker: string,
    useSelfBalance: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelLimitOrders(
    orders: LibNativeOrder.LimitOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairLimitOrders(
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairLimitOrdersWithSigner(
    maker: string,
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairRfqOrders(
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelPairRfqOrdersWithSigner(
    maker: string,
    makerTokens: string[],
    takerTokens: string[],
    minValidSalts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchCancelRfqOrders(
    orders: LibNativeOrder.RfqOrderStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchGetLimitOrderRelevantStates(
    orders: LibNativeOrder.LimitOrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: LibNativeOrder.OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  batchGetRfqOrderRelevantStates(
    orders: LibNativeOrder.RfqOrderStruct[],
    signatures: LibSignature.SignatureStruct[],
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
      orderInfos: LibNativeOrder.OrderInfoStructOutput[];
      actualFillableTakerTokenAmounts: BigNumber[];
      isSignatureValids: boolean[];
    }
  >;

  cancelLimitOrder(
    order: LibNativeOrder.LimitOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairLimitOrders(
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairLimitOrdersWithSigner(
    maker: string,
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairRfqOrders(
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelPairRfqOrdersWithSigner(
    maker: string,
    makerToken: string,
    takerToken: string,
    minValidSalt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelRfqOrder(
    order: LibNativeOrder.RfqOrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillLimitOrder(
    order: LibNativeOrder.LimitOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillLimitOrder(
    order: LibNativeOrder.LimitOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrKillRfqOrder(
    order: LibNativeOrder.RfqOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRfqOrder(
    order: LibNativeOrder.RfqOrderStruct,
    signature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLimitOrderHash(
    order: LibNativeOrder.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getLimitOrderInfo(
    order: LibNativeOrder.LimitOrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNativeOrder.OrderInfoStructOutput>;

  getLimitOrderRelevantState(
    order: LibNativeOrder.LimitOrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: LibNativeOrder.OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<number>;

  getRfqOrderHash(
    order: LibNativeOrder.RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getRfqOrderInfo(
    order: LibNativeOrder.RfqOrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNativeOrder.OrderInfoStructOutput>;

  getRfqOrderRelevantState(
    order: LibNativeOrder.RfqOrderStruct,
    signature: LibSignature.SignatureStruct,
    overrides?: CallOverrides
  ): Promise<
    [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
      orderInfo: LibNativeOrder.OrderInfoStructOutput;
      actualFillableTakerTokenAmount: BigNumber;
      isSignatureValid: boolean;
    }
  >;

  isValidOrderSigner(
    maker: string,
    signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerAllowedOrderSigner(
    signer: string,
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAllowedRfqOrigins(
    origins: string[],
    allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferProtocolFeesForPools(
    poolIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<number>;

    _fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    _fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    batchCancelLimitOrders(
      orders: LibNativeOrder.LimitOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairLimitOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelPairRfqOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchCancelRfqOrders(
      orders: LibNativeOrder.RfqOrderStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput[], BigNumber[], boolean[]] & {
        orderInfos: LibNativeOrder.OrderInfoStructOutput[];
        actualFillableTakerTokenAmounts: BigNumber[];
        isSignatureValids: boolean[];
      }
    >;

    cancelLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairLimitOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelPairRfqOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillOrKillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNativeOrder.OrderInfoStructOutput>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<number>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNativeOrder.OrderInfoStructOutput>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OrderInfoStructOutput, BigNumber, boolean] & {
        orderInfo: LibNativeOrder.OrderInfoStructOutput;
        actualFillableTakerTokenAmount: BigNumber;
        isSignatureValid: boolean;
      }
    >;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAllowedOrderSigner(
      signer: string,
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;
    LimitOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;

    "OrderCancelled(bytes32,address)"(
      orderHash?: null,
      maker?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(orderHash?: null, maker?: null): OrderCancelledEventFilter;

    "OrderSignerRegistered(address,address,bool)"(
      maker?: null,
      signer?: null,
      allowed?: null
    ): OrderSignerRegisteredEventFilter;
    OrderSignerRegistered(
      maker?: null,
      signer?: null,
      allowed?: null
    ): OrderSignerRegisteredEventFilter;

    "PairCancelledLimitOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;
    PairCancelledLimitOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;

    "PairCancelledRfqOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;
    PairCancelledRfqOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;

    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;
    RfqOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;

    "RfqOrderOriginsAllowed(address,address[],bool)"(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
    RfqOrderOriginsAllowed(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
  };

  estimateGas: {
    EIP712_DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PROTOCOL_FEE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    _fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelLimitOrders(
      orders: LibNativeOrder.LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairLimitOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelPairRfqOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchCancelRfqOrders(
      orders: LibNativeOrder.RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairLimitOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelPairRfqOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrKillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolFeeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAllowedOrderSigner(
      signer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_DOMAIN_SEPARATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PROTOCOL_FEE_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      sender: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelLimitOrders(
      orders: LibNativeOrder.LimitOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairLimitOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairLimitOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairRfqOrders(
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelPairRfqOrdersWithSigner(
      maker: string,
      makerTokens: string[],
      takerTokens: string[],
      minValidSalts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchCancelRfqOrders(
      orders: LibNativeOrder.RfqOrderStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchGetLimitOrderRelevantStates(
      orders: LibNativeOrder.LimitOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGetRfqOrderRelevantStates(
      orders: LibNativeOrder.RfqOrderStruct[],
      signatures: LibSignature.SignatureStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairLimitOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairLimitOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairRfqOrders(
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelPairRfqOrdersWithSigner(
      maker: string,
      makerToken: string,
      takerToken: string,
      minValidSalt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillLimitOrder(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrKillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRfqOrder(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLimitOrderHash(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderInfo(
      order: LibNativeOrder.LimitOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderRelevantState(
      order: LibNativeOrder.LimitOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolFeeMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderHash(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderInfo(
      order: LibNativeOrder.RfqOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRfqOrderRelevantState(
      order: LibNativeOrder.RfqOrderStruct,
      signature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOrderSigner(
      maker: string,
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAllowedOrderSigner(
      signer: string,
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAllowedRfqOrigins(
      origins: string[],
      allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferProtocolFeesForPools(
      poolIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
