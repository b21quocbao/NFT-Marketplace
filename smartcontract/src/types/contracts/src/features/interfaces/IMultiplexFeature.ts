/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace IMultiplexFeature {
  export type BatchSellSubcallStruct = {
    id: BigNumberish;
    sellAmount: BigNumberish;
    data: BytesLike;
  };

  export type BatchSellSubcallStructOutput = [number, BigNumber, string] & {
    id: number;
    sellAmount: BigNumber;
    data: string;
  };

  export type MultiHopSellSubcallStruct = { id: BigNumberish; data: BytesLike };

  export type MultiHopSellSubcallStructOutput = [number, string] & {
    id: number;
    data: string;
  };
}

export interface IMultiplexFeatureInterface extends utils.Interface {
  functions: {
    "multiplexBatchSellEthForToken(address,(uint8,uint256,bytes)[],uint256)": FunctionFragment;
    "multiplexBatchSellTokenForEth(address,(uint8,uint256,bytes)[],uint256,uint256)": FunctionFragment;
    "multiplexBatchSellTokenForToken(address,address,(uint8,uint256,bytes)[],uint256,uint256)": FunctionFragment;
    "multiplexMultiHopSellEthForToken(address[],(uint8,bytes)[],uint256)": FunctionFragment;
    "multiplexMultiHopSellTokenForEth(address[],(uint8,bytes)[],uint256,uint256)": FunctionFragment;
    "multiplexMultiHopSellTokenForToken(address[],(uint8,bytes)[],uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "multiplexBatchSellEthForToken"
      | "multiplexBatchSellTokenForEth"
      | "multiplexBatchSellTokenForToken"
      | "multiplexMultiHopSellEthForToken"
      | "multiplexMultiHopSellTokenForEth"
      | "multiplexMultiHopSellTokenForToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "multiplexBatchSellEthForToken",
    values: [string, IMultiplexFeature.BatchSellSubcallStruct[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForEth",
    values: [
      string,
      IMultiplexFeature.BatchSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexBatchSellTokenForToken",
    values: [
      string,
      string,
      IMultiplexFeature.BatchSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellEthForToken",
    values: [
      string[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForEth",
    values: [
      string[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    values: [
      string[],
      IMultiplexFeature.MultiHopSellSubcallStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "multiplexBatchSellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexBatchSellTokenForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellEthForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplexMultiHopSellTokenForToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMultiplexFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMultiplexFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    multiplexBatchSellEthForToken(
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexBatchSellTokenForEth(
      inputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexBatchSellTokenForToken(
      inputToken: string,
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexMultiHopSellEthForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexMultiHopSellTokenForEth(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiplexMultiHopSellTokenForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  multiplexBatchSellEthForToken(
    outputToken: string,
    calls: IMultiplexFeature.BatchSellSubcallStruct[],
    minBuyAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexBatchSellTokenForEth(
    inputToken: string,
    calls: IMultiplexFeature.BatchSellSubcallStruct[],
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexBatchSellTokenForToken(
    inputToken: string,
    outputToken: string,
    calls: IMultiplexFeature.BatchSellSubcallStruct[],
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexMultiHopSellEthForToken(
    tokens: string[],
    calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
    minBuyAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexMultiHopSellTokenForEth(
    tokens: string[],
    calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiplexMultiHopSellTokenForToken(
    tokens: string[],
    calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    multiplexBatchSellEthForToken(
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForEth(
      inputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      inputToken: string,
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexMultiHopSellEthForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForEth(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    multiplexBatchSellEthForToken(
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForEth(
      inputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexBatchSellTokenForToken(
      inputToken: string,
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexMultiHopSellEthForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForEth(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiplexMultiHopSellTokenForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    multiplexBatchSellEthForToken(
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexBatchSellTokenForEth(
      inputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexBatchSellTokenForToken(
      inputToken: string,
      outputToken: string,
      calls: IMultiplexFeature.BatchSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexMultiHopSellEthForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      minBuyAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexMultiHopSellTokenForEth(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiplexMultiHopSellTokenForToken(
      tokens: string[],
      calls: IMultiplexFeature.MultiHopSellSubcallStruct[],
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
