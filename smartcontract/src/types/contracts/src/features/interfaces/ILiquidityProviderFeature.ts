/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ILiquidityProviderFeatureInterface extends utils.Interface {
  functions: {
    "sellToLiquidityProvider(address,address,address,address,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "sellToLiquidityProvider"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "sellToLiquidityProvider",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "sellToLiquidityProvider",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityProviderSwap(address,address,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityProviderSwap"): EventFragment;
}

export interface LiquidityProviderSwapEventObject {
  inputToken: string;
  outputToken: string;
  inputTokenAmount: BigNumber;
  outputTokenAmount: BigNumber;
  provider: string;
  recipient: string;
}
export type LiquidityProviderSwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string],
  LiquidityProviderSwapEventObject
>;

export type LiquidityProviderSwapEventFilter =
  TypedEventFilter<LiquidityProviderSwapEvent>;

export interface ILiquidityProviderFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityProviderFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    sellToLiquidityProvider(
      inputToken: string,
      outputToken: string,
      provider: string,
      recipient: string,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  sellToLiquidityProvider(
    inputToken: string,
    outputToken: string,
    provider: string,
    recipient: string,
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    auxiliaryData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    sellToLiquidityProvider(
      inputToken: string,
      outputToken: string,
      provider: string,
      recipient: string,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LiquidityProviderSwap(address,address,uint256,uint256,address,address)"(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      provider?: null,
      recipient?: null
    ): LiquidityProviderSwapEventFilter;
    LiquidityProviderSwap(
      inputToken?: null,
      outputToken?: null,
      inputTokenAmount?: null,
      outputTokenAmount?: null,
      provider?: null,
      recipient?: null
    ): LiquidityProviderSwapEventFilter;
  };

  estimateGas: {
    sellToLiquidityProvider(
      inputToken: string,
      outputToken: string,
      provider: string,
      recipient: string,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    sellToLiquidityProvider(
      inputToken: string,
      outputToken: string,
      provider: string,
      recipient: string,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      auxiliaryData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
