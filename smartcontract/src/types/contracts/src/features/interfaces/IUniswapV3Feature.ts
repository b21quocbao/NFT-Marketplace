/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IUniswapV3FeatureInterface extends utils.Interface {
  functions: {
    "_sellHeldTokenForTokenToUniswapV3(bytes,uint256,uint256,address)": FunctionFragment;
    "sellEthForTokenToUniswapV3(bytes,uint256,address)": FunctionFragment;
    "sellTokenForEthToUniswapV3(bytes,uint256,uint256,address)": FunctionFragment;
    "sellTokenForTokenToUniswapV3(bytes,uint256,uint256,address)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_sellHeldTokenForTokenToUniswapV3"
      | "sellEthForTokenToUniswapV3"
      | "sellTokenForEthToUniswapV3"
      | "sellTokenForTokenToUniswapV3"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_sellHeldTokenForTokenToUniswapV3",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellEthForTokenToUniswapV3",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForEthToUniswapV3",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokenForTokenToUniswapV3",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_sellHeldTokenForTokenToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellEthForTokenToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForEthToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellTokenForTokenToUniswapV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUniswapV3Feature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapV3FeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _sellHeldTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellEthForTokenToUniswapV3(
      encodedPath: BytesLike,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForEthToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _sellHeldTokenForTokenToUniswapV3(
    encodedPath: BytesLike,
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellEthForTokenToUniswapV3(
    encodedPath: BytesLike,
    minBuyAmount: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForEthToUniswapV3(
    encodedPath: BytesLike,
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellTokenForTokenToUniswapV3(
    encodedPath: BytesLike,
    sellAmount: BigNumberish,
    minBuyAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _sellHeldTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellEthForTokenToUniswapV3(
      encodedPath: BytesLike,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForEthToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _sellHeldTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellEthForTokenToUniswapV3(
      encodedPath: BytesLike,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForEthToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _sellHeldTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellEthForTokenToUniswapV3(
      encodedPath: BytesLike,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForEthToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellTokenForTokenToUniswapV3(
      encodedPath: BytesLike,
      sellAmount: BigNumberish,
      minBuyAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
