/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, Signer, utils } from "ethers";

export interface INativeOrdersEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)": EventFragment;
    "OrderCancelled(bytes32,address)": EventFragment;
    "OrderSignerRegistered(address,address,bool)": EventFragment;
    "PairCancelledLimitOrders(address,address,address,uint256)": EventFragment;
    "PairCancelledRfqOrders(address,address,address,uint256)": EventFragment;
    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)": EventFragment;
    "RfqOrderOriginsAllowed(address,address[],bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LimitOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderSignerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledLimitOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCancelledRfqOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RfqOrderOriginsAllowed"): EventFragment;
}

export interface LimitOrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  feeRecipient: string;
  makerToken: string;
  takerToken: string;
  takerTokenFilledAmount: BigNumber;
  makerTokenFilledAmount: BigNumber;
  takerTokenFeeFilledAmount: BigNumber;
  protocolFeePaid: BigNumber;
  pool: string;
}
export type LimitOrderFilledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  LimitOrderFilledEventObject
>;

export type LimitOrderFilledEventFilter =
  TypedEventFilter<LimitOrderFilledEvent>;

export interface OrderCancelledEventObject {
  orderHash: string;
  maker: string;
}
export type OrderCancelledEvent = TypedEvent<
  [string, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderSignerRegisteredEventObject {
  maker: string;
  signer: string;
  allowed: boolean;
}
export type OrderSignerRegisteredEvent = TypedEvent<
  [string, string, boolean],
  OrderSignerRegisteredEventObject
>;

export type OrderSignerRegisteredEventFilter =
  TypedEventFilter<OrderSignerRegisteredEvent>;

export interface PairCancelledLimitOrdersEventObject {
  maker: string;
  makerToken: string;
  takerToken: string;
  minValidSalt: BigNumber;
}
export type PairCancelledLimitOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCancelledLimitOrdersEventObject
>;

export type PairCancelledLimitOrdersEventFilter =
  TypedEventFilter<PairCancelledLimitOrdersEvent>;

export interface PairCancelledRfqOrdersEventObject {
  maker: string;
  makerToken: string;
  takerToken: string;
  minValidSalt: BigNumber;
}
export type PairCancelledRfqOrdersEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCancelledRfqOrdersEventObject
>;

export type PairCancelledRfqOrdersEventFilter =
  TypedEventFilter<PairCancelledRfqOrdersEvent>;

export interface RfqOrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  makerToken: string;
  takerToken: string;
  takerTokenFilledAmount: BigNumber;
  makerTokenFilledAmount: BigNumber;
  pool: string;
}
export type RfqOrderFilledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber, string],
  RfqOrderFilledEventObject
>;

export type RfqOrderFilledEventFilter = TypedEventFilter<RfqOrderFilledEvent>;

export interface RfqOrderOriginsAllowedEventObject {
  origin: string;
  addrs: string[];
  allowed: boolean;
}
export type RfqOrderOriginsAllowedEvent = TypedEvent<
  [string, string[], boolean],
  RfqOrderOriginsAllowedEventObject
>;

export type RfqOrderOriginsAllowedEventFilter =
  TypedEventFilter<RfqOrderOriginsAllowedEvent>;

export interface INativeOrdersEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INativeOrdersEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LimitOrderFilled(bytes32,address,address,address,address,address,uint128,uint128,uint128,uint256,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;
    LimitOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      feeRecipient?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      takerTokenFeeFilledAmount?: null,
      protocolFeePaid?: null,
      pool?: null
    ): LimitOrderFilledEventFilter;

    "OrderCancelled(bytes32,address)"(
      orderHash?: null,
      maker?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(orderHash?: null, maker?: null): OrderCancelledEventFilter;

    "OrderSignerRegistered(address,address,bool)"(
      maker?: null,
      signer?: null,
      allowed?: null
    ): OrderSignerRegisteredEventFilter;
    OrderSignerRegistered(
      maker?: null,
      signer?: null,
      allowed?: null
    ): OrderSignerRegisteredEventFilter;

    "PairCancelledLimitOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;
    PairCancelledLimitOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledLimitOrdersEventFilter;

    "PairCancelledRfqOrders(address,address,address,uint256)"(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;
    PairCancelledRfqOrders(
      maker?: null,
      makerToken?: null,
      takerToken?: null,
      minValidSalt?: null
    ): PairCancelledRfqOrdersEventFilter;

    "RfqOrderFilled(bytes32,address,address,address,address,uint128,uint128,bytes32)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;
    RfqOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      takerTokenFilledAmount?: null,
      makerTokenFilledAmount?: null,
      pool?: null
    ): RfqOrderFilledEventFilter;

    "RfqOrderOriginsAllowed(address,address[],bool)"(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
    RfqOrderOriginsAllowed(
      origin?: null,
      addrs?: null,
      allowed?: null
    ): RfqOrderOriginsAllowedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
