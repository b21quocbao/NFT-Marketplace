/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace LibNativeOrder {
  export type OtcOrderStruct = {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumberish;
    takerAmount: BigNumberish;
    maker: string;
    taker: string;
    txOrigin: string;
    expiryAndNonce: BigNumberish;
  };

  export type OtcOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber
  ] & {
    makerToken: string;
    takerToken: string;
    makerAmount: BigNumber;
    takerAmount: BigNumber;
    maker: string;
    taker: string;
    txOrigin: string;
    expiryAndNonce: BigNumber;
  };

  export type OtcOrderInfoStruct = {
    orderHash: BytesLike;
    status: BigNumberish;
  };

  export type OtcOrderInfoStructOutput = [string, number] & {
    orderHash: string;
    status: number;
  };
}

export declare namespace LibSignature {
  export type SignatureStruct = {
    signatureType: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [number, number, string, string] & {
    signatureType: number;
    v: number;
    r: string;
    s: string;
  };
}

export interface IOtcOrdersFeatureInterface extends utils.Interface {
  functions: {
    "_fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128,address,bool,address)": FunctionFragment;
    "batchFillTakerSignedOtcOrders((address,address,uint128,uint128,address,address,address,uint256)[],(uint8,uint8,bytes32,bytes32)[],(uint8,uint8,bytes32,bytes32)[],bool[])": FunctionFragment;
    "fillOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),uint128)": FunctionFragment;
    "fillOtcOrderWithEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "fillTakerSignedOtcOrder((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "fillTakerSignedOtcOrderForEth((address,address,uint128,uint128,address,address,address,uint256),(uint8,uint8,bytes32,bytes32),(uint8,uint8,bytes32,bytes32))": FunctionFragment;
    "getOtcOrderHash((address,address,uint128,uint128,address,address,address,uint256))": FunctionFragment;
    "getOtcOrderInfo((address,address,uint128,uint128,address,address,address,uint256))": FunctionFragment;
    "lastOtcTxOriginNonce(address,uint64)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_fillOtcOrder"
      | "batchFillTakerSignedOtcOrders"
      | "fillOtcOrder"
      | "fillOtcOrderForEth"
      | "fillOtcOrderWithEth"
      | "fillTakerSignedOtcOrder"
      | "fillTakerSignedOtcOrderForEth"
      | "getOtcOrderHash"
      | "getOtcOrderInfo"
      | "lastOtcTxOriginNonce"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_fillOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish,
      string,
      boolean,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchFillTakerSignedOtcOrders",
    values: [
      LibNativeOrder.OtcOrderStruct[],
      LibSignature.SignatureStruct[],
      LibSignature.SignatureStruct[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrderForEth",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOtcOrderWithEth",
    values: [LibNativeOrder.OtcOrderStruct, LibSignature.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fillTakerSignedOtcOrder",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillTakerSignedOtcOrderForEth",
    values: [
      LibNativeOrder.OtcOrderStruct,
      LibSignature.SignatureStruct,
      LibSignature.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtcOrderHash",
    values: [LibNativeOrder.OtcOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOtcOrderInfo",
    values: [LibNativeOrder.OtcOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "lastOtcTxOriginNonce",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_fillOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchFillTakerSignedOtcOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrderForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOtcOrderWithEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillTakerSignedOtcOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillTakerSignedOtcOrderForEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtcOrderHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtcOrderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOtcTxOriginNonce",
    data: BytesLike
  ): Result;

  events: {
    "OtcOrderFilled(bytes32,address,address,address,address,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OtcOrderFilled"): EventFragment;
}

export interface OtcOrderFilledEventObject {
  orderHash: string;
  maker: string;
  taker: string;
  makerToken: string;
  takerToken: string;
  makerTokenFilledAmount: BigNumber;
  takerTokenFilledAmount: BigNumber;
}
export type OtcOrderFilledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber],
  OtcOrderFilledEventObject
>;

export type OtcOrderFilledEventFilter = TypedEventFilter<OtcOrderFilledEvent>;

export interface IOtcOrdersFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOtcOrdersFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchFillTakerSignedOtcOrders(
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOtcOrderWithEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillTakerSignedOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillTakerSignedOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOtcOrderHash(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    getOtcOrderInfo(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<
      [LibNativeOrder.OtcOrderInfoStructOutput] & {
        orderInfo: LibNativeOrder.OtcOrderInfoStructOutput;
      }
    >;

    lastOtcTxOriginNonce(
      txOrigin: string,
      nonceBucket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lastNonce: BigNumber }>;
  };

  _fillOtcOrder(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    taker: string,
    useSelfBalance: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchFillTakerSignedOtcOrders(
    orders: LibNativeOrder.OtcOrderStruct[],
    makerSignatures: LibSignature.SignatureStruct[],
    takerSignatures: LibSignature.SignatureStruct[],
    unwrapWeth: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOtcOrder(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOtcOrderForEth(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    takerTokenFillAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOtcOrderWithEth(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillTakerSignedOtcOrder(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    takerSignature: LibSignature.SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillTakerSignedOtcOrderForEth(
    order: LibNativeOrder.OtcOrderStruct,
    makerSignature: LibSignature.SignatureStruct,
    takerSignature: LibSignature.SignatureStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOtcOrderHash(
    order: LibNativeOrder.OtcOrderStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getOtcOrderInfo(
    order: LibNativeOrder.OtcOrderStruct,
    overrides?: CallOverrides
  ): Promise<LibNativeOrder.OtcOrderInfoStructOutput>;

  lastOtcTxOriginNonce(
    txOrigin: string,
    nonceBucket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    batchFillTakerSignedOtcOrders(
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillOtcOrderWithEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        takerTokenFilledAmount: BigNumber;
        makerTokenFilledAmount: BigNumber;
      }
    >;

    fillTakerSignedOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    fillTakerSignedOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getOtcOrderHash(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getOtcOrderInfo(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<LibNativeOrder.OtcOrderInfoStructOutput>;

    lastOtcTxOriginNonce(
      txOrigin: string,
      nonceBucket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OtcOrderFilled(bytes32,address,address,address,address,uint128,uint128)"(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      makerTokenFilledAmount?: null,
      takerTokenFilledAmount?: null
    ): OtcOrderFilledEventFilter;
    OtcOrderFilled(
      orderHash?: null,
      maker?: null,
      taker?: null,
      makerToken?: null,
      takerToken?: null,
      makerTokenFilledAmount?: null,
      takerTokenFilledAmount?: null
    ): OtcOrderFilledEventFilter;
  };

  estimateGas: {
    _fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchFillTakerSignedOtcOrders(
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOtcOrderWithEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillTakerSignedOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillTakerSignedOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOtcOrderHash(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOtcOrderInfo(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastOtcTxOriginNonce(
      txOrigin: string,
      nonceBucket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      taker: string,
      useSelfBalance: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchFillTakerSignedOtcOrders(
      orders: LibNativeOrder.OtcOrderStruct[],
      makerSignatures: LibSignature.SignatureStruct[],
      takerSignatures: LibSignature.SignatureStruct[],
      unwrapWeth: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerTokenFillAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOtcOrderWithEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillTakerSignedOtcOrder(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillTakerSignedOtcOrderForEth(
      order: LibNativeOrder.OtcOrderStruct,
      makerSignature: LibSignature.SignatureStruct,
      takerSignature: LibSignature.SignatureStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOtcOrderHash(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOtcOrderInfo(
      order: LibNativeOrder.OtcOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastOtcTxOriginNonce(
      txOrigin: string,
      nonceBucket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
