/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ITokenSpenderFeatureInterface extends utils.Interface {
  functions: {
    "_spendERC20Tokens(address,address,address,uint256)": FunctionFragment;
    "getAllowanceTarget()": FunctionFragment;
    "getSpendableERC20BalanceOf(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_spendERC20Tokens"
      | "getAllowanceTarget"
      | "getSpendableERC20BalanceOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_spendERC20Tokens",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowanceTarget",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpendableERC20BalanceOf",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_spendERC20Tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowanceTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpendableERC20BalanceOf",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITokenSpenderFeature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenSpenderFeatureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _spendERC20Tokens(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowanceTarget(
      overrides?: CallOverrides
    ): Promise<[string] & { target: string }>;

    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  _spendERC20Tokens(
    token: string,
    owner: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowanceTarget(overrides?: CallOverrides): Promise<string>;

  getSpendableERC20BalanceOf(
    token: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _spendERC20Tokens(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllowanceTarget(overrides?: CallOverrides): Promise<string>;

    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _spendERC20Tokens(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowanceTarget(overrides?: CallOverrides): Promise<BigNumber>;

    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _spendERC20Tokens(
      token: string,
      owner: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowanceTarget(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpendableERC20BalanceOf(
      token: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
