/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ERC20Token,
  ERC20TokenInterface,
} from "../../../contracts/Erc20Token.sol/ERC20Token";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200200c3803806200200c833981810160405281019062000037919062000432565b8282816003908051906020019062000051929190620002f9565b5080600490805190602001906200006a929190620002f9565b5050506200008d62000081620000a860201b60201c565b620000b060201b60201c565b6200009f33826200017660201b60201c565b5050506200078b565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620001e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e090620004f2565b60405180910390fd5b620001fd60008383620002ef60201b60201c565b8060026000828254620002119190620005a1565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002689190620005a1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002cf919062000514565b60405180910390a3620002eb60008383620002f460201b60201c565b5050565b505050565b505050565b82805462000307906200063e565b90600052602060002090601f0160209004810192826200032b576000855562000377565b82601f106200034657805160ff191683800117855562000377565b8280016001018555821562000377579182015b828111156200037657825182559160200191906001019062000359565b5b5090506200038691906200038a565b5090565b5b80821115620003a55760008160009055506001016200038b565b5090565b6000620003c0620003ba846200055a565b62000531565b905082815260208101848484011115620003d957600080fd5b620003e684828562000608565b509392505050565b600082601f8301126200040057600080fd5b815162000412848260208601620003a9565b91505092915050565b6000815190506200042c8162000771565b92915050565b6000806000606084860312156200044857600080fd5b600084015167ffffffffffffffff8111156200046357600080fd5b6200047186828701620003ee565b935050602084015167ffffffffffffffff8111156200048f57600080fd5b6200049d86828701620003ee565b9250506040620004b0868287016200041b565b9150509250925092565b6000620004c9601f8362000590565b9150620004d68262000748565b602082019050919050565b620004ec81620005fe565b82525050565b600060208201905081810360008301526200050d81620004ba565b9050919050565b60006020820190506200052b6000830184620004e1565b92915050565b60006200053d62000550565b90506200054b828262000674565b919050565b6000604051905090565b600067ffffffffffffffff82111562000578576200057762000708565b5b620005838262000737565b9050602081019050919050565b600082825260208201905092915050565b6000620005ae82620005fe565b9150620005bb83620005fe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620005f357620005f2620006aa565b5b828201905092915050565b6000819050919050565b60005b83811015620006285780820151818401526020810190506200060b565b8381111562000638576000848401525b50505050565b600060028204905060018216806200065757607f821691505b602082108114156200066e576200066d620006d9565b5b50919050565b6200067f8262000737565b810181811067ffffffffffffffff82111715620006a157620006a062000708565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6200077c81620005fe565b81146200078857600080fd5b50565b611871806200079b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d714610276578063a9059cbb146102a6578063dd62ed3e146102d6578063f2fde38b14610306576100f5565b806370a0823114610200578063715018a6146102305780638da5cb5b1461023a57806395d89b4114610258576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806340c10f19146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610322565b60405161010f9190611236565b60405180910390f35b610132600480360381019061012d9190610ff1565b6103b4565b60405161013f919061121b565b60405180910390f35b6101506103d7565b60405161015d9190611398565b60405180910390f35b610180600480360381019061017b9190610fa2565b6103e1565b60405161018d919061121b565b60405180910390f35b61019e610410565b6040516101ab91906113b3565b60405180910390f35b6101ce60048036038101906101c99190610ff1565b610419565b6040516101db919061121b565b60405180910390f35b6101fe60048036038101906101f99190610ff1565b610450565b005b61021a60048036038101906102159190610f3d565b61045e565b6040516102279190611398565b60405180910390f35b6102386104a6565b005b61024261052e565b60405161024f9190611200565b60405180910390f35b610260610558565b60405161026d9190611236565b60405180910390f35b610290600480360381019061028b9190610ff1565b6105ea565b60405161029d919061121b565b60405180910390f35b6102c060048036038101906102bb9190610ff1565b610661565b6040516102cd919061121b565b60405180910390f35b6102f060048036038101906102eb9190610f66565b610684565b6040516102fd9190611398565b60405180910390f35b610320600480360381019061031b9190610f3d565b61070b565b005b606060038054610331906114c8565b80601f016020809104026020016040519081016040528092919081815260200182805461035d906114c8565b80156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b5050505050905090565b6000806103bf610803565b90506103cc81858561080b565b600191505092915050565b6000600254905090565b6000806103ec610803565b90506103f98582856109d6565b610404858585610a62565b60019150509392505050565b60006012905090565b600080610424610803565b90506104458185856104368589610684565b61044091906113ea565b61080b565b600191505092915050565b61045a8282610ce3565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104ae610803565b73ffffffffffffffffffffffffffffffffffffffff166104cc61052e565b73ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610519906112f8565b60405180910390fd5b61052c6000610e43565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610567906114c8565b80601f0160208091040260200160405190810160405280929190818152602001828054610593906114c8565b80156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b5050505050905090565b6000806105f5610803565b905060006106038286610684565b905083811015610648576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063f90611358565b60405180910390fd5b610655828686840361080b565b60019250505092915050565b60008061066c610803565b9050610679818585610a62565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610713610803565b73ffffffffffffffffffffffffffffffffffffffff1661073161052e565b73ffffffffffffffffffffffffffffffffffffffff1614610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e906112f8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ee90611278565b60405180910390fd5b61080081610e43565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561087b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087290611338565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290611298565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109c99190611398565b60405180910390a3505050565b60006109e28484610684565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a5c5781811015610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a45906112b8565b60405180910390fd5b610a5b848484840361080b565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990611318565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3990611258565b60405180910390fd5b610b4d838383610f09565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610bd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bca906112d8565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c6691906113ea565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cca9190611398565b60405180910390a3610cdd848484610f0e565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90611378565b60405180910390fd5b610d5f60008383610f09565b8060026000828254610d7191906113ea565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dc691906113ea565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610e2b9190611398565b60405180910390a3610e3f60008383610f0e565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081359050610f228161180d565b92915050565b600081359050610f3781611824565b92915050565b600060208284031215610f4f57600080fd5b6000610f5d84828501610f13565b91505092915050565b60008060408385031215610f7957600080fd5b6000610f8785828601610f13565b9250506020610f9885828601610f13565b9150509250929050565b600080600060608486031215610fb757600080fd5b6000610fc586828701610f13565b9350506020610fd686828701610f13565b9250506040610fe786828701610f28565b9150509250925092565b6000806040838503121561100457600080fd5b600061101285828601610f13565b925050602061102385828601610f28565b9150509250929050565b61103681611440565b82525050565b61104581611452565b82525050565b6000611056826113ce565b61106081856113d9565b9350611070818560208601611495565b61107981611558565b840191505092915050565b60006110916023836113d9565b915061109c82611569565b604082019050919050565b60006110b46026836113d9565b91506110bf826115b8565b604082019050919050565b60006110d76022836113d9565b91506110e282611607565b604082019050919050565b60006110fa601d836113d9565b915061110582611656565b602082019050919050565b600061111d6026836113d9565b91506111288261167f565b604082019050919050565b60006111406020836113d9565b915061114b826116ce565b602082019050919050565b60006111636025836113d9565b915061116e826116f7565b604082019050919050565b60006111866024836113d9565b915061119182611746565b604082019050919050565b60006111a96025836113d9565b91506111b482611795565b604082019050919050565b60006111cc601f836113d9565b91506111d7826117e4565b602082019050919050565b6111eb8161147e565b82525050565b6111fa81611488565b82525050565b6000602082019050611215600083018461102d565b92915050565b6000602082019050611230600083018461103c565b92915050565b60006020820190508181036000830152611250818461104b565b905092915050565b6000602082019050818103600083015261127181611084565b9050919050565b60006020820190508181036000830152611291816110a7565b9050919050565b600060208201905081810360008301526112b1816110ca565b9050919050565b600060208201905081810360008301526112d1816110ed565b9050919050565b600060208201905081810360008301526112f181611110565b9050919050565b6000602082019050818103600083015261131181611133565b9050919050565b6000602082019050818103600083015261133181611156565b9050919050565b6000602082019050818103600083015261135181611179565b9050919050565b600060208201905081810360008301526113718161119c565b9050919050565b60006020820190508181036000830152611391816111bf565b9050919050565b60006020820190506113ad60008301846111e2565b92915050565b60006020820190506113c860008301846111f1565b92915050565b600081519050919050565b600082825260208201905092915050565b60006113f58261147e565b91506114008361147e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611435576114346114fa565b5b828201905092915050565b600061144b8261145e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156114b3578082015181840152602081019050611498565b838111156114c2576000848401525b50505050565b600060028204905060018216806114e057607f821691505b602082108114156114f4576114f3611529565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61181681611440565b811461182157600080fd5b50565b61182d8161147e565b811461183857600080fd5b5056fea264697066735822122089acbb504ce4e4bdb93cb0ab59485c91c87d9b6eea4d1124e9d23f178ec0fa3064736f6c63430008010033";

type ERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Token__factory extends ContractFactory {
  constructor(...args: ERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Token> {
    return super.deploy(
      name,
      symbol,
      initialSupply,
      overrides || {}
    ) as Promise<ERC20Token>;
  }
  override getDeployTransaction(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): ERC20Token {
    return super.attach(address) as ERC20Token;
  }
  override connect(signer: Signer): ERC20Token__factory {
    return super.connect(signer) as ERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TokenInterface {
    return new utils.Interface(_abi) as ERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Token {
    return new Contract(address, _abi, signerOrProvider) as ERC20Token;
  }
}
