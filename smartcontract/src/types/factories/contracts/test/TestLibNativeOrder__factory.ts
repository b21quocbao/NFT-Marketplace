/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestLibNativeOrder,
  TestLibNativeOrderInterface,
} from "../../../contracts/test/TestLibNativeOrder";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderStructHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderStructHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061089a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063548279151461003b578063ad54a5981461006b575b600080fd5b610055600480360381019061005091906106a7565b61009b565b604051610062919061070a565b60405180910390f35b61008560048036038101906100809190610653565b6100bd565b604051610092919061070a565b60405180910390f35b60006100b6828036038101906100b191906106d1565b6100df565b9050919050565b60006100d8828036038101906100d3919061067d565b610216565b9050919050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b60008135905061039c816107da565b92915050565b6000813590506103b1816107f1565b92915050565b6000813590506103c681610808565b92915050565b600061018082840312156103df57600080fd5b81905092915050565b600061018082840312156103fb57600080fd5b610406610180610725565b90506000610416848285016103b7565b600083015250602061042a848285016103b7565b602083015250604061043e84828501610614565b604083015250606061045284828501610614565b606083015250608061046684828501610614565b60808301525060a061047a8482850161038d565b60a08301525060c061048e8482850161038d565b60c08301525060e06104a28482850161038d565b60e0830152506101006104b78482850161038d565b610100830152506101206104cd848285016103a2565b610120830152506101406104e38482850161063e565b610140830152506101606104f984828501610629565b6101608301525092915050565b6000610140828403121561051957600080fd5b81905092915050565b6000610140828403121561053557600080fd5b610540610140610725565b90506000610550848285016103b7565b6000830152506020610564848285016103b7565b602083015250604061057884828501610614565b604083015250606061058c84828501610614565b60608301525060806105a08482850161038d565b60808301525060a06105b48482850161038d565b60a08301525060c06105c88482850161038d565b60c08301525060e06105dc848285016103a2565b60e0830152506101006105f18482850161063e565b6101008301525061012061060784828501610629565b6101208301525092915050565b6000813590506106238161081f565b92915050565b60008135905061063881610836565b92915050565b60008135905061064d8161084d565b92915050565b6000610180828403121561066657600080fd5b6000610674848285016103cc565b91505092915050565b6000610180828403121561069057600080fd5b600061069e848285016103e8565b91505092915050565b600061014082840312156106ba57600080fd5b60006106c884828501610506565b91505092915050565b600061014082840312156106e457600080fd5b60006106f284828501610522565b91505092915050565b61070481610764565b82525050565b600060208201905061071f60008301846106fb565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561074857600080fd5b8060405250919050565b600061075d8261079c565b9050919050565b6000819050919050565b600061077982610752565b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6107e381610752565b81146107ee57600080fd5b50565b6107fa81610764565b811461080557600080fd5b50565b6108118161076e565b811461081c57600080fd5b50565b61082881610780565b811461083357600080fd5b50565b61083f816107bc565b811461084a57600080fd5b50565b610856816107c6565b811461086157600080fd5b5056fea26469706673582212201e0a4eb58ee5ebb158e76ce99dae1db1cdeb4dd60385aaab06e0d5c3ceeee2a464736f6c634300060c0033";

type TestLibNativeOrderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibNativeOrderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibNativeOrder__factory extends ContractFactory {
  constructor(...args: TestLibNativeOrderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLibNativeOrder> {
    return super.deploy(overrides || {}) as Promise<TestLibNativeOrder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLibNativeOrder {
    return super.attach(address) as TestLibNativeOrder;
  }
  override connect(signer: Signer): TestLibNativeOrder__factory {
    return super.connect(signer) as TestLibNativeOrder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibNativeOrderInterface {
    return new utils.Interface(_abi) as TestLibNativeOrderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibNativeOrder {
    return new Contract(address, _abi, signerOrProvider) as TestLibNativeOrder;
  }
}
