/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestInitialMigration,
  TestInitialMigrationInterface,
} from "../../../contracts/test/TestInitialMigration";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "deployer",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract SimpleFunctionRegistryFeature",
            name: "registry",
            type: "address",
          },
          {
            internalType: "contract OwnableFeature",
            name: "ownable",
            type: "address",
          },
        ],
        internalType: "struct InitialMigration.BootstrapFeatures",
        name: "features",
        type: "tuple",
      },
    ],
    name: "bootstrap",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "bootstrapFeature",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ZeroEx",
        name: "zeroEx",
        type: "address",
      },
    ],
    name: "callBootstrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "ethRecipient",
        type: "address",
      },
    ],
    name: "die",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dieRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeCaller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "owner",
        type: "address",
      },
      {
        internalType: "contract ZeroEx",
        name: "zeroEx",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract SimpleFunctionRegistryFeature",
            name: "registry",
            type: "address",
          },
          {
            internalType: "contract OwnableFeature",
            name: "ownable",
            type: "address",
          },
        ],
        internalType: "struct InitialMigration.BootstrapFeatures",
        name: "features",
        type: "tuple",
      },
    ],
    name: "initializeZeroEx",
    outputs: [
      {
        internalType: "contract ZeroEx",
        name: "_zeroEx",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051620011b1380380620011b1833981810160405281019061003491906100bf565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250503073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050610131565b6000815190506100b98161011a565b92915050565b6000602082840312156100d157600080fd5b60006100df848285016100aa565b91505092915050565b60006100f3826100fa565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610123816100e8565b811461012e57600080fd5b50565b60805160601c60a05160601c6110566200015b6000395080610314528061038452506110566000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063824912801161005b57806382491280146100ec5780639b7e25a91461010a578063a23ce6ce14610128578063c9353cb5146101585761007d565b806308cf79341461008257806329f5120d146100b25780635f136a4a146100ce575b600080fd5b61009c60048036038101906100979190610ab0565b610174565b6040516100a99190610d26565b60405180910390f35b6100cc60048036038101906100c79190610b15565b610257565b005b6100d6610312565b6040516100e39190610c97565b60405180910390f35b6100f4610336565b6040516101019190610c97565b60405180910390f35b61011261035a565b60405161011f9190610c97565b60405180910390f35b610142600480360381019061013d9190610a61565b610380565b60405161014f9190610d6a565b60405180910390f35b610172600480360381019061016d9190610a38565b610569565b005b600061018083836105ad565b90503073ffffffffffffffffffffffffffffffffffffffff1663972fdd266373f208d560e01b6040518263ffffffff1660e01b81526004016101c29190610d26565b60206040518083038186803b1580156101da57600080fd5b505afa1580156101ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102129190610a0f565b6000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555092915050565b8073ffffffffffffffffffffffffffffffffffffffff166373f208d530600067ffffffffffffffff8111801561028c57600080fd5b506040519080825280601f01601f1916602001820160405280156102bf5781602001600182028036833780820191505090505b506040518363ffffffff1660e01b81526004016102dd929190610cf6565b600060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610410576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040790610d85565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166373f208d5306308cf793460e01b8786604051602401610448929190610ccd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b81526004016104c2929190610cf6565b600060405180830381600087803b1580156104dc57600080fd5b505af11580156104f0573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff1663c9353cb5856040518263ffffffff1660e01b815260040161052d9190610cb2565b600060405180830381600087803b15801561054757600080fd5b505af115801561055b573d6000803e3d6000fd5b505050508290509392505050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000610627826000015163fb969b0a60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061078f565b61069f826020015163fb969b0a60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061078f565b3073ffffffffffffffffffffffffffffffffffffffff16639db64a40630ee8be1b60e01b60006040518363ffffffff1660e01b81526004016106e2929190610d41565b600060405180830381600087803b1580156106fc57600080fd5b505af1158015610710573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b846040518263ffffffff1660e01b815260040161074d9190610c97565b600060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b5050505063d150751b60e01b905092915050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516107b89190610c80565b600060405180830381855af49150503d80600081146107f3576040519150601f19603f3d011682016040523d82523d6000602084013e6107f8565b606091505b509150915081158061080c57506020815114155b8061086f575063d150751b60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905181019061084d9190610aec565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561088757610886610881858361088d565b610928565b5b50505050565b60607fd19d65df6830e3cb0da1e12b8e9738e2dc473f830d8af813bcc031eb5a1675d183836040516024016108c3929190610cf6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b60008135905061093f81610f96565b92915050565b60008151905061095481610f96565b92915050565b60008135905061096981610fad565b92915050565b60008151905061097e81610fc4565b92915050565b60008135905061099381610fdb565b92915050565b6000813590506109a881610ff2565b92915050565b6000813590506109bd81611009565b92915050565b6000604082840312156109d557600080fd5b6109df6040610da5565b905060006109ef84828501610999565b6000830152506020610a0384828501610984565b60208301525092915050565b600060208284031215610a2157600080fd5b6000610a2f84828501610945565b91505092915050565b600060208284031215610a4a57600080fd5b6000610a588482850161095a565b91505092915050565b600080600060808486031215610a7657600080fd5b6000610a848682870161095a565b9350506020610a95868287016109ae565b9250506040610aa6868287016109c3565b9150509250925092565b60008060608385031215610ac357600080fd5b6000610ad185828601610930565b9250506020610ae2858286016109c3565b9150509250929050565b600060208284031215610afe57600080fd5b6000610b0c8482850161096f565b91505092915050565b600060208284031215610b2757600080fd5b6000610b35848285016109ae565b91505092915050565b610b4781610eb0565b82525050565b610b5681610e1c565b82525050565b610b6581610e0a565b82525050565b610b7481610e2e565b82525050565b6000610b8582610dd2565b610b8f8185610ddd565b9350610b9f818560208601610f52565b610ba881610f85565b840191505092915050565b6000610bbe82610dd2565b610bc88185610dee565b9350610bd8818560208601610f52565b80840191505092915050565b610bed81610ec2565b82525050565b610bfc81610ee6565b82525050565b610c0b81610f0a565b82525050565b6000610c1e601f83610df9565b91507f496e697469616c4d6967726174696f6e2f494e56414c49445f53454e444552006000830152602082019050919050565b604082016000820151610c676000850182610bf3565b506020820151610c7a6020850182610be4565b50505050565b6000610c8c8284610bb3565b915081905092915050565b6000602082019050610cac6000830184610b5c565b92915050565b6000602082019050610cc76000830184610b4d565b92915050565b6000606082019050610ce26000830185610b4d565b610cef6020830184610c51565b9392505050565b6000604082019050610d0b6000830185610b5c565b8181036020830152610d1d8184610b7a565b90509392505050565b6000602082019050610d3b6000830184610b6b565b92915050565b6000604082019050610d566000830185610b6b565b610d636020830184610b3e565b9392505050565b6000602082019050610d7f6000830184610c02565b92915050565b60006020820190508181036000830152610d9e81610c11565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715610dc857600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610e1582610e90565b9050919050565b6000610e2782610e90565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000610e6582610e0a565b9050919050565b6000610e7782610e0a565b9050919050565b6000610e8982610e1c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ebb82610f2e565b9050919050565b6000610ecd82610ed4565b9050919050565b6000610edf82610e90565b9050919050565b6000610ef182610ef8565b9050919050565b6000610f0382610e90565b9050919050565b6000610f1582610f1c565b9050919050565b6000610f2782610e90565b9050919050565b6000610f3982610f40565b9050919050565b6000610f4b82610e90565b9050919050565b60005b83811015610f70578082015181840152602081019050610f55565b83811115610f7f576000848401525b50505050565b6000601f19601f8301169050919050565b610f9f81610e0a565b8114610faa57600080fd5b50565b610fb681610e1c565b8114610fc157600080fd5b50565b610fcd81610e2e565b8114610fd857600080fd5b50565b610fe481610e5a565b8114610fef57600080fd5b50565b610ffb81610e6c565b811461100657600080fd5b50565b61101281610e7e565b811461101d57600080fd5b5056fea2646970667358221220c3434ad11b2d1dbb52cb50fb1592a448f5c4095a2370c9c9a3af4f33609afd3a64736f6c634300060c0033";

type TestInitialMigrationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestInitialMigrationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestInitialMigration__factory extends ContractFactory {
  constructor(...args: TestInitialMigrationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestInitialMigration> {
    return super.deploy(
      deployer,
      overrides || {}
    ) as Promise<TestInitialMigration>;
  }
  override getDeployTransaction(
    deployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(deployer, overrides || {});
  }
  override attach(address: string): TestInitialMigration {
    return super.attach(address) as TestInitialMigration;
  }
  override connect(signer: Signer): TestInitialMigration__factory {
    return super.connect(signer) as TestInitialMigration__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInitialMigrationInterface {
    return new utils.Interface(_abi) as TestInitialMigrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestInitialMigration {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestInitialMigration;
  }
}
