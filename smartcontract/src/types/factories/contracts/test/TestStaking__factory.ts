/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestStaking,
  TestStakingInterface,
} from "../../../contracts/test/TestStaking";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEtherTokenV06",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "balanceForPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "joinStakingPoolAsMaker",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "makerAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "payerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payProtocolFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "poolForMaker",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161065638038061065683398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610108565b60008151905061007e816100f1565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100d1565b9050919050565b60006100ca826100ad565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b60805160601c6105316101256000398061013552506105316000f3fe60806040526004361061003f5760003560e01c80632cc7d62614610044578063307aa86a14610081578063a3b4a327146100be578063b3e33379146100da575b600080fd5b34801561005057600080fd5b5061006b6004803603810190610066919061038a565b610103565b6040516100789190610432565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a391906102e9565b61011b565b6040516100b59190610417565b60405180910390f35b6100d860048036038101906100d39190610312565b610133565b005b3480156100e657600080fd5b5061010160048036038101906100fc919061038a565b61024f565b005b60016020528060005260406000206000915090505481565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401610190939291906103e0565b602060405180830381600087803b1580156101aa57600080fd5b505af11580156101be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190610361565b6101eb57600080fd5b80600160008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815260200190815260200160002060008282540192505081905550505050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b6000813590506102a48161049f565b92915050565b6000815190506102b9816104b6565b92915050565b6000813590506102ce816104cd565b92915050565b6000813590506102e3816104e4565b92915050565b6000602082840312156102fb57600080fd5b600061030984828501610295565b91505092915050565b60008060006060848603121561032757600080fd5b600061033586828701610295565b935050602061034686828701610295565b9250506040610357868287016102d4565b9150509250925092565b60006020828403121561037357600080fd5b6000610381848285016102aa565b91505092915050565b60006020828403121561039c57600080fd5b60006103aa848285016102bf565b91505092915050565b6103bc8161044d565b82525050565b6103cb8161046b565b82525050565b6103da81610495565b82525050565b60006060820190506103f560008301866103b3565b61040260208301856103b3565b61040f60408301846103d1565b949350505050565b600060208201905061042c60008301846103c2565b92915050565b600060208201905061044760008301846103d1565b92915050565b600061045882610475565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6104a88161044d565b81146104b357600080fd5b50565b6104bf8161045f565b81146104ca57600080fd5b50565b6104d68161046b565b81146104e157600080fd5b50565b6104ed81610495565b81146104f857600080fd5b5056fea2646970667358221220bcac0c3f7421a05a2c4d987bcf0f412e2a07971b632f6c07a3c7e7a85549619364736f6c634300060c0033";

type TestStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStaking__factory extends ContractFactory {
  constructor(...args: TestStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestStaking> {
    return super.deploy(_weth, overrides || {}) as Promise<TestStaking>;
  }
  override getDeployTransaction(
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  override attach(address: string): TestStaking {
    return super.attach(address) as TestStaking;
  }
  override connect(signer: Signer): TestStaking__factory {
    return super.connect(signer) as TestStaking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStakingInterface {
    return new utils.Interface(_abi) as TestStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestStaking {
    return new Contract(address, _abi, signerOrProvider) as TestStaking;
  }
}
