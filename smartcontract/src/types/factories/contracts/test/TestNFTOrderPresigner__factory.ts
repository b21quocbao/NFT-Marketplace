/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestNFTOrderPresigner,
  TestNFTOrderPresignerInterface,
} from "../../../contracts/test/TestNFTOrderPresigner";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IZeroEx",
        name: "_zeroEx",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC1155Token",
        name: "token",
        type: "address",
      },
    ],
    name: "approveERC1155",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "token",
        type: "address",
      },
    ],
    name: "approveERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721Token",
        name: "token",
        type: "address",
      },
    ],
    name: "approveERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderNonce",
        type: "uint256",
      },
    ],
    name: "cancelERC1155Order",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orderNonce",
        type: "uint256",
      },
    ],
    name: "cancelERC721Order",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum LibNFTOrder.TradeDirection",
            name: "direction",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "erc20Token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "erc20TokenAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "feeData",
                type: "bytes",
              },
            ],
            internalType: "struct LibNFTOrder.Fee[]",
            name: "fees",
            type: "tuple[]",
          },
          {
            internalType: "contract IERC1155Token",
            name: "erc1155Token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "erc1155TokenId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "contract IPropertyValidator",
                name: "propertyValidator",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "propertyData",
                type: "bytes",
              },
            ],
            internalType: "struct LibNFTOrder.Property[]",
            name: "erc1155TokenProperties",
            type: "tuple[]",
          },
          {
            internalType: "uint128",
            name: "erc1155TokenAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNFTOrder.ERC1155Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "preSignERC1155Order",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "enum LibNFTOrder.TradeDirection",
            name: "direction",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "erc20Token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "erc20TokenAmount",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "feeData",
                type: "bytes",
              },
            ],
            internalType: "struct LibNFTOrder.Fee[]",
            name: "fees",
            type: "tuple[]",
          },
          {
            internalType: "contract IERC721Token",
            name: "erc721Token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "erc721TokenId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "contract IPropertyValidator",
                name: "propertyValidator",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "propertyData",
                type: "bytes",
              },
            ],
            internalType: "struct LibNFTOrder.Property[]",
            name: "erc721TokenProperties",
            type: "tuple[]",
          },
        ],
        internalType: "struct LibNFTOrder.ERC721Order",
        name: "order",
        type: "tuple",
      },
    ],
    name: "preSignERC721Order",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620015c3380380620015c383398181016040528101906200003791906200008c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200011a565b600081519050620000868162000100565b92915050565b6000602082840312156200009f57600080fd5b6000620000af8482850162000075565b91505092915050565b6000620000c582620000e0565b9050919050565b6000620000d982620000b8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010b81620000cc565b81146200011757600080fd5b50565b60805160601c61146d6200015660003980610183528061022d52806102fe52806103735280610401528061048f5280610539525061146d6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637b757d971161005b5780637b757d97146100fd578063be167b9d14610119578063c6b72a1f14610135578063f23a6e611461015157610088565b806306d2596b1461008d57806311e8701c146100a957806346195c12146100c5578063462103af146100e1575b600080fd5b6100a760048036038101906100a291906108b9565b610181565b005b6100c360048036038101906100be91906107e5565b61020f565b005b6100df60048036038101906100da919061080e565b6102e0565b005b6100fb60048036038101906100f69190610878565b610371565b005b61011760048036038101906101129190610837565b6103ff565b005b610133600480360381019061012e91906108b9565b61048d565b005b61014f600480360381019061014a91906107bc565b61051b565b005b61016b60048036038101906101669190610701565b6105ac565b6040516101789190610e9f565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306d2596b826040518263ffffffff1660e01b81526004016101da9190610efe565b600060405180830381600087803b1580156101f457600080fd5b505af1158015610208573d6000803e3d6000fd5b5050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040161028a929190610e76565b602060405180830381600087803b1580156102a457600080fd5b505af11580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610793565b5050565b8073ffffffffffffffffffffffffffffffffffffffff1663a22cb4657f000000000000000000000000000000000000000000000000000000000000000060016040518363ffffffff1660e01b815260040161033c929190610e4d565b600060405180830381600087803b15801561035657600080fd5b505af115801561036a573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663462103af826040518263ffffffff1660e01b81526004016103ca9190610edc565b600060405180830381600087803b1580156103e457600080fd5b505af11580156103f8573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637b757d97826040518263ffffffff1660e01b81526004016104589190610eba565b600060405180830381600087803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663be167b9d826040518263ffffffff1660e01b81526004016104e69190610efe565b600060405180830381600087803b15801561050057600080fd5b505af1158015610514573d6000803e3d6000fd5b5050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663a22cb4657f000000000000000000000000000000000000000000000000000000000000000060016040518363ffffffff1660e01b8152600401610577929190610e4d565b600060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b5050505050565b600063f23a6e6160e01b90509695505050505050565b6000813590506105d18161136f565b92915050565b6000815190506105e681611386565b92915050565b60008083601f8401126105fe57600080fd5b8235905067ffffffffffffffff81111561061757600080fd5b60208301915083600182028301111561062f57600080fd5b9250929050565b6000813590506106458161139d565b92915050565b60008135905061065a816113b4565b92915050565b60008135905061066f816113cb565b92915050565b600081359050610684816113e2565b92915050565b600081359050610699816113f9565b92915050565b600061018082840312156106b257600080fd5b81905092915050565b600061016082840312156106ce57600080fd5b81905092915050565b6000813590506106e681611409565b92915050565b6000813590506106fb81611420565b92915050565b60008060008060008060a0878903121561071a57600080fd5b600061072889828a016105c2565b965050602061073989828a016105c2565b955050604061074a89828a016106ec565b945050606061075b89828a016106ec565b935050608087013567ffffffffffffffff81111561077857600080fd5b61078489828a016105ec565b92509250509295509295509295565b6000602082840312156107a557600080fd5b60006107b3848285016105d7565b91505092915050565b6000602082840312156107ce57600080fd5b60006107dc84828501610636565b91505092915050565b6000602082840312156107f757600080fd5b60006108058482850161064b565b91505092915050565b60006020828403121561082057600080fd5b600061082e84828501610660565b91505092915050565b60006020828403121561084957600080fd5b600082013567ffffffffffffffff81111561086357600080fd5b61086f8482850161069f565b91505092915050565b60006020828403121561088a57600080fd5b600082013567ffffffffffffffff8111156108a457600080fd5b6108b0848285016106bb565b91505092915050565b6000602082840312156108cb57600080fd5b60006108d9848285016106ec565b91505092915050565b60006108ee8383610d67565b905092915050565b60006109028383610dd1565b905092915050565b6109138161126a565b82525050565b6109228161117f565b82525050565b60006109348385610f47565b93508360208402850161094684610f19565b8060005b8781101561098a5784840389526109618284611109565b61096b85826108e2565b945061097683610f2d565b925060208a0199505060018101905061094a565b50829750879450505050509392505050565b60006109a88385610f58565b9350836020840285016109ba84610f23565b8060005b878110156109fe5784840389526109d5828461112d565b6109df85826108f6565b94506109ea83610f3a565b925060208a019950506001810190506109be565b50829750879450505050509392505050565b610a1981611191565b82525050565b610a288161119d565b82525050565b6000610a3a8385610f69565b9350610a47838584611342565b610a5083611351565b840190509392505050565b610a648161127c565b82525050565b610a73816112a0565b82525050565b610a82816112c4565b82525050565b610a91816112e8565b82525050565b610aa08161130c565b82525050565b60006101808301610aba60008401846110f2565b610ac76000860182610a97565b50610ad56020840184610f7a565b610ae26020860182610919565b50610af06040840184610f7a565b610afd6040860182610919565b50610b0b6060840184611168565b610b186060860182610e2f565b50610b266080840184611168565b610b336080860182610e2f565b50610b4160a08401846110ad565b610b4e60a0860182610a6a565b50610b5c60c0840184611168565b610b6960c0860182610e2f565b50610b7760e0840184610f91565b85830360e0870152610b8a838284610928565b92505050610b9c610100840184611096565b610baa610100860182610a5b565b50610bb9610120840184611168565b610bc7610120860182610e2f565b50610bd6610140840184610fe8565b858303610140870152610bea83828461099c565b92505050610bfc610160840184611151565b610c0a610160860182610e20565b508091505092915050565b60006101608301610c2960008401846110f2565b610c366000860182610a97565b50610c446020840184610f7a565b610c516020860182610919565b50610c5f6040840184610f7a565b610c6c6040860182610919565b50610c7a6060840184611168565b610c876060860182610e2f565b50610c956080840184611168565b610ca26080860182610e2f565b50610cb060a08401846110ad565b610cbd60a0860182610a6a565b50610ccb60c0840184611168565b610cd860c0860182610e2f565b50610ce660e0840184610f91565b85830360e0870152610cf9838284610928565b92505050610d0b6101008401846110c4565b610d19610100860182610a79565b50610d28610120840184611168565b610d36610120860182610e2f565b50610d45610140840184610fe8565b858303610140870152610d5983828461099c565b925050508091505092915050565b600060608301610d7a6000840184610f7a565b610d876000860182610919565b50610d956020840184611168565b610da26020860182610e2f565b50610db0604084018461103f565b8583036040870152610dc3838284610a2e565b925050508091505092915050565b600060408301610de460008401846110db565b610df16000860182610a88565b50610dff602084018461103f565b8583036020870152610e12838284610a2e565b925050508091505092915050565b610e2981611224565b82525050565b610e3881611260565b82525050565b610e4781611260565b82525050565b6000604082019050610e62600083018561090a565b610e6f6020830184610a10565b9392505050565b6000604082019050610e8b600083018561090a565b610e986020830184610e3e565b9392505050565b6000602082019050610eb46000830184610a1f565b92915050565b60006020820190508181036000830152610ed48184610aa6565b905092915050565b60006020820190508181036000830152610ef68184610c15565b905092915050565b6000602082019050610f136000830184610e3e565b92915050565b6000819050919050565b6000819050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610f8960208401846105c2565b905092915050565b60008083356001602003843603038112610faa57600080fd5b83810192508235915060208301925067ffffffffffffffff821115610fce57600080fd5b602082023603841315610fe057600080fd5b509250929050565b6000808335600160200384360303811261100157600080fd5b83810192508235915060208301925067ffffffffffffffff82111561102557600080fd5b60208202360384131561103757600080fd5b509250929050565b6000808335600160200384360303811261105857600080fd5b83810192508235915060208301925067ffffffffffffffff82111561107c57600080fd5b60018202360384131561108e57600080fd5b509250929050565b60006110a56020840184610636565b905092915050565b60006110bc602084018461064b565b905092915050565b60006110d36020840184610660565b905092915050565b60006110ea6020840184610675565b905092915050565b6000611101602084018461068a565b905092915050565b60008235600160600383360303811261112157600080fd5b82810191505092915050565b60008235600160400383360303811261114557600080fd5b82810191505092915050565b600061116060208401846106d7565b905092915050565b600061117760208401846106ec565b905092915050565b600061118a82611240565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006111d48261117f565b9050919050565b60006111e68261117f565b9050919050565b60006111f88261117f565b9050919050565b600061120a8261117f565b9050919050565b600081905061121f82611362565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112758261131e565b9050919050565b60006112878261128e565b9050919050565b600061129982611240565b9050919050565b60006112ab826112b2565b9050919050565b60006112bd82611240565b9050919050565b60006112cf826112d6565b9050919050565b60006112e182611240565b9050919050565b60006112f3826112fa565b9050919050565b600061130582611240565b9050919050565b600061131782611211565b9050919050565b600061132982611330565b9050919050565b600061133b82611240565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6002811061136c57fe5b50565b6113788161117f565b811461138357600080fd5b50565b61138f81611191565b811461139a57600080fd5b50565b6113a6816111c9565b81146113b157600080fd5b50565b6113bd816111db565b81146113c857600080fd5b50565b6113d4816111ed565b81146113df57600080fd5b50565b6113eb816111ff565b81146113f657600080fd5b50565b6002811061140657600080fd5b50565b61141281611224565b811461141d57600080fd5b50565b61142981611260565b811461143457600080fd5b5056fea2646970667358221220ebdc1f4ab34092107480881e27d31adfedd6d395ce1f3f16f35717b27be3a5bb64736f6c634300060c0033";

type TestNFTOrderPresignerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestNFTOrderPresignerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestNFTOrderPresigner__factory extends ContractFactory {
  constructor(...args: TestNFTOrderPresignerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _zeroEx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestNFTOrderPresigner> {
    return super.deploy(
      _zeroEx,
      overrides || {}
    ) as Promise<TestNFTOrderPresigner>;
  }
  override getDeployTransaction(
    _zeroEx: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_zeroEx, overrides || {});
  }
  override attach(address: string): TestNFTOrderPresigner {
    return super.attach(address) as TestNFTOrderPresigner;
  }
  override connect(signer: Signer): TestNFTOrderPresigner__factory {
    return super.connect(signer) as TestNFTOrderPresigner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestNFTOrderPresignerInterface {
    return new utils.Interface(_abi) as TestNFTOrderPresignerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestNFTOrderPresigner {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestNFTOrderPresigner;
  }
}
