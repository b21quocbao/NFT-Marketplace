/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestTransformerDeployerTransformer,
  TestTransformerDeployerTransformerInterface,
} from "../../../contracts/test/TestTransformerDeployerTransformer";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CONSTRUCTOR_FAIL_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "ethRecipient",
        type: "address",
      },
    ],
    name: "die",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "nonce",
        type: "uint32",
      },
    ],
    name: "isDeployedByDeployer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050610d05341415610080576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610077906100eb565b60405180910390fd5b61011c565b600061009260338361010b565b91507f546573745472616e73666f726d65724465706c6f7965725472616e73666f726d60008301527f65722f434f4e5354525543544f525f4641494c000000000000000000000000006020830152604082019050919050565b6000602082019050818103600083015261010481610085565b9050919050565b600082825260208201905092915050565b60805160601c610cb76101426000398060fd528061014252806101e95250610cb76000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80637c9bc5e214610051578063905e1d411461006f578063c9353cb51461009f578063d5f39488146100bb575b600080fd5b6100596100d9565b6040516100669190610b0d565b60405180910390f35b61008960048036038101906100849190610952565b6100df565b6040516100969190610ad2565b60405180910390f35b6100b960048036038101906100b49190610929565b610140565b005b6100c36101e7565b6040516100d09190610ab7565b60405180910390f35b610d0581565b60003073ffffffffffffffffffffffffffffffffffffffff166101227f00000000000000000000000000000000000000000000000000000000000000008461020b565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c590610aed565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b600060606102188361025e565b9050805160d50160f81b609460f81b858360405160200161023c9493929190610a6d565b6040516020818303038152906040528051906020012060001c91505092915050565b606060008263ffffffff16141561030357600167ffffffffffffffff8111801561028757600080fd5b506040519080825280601f01601f1916602001820160405280156102ba5781602001600182028036833780820191505090505b509050608060f81b816000815181106102cf57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108fa565b60808263ffffffff1610156103a557600167ffffffffffffffff8111801561032a57600080fd5b506040519080825280601f01601f19166020018201604052801561035d5781602001600182028036833780820191505090505b5090508160f81b8160008151811061037157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108f9565b60ff8263ffffffff161161048757600267ffffffffffffffff811180156103cb57600080fd5b506040519080825280601f01601f1916602001820160405280156103fe5781602001600182028036833780820191505090505b509050608160f81b8160008151811061041357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b8160018151811061045357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108f8565b61ffff8263ffffffff16116105b857600367ffffffffffffffff811180156104ae57600080fd5b506040519080825280601f01601f1916602001820160405280156104e15781602001600182028036833780820191505090505b509050608260f81b816000815181106104f657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600861ff00831663ffffffff16901c60f81b8160018151811061054457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b8160028151811061058457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108f7565b62ffffff8263ffffffff161161073957600467ffffffffffffffff811180156105e057600080fd5b506040519080825280601f01601f1916602001820160405280156106135781602001600182028036833780820191505090505b509050608360f81b8160008151811061062857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601062ff0000831663ffffffff16901c60f81b8160018151811061067757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600861ff00831663ffffffff16901c60f81b816002815181106106c557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b8160038151811061070557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506108f6565b600567ffffffffffffffff8111801561075157600080fd5b506040519080825280601f01601f1916602001820160405280156107845781602001600182028036833780820191505090505b509050608460f81b8160008151811061079957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601863ff000000831663ffffffff16901c60f81b816001815181106107e957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601062ff0000831663ffffffff16901c60f81b8160028151811061083857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600861ff00831663ffffffff16901c60f81b8160038151811061088657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508160f81b816004815181106108c657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b5b5b5b5b919050565b60008135905061090e81610c53565b92915050565b60008135905061092381610c6a565b92915050565b60006020828403121561093b57600080fd5b6000610949848285016108ff565b91505092915050565b60006020828403121561096457600080fd5b600061097284828501610914565b91505092915050565b61098481610b61565b82525050565b61099b61099682610b4f565b610c18565b82525050565b6109aa81610b73565b82525050565b6109c16109bc82610b7f565b610c2a565b82525050565b60006109d282610b28565b6109dc8185610b33565b93506109ec818560208601610be5565b80840191505092915050565b6000610a05603083610b3e565b91507f546573745472616e73666f726d65724465706c6f7965725472616e73666f726d60008301527f65722f4f4e4c595f4445504c4f594552000000000000000000000000000000006020830152604082019050919050565b610a6781610bcb565b82525050565b6000610a7982876109b0565b600182019150610a8982866109b0565b600182019150610a99828561098a565b601482019150610aa982846109c7565b915081905095945050505050565b6000602082019050610acc600083018461097b565b92915050565b6000602082019050610ae760008301846109a1565b92915050565b60006020820190508181036000830152610b06816109f8565b9050919050565b6000602082019050610b226000830184610a5e565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610b5a82610bab565b9050919050565b6000610b6c82610bab565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60005b83811015610c03578082015181840152602081019050610be8565b83811115610c12576000848401525b50505050565b6000610c2382610c34565b9050919050565b6000819050919050565b6000610c3f82610c46565b9050919050565b60008160601b9050919050565b610c5c81610b61565b8114610c6757600080fd5b50565b610c7381610bd5565b8114610c7e57600080fd5b5056fea2646970667358221220e61d642476fd63a3e787f77aa757a0d5b2e5ecb6245e9e97e1e7de5e3c7b82b864736f6c634300060c0033";

type TestTransformerDeployerTransformerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTransformerDeployerTransformerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTransformerDeployerTransformer__factory extends ContractFactory {
  constructor(...args: TestTransformerDeployerTransformerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<TestTransformerDeployerTransformer> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestTransformerDeployerTransformer>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTransformerDeployerTransformer {
    return super.attach(address) as TestTransformerDeployerTransformer;
  }
  override connect(
    signer: Signer
  ): TestTransformerDeployerTransformer__factory {
    return super.connect(signer) as TestTransformerDeployerTransformer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTransformerDeployerTransformerInterface {
    return new utils.Interface(
      _abi
    ) as TestTransformerDeployerTransformerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTransformerDeployerTransformer {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestTransformerDeployerTransformer;
  }
}
