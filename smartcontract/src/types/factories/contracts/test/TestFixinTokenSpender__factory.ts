/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestFixinTokenSpender,
  TestFixinTokenSpenderInterface,
} from "../../../contracts/test/TestFixinTokenSpender";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FallbackCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "getSpendableERC20BalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferERC20TokensFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610603806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063496f471e1461003b578063f5ce2c991461006b575b600080fd5b6100556004803603810190610050919061035e565b610087565b604051610062919061050e565b60405180910390f35b6100856004803603810190610080919061039a565b61009b565b005b600061009383836100ad565b905092915050565b6100a7848484846101d3565b50505050565b60006101cb8373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016100ed9291906104c5565b60206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d91906103fd565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161017691906104aa565b60206040518083038186803b15801561018e57600080fd5b505afa1580156101a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c691906103fd565b6102f1565b905092915050565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610239906104ee565b60405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d600183511460208210151681151782169150816102e857806000843e8083fd5b50505050505050565b60008183106103005781610302565b825b905092915050565b60008135905061031981610588565b92915050565b60008135905061032e8161059f565b92915050565b600081359050610343816105b6565b92915050565b600081519050610358816105b6565b92915050565b6000806040838503121561037157600080fd5b600061037f8582860161031f565b92505060206103908582860161030a565b9150509250929050565b600080600080608085870312156103b057600080fd5b60006103be8782880161031f565b94505060206103cf8782880161030a565b93505060406103e08782880161030a565b92505060606103f187828801610334565b91505092959194509250565b60006020828403121561040f57600080fd5b600061041d84828501610349565b91505092915050565b61042f8161053a565b82525050565b6000610442602483610529565b91507f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60008301527f53454c46000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6104a48161057e565b82525050565b60006020820190506104bf6000830184610426565b92915050565b60006040820190506104da6000830185610426565b6104e76020830184610426565b9392505050565b6000602082019050818103600083015261050781610435565b9050919050565b6000602082019050610523600083018461049b565b92915050565b600082825260208201905092915050565b60006105458261055e565b9050919050565b60006105578261053a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6105918161053a565b811461059c57600080fd5b50565b6105a88161054c565b81146105b357600080fd5b50565b6105bf8161057e565b81146105ca57600080fd5b5056fea2646970667358221220a5cad29e2ada7c869b55dc351ae8f0578d843954dc684159270c065616544ebe64736f6c634300060c0033";

type TestFixinTokenSpenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestFixinTokenSpenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestFixinTokenSpender__factory extends ContractFactory {
  constructor(...args: TestFixinTokenSpenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFixinTokenSpender> {
    return super.deploy(overrides || {}) as Promise<TestFixinTokenSpender>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestFixinTokenSpender {
    return super.attach(address) as TestFixinTokenSpender;
  }
  override connect(signer: Signer): TestFixinTokenSpender__factory {
    return super.connect(signer) as TestFixinTokenSpender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFixinTokenSpenderInterface {
    return new utils.Interface(_abi) as TestFixinTokenSpenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFixinTokenSpender {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestFixinTokenSpender;
  }
}
