/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestMintableERC1155Token,
  TestMintableERC1155TokenInterface,
} from "../../../../../contracts/test/tokens/TestMintableERC1155Token.sol/TestMintableERC1155Token";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    inputs: [],
    name: "ERC1155_BATCH_RECEIVED",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ERC1155_RECEIVED",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances_",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "isApproved",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e3c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c8063a22cb46511610066578063a22cb4651461012f578063e0a5c9491461014b578063e985e9c514610169578063f242432a14610199578063fc67bf1c146101b557610092565b8062fdd58e14610097578063156e29f6146100c75780632eb2c2d6146100e35780634e1273f4146100ff575b600080fd5b6100b160048036038101906100ac9190611576565b6101d3565b6040516100be9190611c0f565b60405180910390f35b6100e160048036038101906100dc91906115b2565b61022d565b005b6100fd60048036038101906100f891906113dc565b610494565b005b61011960048036038101906101149190611601565b6109c8565b6040516101269190611ae0565b60405180910390f35b6101496004803603810190610144919061153a565b610b20565b005b610153610c1d565b6040516101609190611b1d565b60405180910390f35b610183600480360381019061017e91906113a0565b610c28565b6040516101909190611b02565b60405180910390f35b6101b360048036038101906101ae91906114a8565b610cbc565b005b6101bd611154565b6040516101ca9190611b1d565b60405180910390f35b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61028f60008084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261115f90919063ffffffff16565b60008084815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610359929190611c2a565b60405180910390a46000833b9050600081111561048e5760008473ffffffffffffffffffffffffffffffffffffffff1663f23a6e61333387876040518563ffffffff1660e01b81526004016103b19493929190611983565b602060405180830381600087803b1580156103cb57600080fd5b505af11580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190611676565b905063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461048c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048390611bef565b60405180910390fd5b505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90611b6f565b60405180910390fd5b83839050868690501461054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390611b8f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161480610613575060011515600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b610652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064990611baf565b60405180910390fd5b60005b8686905081101561080557600087878381811061066e57fe5b905060200201359050600086868481811061068557fe5b9050602002013590506106f08160008085815260200190815260200160002060008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118e90919063ffffffff16565b60008084815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107a58160008085815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461115f90919063ffffffff16565b60008084815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050806001019050610655565b508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040516108809493929190611aa5565b60405180910390a46000873b905060008111156109bd5760008873ffffffffffffffffffffffffffffffffffffffff1663bc197c81338c8b8b8b8b8b8b6040518963ffffffff1660e01b81526004016108e09897969594939291906119db565b602060405180830381600087803b1580156108fa57600080fd5b505af115801561090e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109329190611676565b905063bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b290611bef565b60405180910390fd5b505b505050505050505050565b6060828290508585905014610a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0990611bcf565b60405180910390fd5b8484905067ffffffffffffffff81118015610a2c57600080fd5b50604051908082528060200260200182016040528015610a5b5781602001602082028036833780820191505090505b50905060005b85859050811015610b17576000848483818110610a7a57fe5b9050602002013590506000808281526020019081526020016000206000888885818110610aa357fe5b9050602002016020810190610ab89190611377565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054838381518110610aff57fe5b60200260200101818152505050806001019050610a61565b50949350505050565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610c119190611b02565b60405180910390a35050565b63f23a6e6160e01b81565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610d2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2390611b6f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480610df3575060011515600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515145b610e32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2990611baf565b60405180910390fd5b610e948360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461118e90919063ffffffff16565b60008086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f498360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461115f90919063ffffffff16565b60008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611012929190611c2a565b60405180910390a46000853b9050600081111561114b5760008673ffffffffffffffffffffffffffffffffffffffff1663f23a6e61338a898989896040518763ffffffff1660e01b815260040161106e96959493929190611a49565b602060405180830381600087803b15801561108857600080fd5b505af115801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190611676565b905063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611149576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114090611bef565b60405180910390fd5b505b50505050505050565b63bc197c8160e01b81565b6000808284019050838110156111845761118361117e600086866111b8565b61123d565b5b8091505092915050565b6000828211156111ad576111ac6111a7600285856111b8565b61123d565b5b818303905092915050565b606063e946c1bb60e01b8484846040516024016111d793929190611b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b60008135905061125481611daa565b92915050565b60008083601f84011261126c57600080fd5b8235905067ffffffffffffffff81111561128557600080fd5b60208301915083602082028301111561129d57600080fd5b9250929050565b60008083601f8401126112b657600080fd5b8235905067ffffffffffffffff8111156112cf57600080fd5b6020830191508360208202830111156112e757600080fd5b9250929050565b6000813590506112fd81611dc1565b92915050565b60008151905061131281611dd8565b92915050565b60008083601f84011261132a57600080fd5b8235905067ffffffffffffffff81111561134357600080fd5b60208301915083600182028301111561135b57600080fd5b9250929050565b60008135905061137181611def565b92915050565b60006020828403121561138957600080fd5b600061139784828501611245565b91505092915050565b600080604083850312156113b357600080fd5b60006113c185828601611245565b92505060206113d285828601611245565b9150509250929050565b60008060008060008060008060a0898b0312156113f857600080fd5b60006114068b828c01611245565b98505060206114178b828c01611245565b975050604089013567ffffffffffffffff81111561143457600080fd5b6114408b828c016112a4565b9650965050606089013567ffffffffffffffff81111561145f57600080fd5b61146b8b828c016112a4565b9450945050608089013567ffffffffffffffff81111561148a57600080fd5b6114968b828c01611318565b92509250509295985092959890939650565b60008060008060008060a087890312156114c157600080fd5b60006114cf89828a01611245565b96505060206114e089828a01611245565b95505060406114f189828a01611362565b945050606061150289828a01611362565b935050608087013567ffffffffffffffff81111561151f57600080fd5b61152b89828a01611318565b92509250509295509295509295565b6000806040838503121561154d57600080fd5b600061155b85828601611245565b925050602061156c858286016112ee565b9150509250929050565b6000806040838503121561158957600080fd5b600061159785828601611245565b92505060206115a885828601611362565b9150509250929050565b6000806000606084860312156115c757600080fd5b60006115d586828701611245565b93505060206115e686828701611362565b92505060406115f786828701611362565b9150509250925092565b6000806000806040858703121561161757600080fd5b600085013567ffffffffffffffff81111561163157600080fd5b61163d8782880161125a565b9450945050602085013567ffffffffffffffff81111561165c57600080fd5b611668878288016112a4565b925092505092959194509250565b60006020828403121561168857600080fd5b600061169684828501611303565b91505092915050565b60006116ab8383611965565b60208301905092915050565b6116c081611d35565b82525050565b6116cf81611cae565b82525050565b60006116e18385611c7b565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561171057600080fd5b602083029250611721838584611d7d565b82840190509392505050565b600061173882611c63565b6117428185611c7b565b935061174d83611c53565b8060005b8381101561177e578151611765888261169f565b975061177083611c6e565b925050600181019050611751565b5085935050505092915050565b61179481611cc0565b82525050565b6117a381611ccc565b82525050565b60006117b58385611c8c565b93506117c2838584611d7d565b6117cb83611d8c565b840190509392505050565b6117df81611d47565b82525050565b60006117f2601f83611c9d565b91507f43414e4e4f545f5452414e534645525f544f5f414444524553535f5a45524f006000830152602082019050919050565b6000611832602083611c9d565b91507f544f4b454e5f414e445f56414c5545535f4c454e4754485f4d49534d415443486000830152602082019050919050565b6000611872601683611c9d565b91507f494e53554646494349454e545f414c4c4f57414e4345000000000000000000006000830152602082019050919050565b60006118b2602483611c9d565b91507f4f574e4552535f414e445f4944535f4d5553545f484156455f53414d455f4c4560008301527f4e475448000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611918600083611c8c565b9150600082019050919050565b6000611932601983611c9d565b91507f4241445f52454345495645525f52455455524e5f56414c5545000000000000006000830152602082019050919050565b61196e81611d2b565b82525050565b61197d81611d2b565b82525050565b600060a08201905061199860008301876116b7565b6119a560208301866116b7565b6119b26040830185611974565b6119bf6060830184611974565b81810360808301526119d08161190b565b905095945050505050565b600060a0820190506119f0600083018b6116b7565b6119fd602083018a6116c6565b8181036040830152611a1081888a6116d5565b90508181036060830152611a258186886116d5565b90508181036080830152611a3a8184866117a9565b90509998505050505050505050565b600060a082019050611a5e60008301896116b7565b611a6b60208301886116c6565b611a786040830187611974565b611a856060830186611974565b8181036080830152611a988184866117a9565b9050979650505050505050565b60006040820190508181036000830152611ac08186886116d5565b90508181036020830152611ad58184866116d5565b905095945050505050565b60006020820190508181036000830152611afa818461172d565b905092915050565b6000602082019050611b17600083018461178b565b92915050565b6000602082019050611b32600083018461179a565b92915050565b6000606082019050611b4d60008301866117d6565b611b5a6020830185611974565b611b676040830184611974565b949350505050565b60006020820190508181036000830152611b88816117e5565b9050919050565b60006020820190508181036000830152611ba881611825565b9050919050565b60006020820190508181036000830152611bc881611865565b9050919050565b60006020820190508181036000830152611be8816118a5565b9050919050565b60006020820190508181036000830152611c0881611925565b9050919050565b6000602082019050611c246000830184611974565b92915050565b6000604082019050611c3f6000830185611974565b611c4c6020830184611974565b9392505050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611cb982611d0b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050611d0682611d9d565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d4082611d59565b9050919050565b6000611d5282611cf8565b9050919050565b6000611d6482611d6b565b9050919050565b6000611d7682611d0b565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60048110611da757fe5b50565b611db381611cae565b8114611dbe57600080fd5b50565b611dca81611cc0565b8114611dd557600080fd5b50565b611de181611ccc565b8114611dec57600080fd5b50565b611df881611d2b565b8114611e0357600080fd5b5056fea26469706673582212201b5e8fabbcc10d2fd1b6e7aa70524bb76674fbb3a773f4c0646a37f91e4098e264736f6c634300060c0033";

type TestMintableERC1155TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMintableERC1155TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMintableERC1155Token__factory extends ContractFactory {
  constructor(...args: TestMintableERC1155TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMintableERC1155Token> {
    return super.deploy(overrides || {}) as Promise<TestMintableERC1155Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMintableERC1155Token {
    return super.attach(address) as TestMintableERC1155Token;
  }
  override connect(signer: Signer): TestMintableERC1155Token__factory {
    return super.connect(signer) as TestMintableERC1155Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMintableERC1155TokenInterface {
    return new utils.Interface(_abi) as TestMintableERC1155TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMintableERC1155Token {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestMintableERC1155Token;
  }
}
