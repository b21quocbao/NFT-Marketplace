/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestTokenSpenderERC20Token,
  TestTokenSpenderERC20TokenInterface,
} from "../../../../contracts/test/tokens/TestTokenSpenderERC20Token";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TransferFromCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveAs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "getSpendableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setBalanceAndAllowanceOf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isGreedy",
        type: "bool",
      },
    ],
    name: "setGreedyRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d18806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633a73bf27116100715780633a73bf271461018a57806340c10f19146101a657806370a08231146101c25780639dc29fac146101f2578063a9059cbb1461020e578063dd62ed3e1461023e576100a9565b8063095ea7b3146100ae578063111c4724146100de5780631decf1621461010e57806323b872dd1461012a5780632724ed4b1461015a575b600080fd5b6100c860048036038101906100c39190610983565b61026e565b6040516100d59190610b98565b60405180910390f35b6100f860048036038101906100f39190610934565b6102fb565b6040516101059190610b98565b60405180910390f35b61012860048036038101906101239190610a22565b610389565b005b610144600480360381019061013f9190610934565b6103a6565b6040516101519190610b98565b60405180910390f35b610174600480360381019061016f91906108f8565b6104c6565b6040516101819190610bf3565b60405180910390f35b6101a4600480360381019061019f91906109bf565b610653565b005b6101c060048036038101906101bb9190610983565b61071d565b005b6101dc60048036038101906101d791906108cf565b61076d565b6040516101e99190610bf3565b60405180910390f35b61020c60048036038101906102079190610983565b610785565b005b61022860048036038101906102239190610983565b610856565b6040516102359190610b98565b60405180910390f35b610258600480360381019061025391906108f8565b61086b565b6040516102659190610bf3565b60405180910390f35b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b80600260006101000a81548160ff02191690831515021790555050565b60007ff50c935f8b94f9688106353b0b0d3e83df3859504445a159e212dfbf936aa433338585856040516103dd9493929190610b53565b60405180910390a16105398214156103f457600080f35b61053a82141561040757600090506104bf565b61053b82141561046357600260009054906101000a900460ff161561042857fe5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610bd3565b60405180910390fd5b61053c82141561048d57600260009054906101000a900460ff161561048457fe5b600090506104bf565b61053d82148061049e575061053e82145b156104ba57600061053d83149050806000528260205260406000f35b600190505b9392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061060b57600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461064b565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020545b905092915050565b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b60006020528060005260406000206000915090505481565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fd90610bb3565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505050565b60006108633384846103a6565b905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008135905061089f81610c9d565b92915050565b6000813590506108b481610cb4565b92915050565b6000813590506108c981610ccb565b92915050565b6000602082840312156108e157600080fd5b60006108ef84828501610890565b91505092915050565b6000806040838503121561090b57600080fd5b600061091985828601610890565b925050602061092a85828601610890565b9150509250929050565b60008060006060848603121561094957600080fd5b600061095786828701610890565b935050602061096886828701610890565b9250506040610979868287016108ba565b9150509250925092565b6000806040838503121561099657600080fd5b60006109a485828601610890565b92505060206109b5858286016108ba565b9150509250929050565b600080600080608085870312156109d557600080fd5b60006109e387828801610890565b94505060206109f4878288016108ba565b9350506040610a0587828801610890565b9250506060610a16878288016108ba565b91505092959194509250565b600060208284031215610a3457600080fd5b6000610a42848285016108a5565b91505092915050565b610a5481610c67565b82525050565b610a6381610c1f565b82525050565b610a7281610c31565b82525050565b6000610a85602983610c0e565b91507f546573744d696e7461626c654552433230546f6b656e2f494e5355464649434960008301527f454e545f46554e445300000000000000000000000000000000000000000000006020830152604082019050919050565b6000610aeb602183610c0e565b91507f54657374546f6b656e5370656e6465724552433230546f6b656e2f526576657260008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b610b4d81610c5d565b82525050565b6000608082019050610b686000830187610a4b565b610b756020830186610a5a565b610b826040830185610a5a565b610b8f6060830184610b44565b95945050505050565b6000602082019050610bad6000830184610a69565b92915050565b60006020820190508181036000830152610bcc81610a78565b9050919050565b60006020820190508181036000830152610bec81610ade565b9050919050565b6000602082019050610c086000830184610b44565b92915050565b600082825260208201905092915050565b6000610c2a82610c3d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c7282610c79565b9050919050565b6000610c8482610c8b565b9050919050565b6000610c9682610c3d565b9050919050565b610ca681610c1f565b8114610cb157600080fd5b50565b610cbd81610c31565b8114610cc857600080fd5b50565b610cd481610c5d565b8114610cdf57600080fd5b5056fea26469706673582212206899278a88c3628ea900127b14cc643763c68173b688d8a18515893c49c5fb8964736f6c634300060c0033";

type TestTokenSpenderERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenSpenderERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTokenSpenderERC20Token__factory extends ContractFactory {
  constructor(...args: TestTokenSpenderERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTokenSpenderERC20Token> {
    return super.deploy(overrides || {}) as Promise<TestTokenSpenderERC20Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTokenSpenderERC20Token {
    return super.attach(address) as TestTokenSpenderERC20Token;
  }
  override connect(signer: Signer): TestTokenSpenderERC20Token__factory {
    return super.connect(signer) as TestTokenSpenderERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenSpenderERC20TokenInterface {
    return new utils.Interface(_abi) as TestTokenSpenderERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTokenSpenderERC20Token {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestTokenSpenderERC20Token;
  }
}
