/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestMintableERC20Token,
  TestMintableERC20TokenInterface,
} from "../../../../contracts/test/tokens/TestMintableERC20Token";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveAs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "getSpendableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ca6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806340c10f191161006657806340c10f191461015857806370a08231146101745780639dc29fac146101a4578063a9059cbb146101c0578063dd62ed3e146101f057610093565b8063095ea7b314610098578063111c4724146100c857806323b872dd146100f85780632724ed4b14610128575b600080fd5b6100b260048036038101906100ad91906109f9565b610220565b6040516100bf9190610b73565b60405180910390f35b6100e260048036038101906100dd91906109aa565b6102ad565b6040516100ef9190610b73565b60405180910390f35b610112600480360381019061010d91906109aa565b61033b565b60405161011f9190610b73565b60405180910390f35b610142600480360381019061013d919061096e565b61061b565b60405161014f9190610bce565b60405180910390f35b610172600480360381019061016d91906109f9565b6107a8565b005b61018e60048036038101906101899190610945565b6107f8565b60405161019b9190610bce565b60405180910390f35b6101be60048036038101906101b991906109f9565b610810565b005b6101da60048036038101906101d591906109f9565b6108e1565b6040516101e79190610b73565b60405180910390f35b61020a6004803603810190610205919061096e565b6108f6565b6040516102179190610bce565b60405180910390f35b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001905092915050565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190509392505050565b60003373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146104ba5781600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690610bae565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561053b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053290610b8e565b60405180910390fd5b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f308585856040516106089493929190610b2e565b60405180910390a1600190509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061076057600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107a0565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020545b905092915050565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b60006020528060005260406000206000915090505481565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890610b8e565b60405180910390fd5b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505050565b60006108ee33848461033b565b905092915050565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008135905061092a81610c42565b92915050565b60008135905061093f81610c59565b92915050565b60006020828403121561095757600080fd5b60006109658482850161091b565b91505092915050565b6000806040838503121561098157600080fd5b600061098f8582860161091b565b92505060206109a08582860161091b565b9150509250929050565b6000806000606084860312156109bf57600080fd5b60006109cd8682870161091b565b93505060206109de8682870161091b565b92505060406109ef86828701610930565b9150509250925092565b60008060408385031215610a0c57600080fd5b6000610a1a8582860161091b565b9250506020610a2b85828601610930565b9150509250929050565b610a3e81610bfa565b82525050565b610a4d81610c0c565b82525050565b6000610a60602983610be9565b91507f546573744d696e7461626c654552433230546f6b656e2f494e5355464649434960008301527f454e545f46554e445300000000000000000000000000000000000000000000006020830152604082019050919050565b6000610ac6602d83610be9565b91507f546573744d696e7461626c654552433230546f6b656e2f494e5355464649434960008301527f454e545f414c4c4f57414e4345000000000000000000000000000000000000006020830152604082019050919050565b610b2881610c38565b82525050565b6000608082019050610b436000830187610a35565b610b506020830186610a35565b610b5d6040830185610a35565b610b6a6060830184610b1f565b95945050505050565b6000602082019050610b886000830184610a44565b92915050565b60006020820190508181036000830152610ba781610a53565b9050919050565b60006020820190508181036000830152610bc781610ab9565b9050919050565b6000602082019050610be36000830184610b1f565b92915050565b600082825260208201905092915050565b6000610c0582610c18565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b610c4b81610bfa565b8114610c5657600080fd5b50565b610c6281610c38565b8114610c6d57600080fd5b5056fea26469706673582212203934854bb83f6511cbe9a01cbbc69b37f0979a154679292a0d9ad03b381bd75464736f6c634300060c0033";

type TestMintableERC20TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMintableERC20TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMintableERC20Token__factory extends ContractFactory {
  constructor(...args: TestMintableERC20TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMintableERC20Token> {
    return super.deploy(overrides || {}) as Promise<TestMintableERC20Token>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMintableERC20Token {
    return super.attach(address) as TestMintableERC20Token;
  }
  override connect(signer: Signer): TestMintableERC20Token__factory {
    return super.connect(signer) as TestMintableERC20Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMintableERC20TokenInterface {
    return new utils.Interface(_abi) as TestMintableERC20TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMintableERC20Token {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestMintableERC20Token;
  }
}
