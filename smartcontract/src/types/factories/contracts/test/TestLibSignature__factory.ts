/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestLibSignature,
  TestLibSignatureInterface,
} from "../../../contracts/test/TestLibSignature";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getSignerOfHash",
    outputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106fa806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a8309be514610030575b600080fd5b61004a600480360381019061004591906104b4565b610060565b6040516100579190610555565b60405180910390f35b600061007c838380360381019061007791906104f0565b610084565b905092915050565b60006100908383610218565b6002600481111561009d57fe5b826000015160048111156100ad57fe5b141561011557600183836020015184604001518560600151604051600081526020016040526040516100e29493929190610570565b6020604051602081039080840390855afa158015610104573d6000803e3d6000fd5b5050506020604051035190506101c9565b6003600481111561012257fe5b8260000151600481111561013257fe5b14156101c85760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c6000209050600181846020015185604001518660600151604051600081526020016040526040516101989493929190610570565b6020604051602081039080840390855afa1580156101ba573d6000803e3d6000fd5b505050602060405103519150505b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102125761021161020c600585610343565b6103de565b5b92915050565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816040015160001c1015806102825750600160027ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418161027557fe5b0401816060015160001c10155b1561029b5761029a610295600584610343565b6103de565b5b600060048111156102a857fe5b816000015160048111156102b857fe5b14156102d2576102d16102cc600384610343565b6103de565b5b600160048111156102df57fe5b816000015160048111156102ef57fe5b141561030957610308610303600084610343565b6103de565b5b60048081111561031557fe5b8160000151600481111561032557fe5b141561033f5761033e610339600284610343565b6103de565b5b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd83836040516024016103799291906105b5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b6000813590506103f581610686565b92915050565b60008135905061040a8161069d565b92915050565b60006080828403121561042257600080fd5b81905092915050565b60006080828403121561043d57600080fd5b61044760806105de565b90506000610457848285016103fb565b600083015250602061046b8482850161049f565b602083015250604061047f848285016103e6565b6040830152506060610493848285016103e6565b60608301525092915050565b6000813590506104ae816106ad565b92915050565b60008060a083850312156104c757600080fd5b60006104d5858286016103e6565b92505060206104e685828601610410565b9150509250929050565b60006080828403121561050257600080fd5b60006105108482850161042b565b91505092915050565b6105228161060b565b82525050565b6105318161061d565b82525050565b61054081610667565b82525050565b61054f8161065a565b82525050565b600060208201905061056a6000830184610519565b92915050565b60006080820190506105856000830187610528565b6105926020830186610546565b61059f6040830185610528565b6105ac6060830184610528565b95945050505050565b60006040820190506105ca6000830185610537565b6105d76020830184610528565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561060157600080fd5b8060405250919050565b60006106168261063a565b9050919050565b6000819050919050565b600081905061063582610679565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b600061067282610627565b9050919050565b6006811061068357fe5b50565b61068f8161061d565b811461069a57600080fd5b50565b600581106106aa57600080fd5b50565b6106b68161065a565b81146106c157600080fd5b5056fea2646970667358221220174a840c618313f9e518c3f81fab74844b68e47d494b71b1f0a916194be4e45164736f6c634300060c0033";

type TestLibSignatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibSignatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibSignature__factory extends ContractFactory {
  constructor(...args: TestLibSignatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLibSignature> {
    return super.deploy(overrides || {}) as Promise<TestLibSignature>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLibSignature {
    return super.attach(address) as TestLibSignature;
  }
  override connect(signer: Signer): TestLibSignature__factory {
    return super.connect(signer) as TestLibSignature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibSignatureInterface {
    return new utils.Interface(_abi) as TestLibSignatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibSignature {
    return new Contract(address, _abi, signerOrProvider) as TestLibSignature;
  }
}
