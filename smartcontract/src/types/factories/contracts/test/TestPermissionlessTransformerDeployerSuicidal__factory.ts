/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestPermissionlessTransformerDeployerSuicidal,
  TestPermissionlessTransformerDeployerSuicidalInterface,
} from "../../../contracts/test/TestPermissionlessTransformerDeployerSuicidal";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060848061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806341c0e1b514602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff16fffea2646970667358221220b33c929c829762437d267048ec723725d7ce46031ffdc5ba112a69a05707c3c864736f6c634300060c0033";

type TestPermissionlessTransformerDeployerSuicidalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestPermissionlessTransformerDeployerSuicidalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestPermissionlessTransformerDeployerSuicidal__factory extends ContractFactory {
  constructor(
    ...args: TestPermissionlessTransformerDeployerSuicidalConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestPermissionlessTransformerDeployerSuicidal> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestPermissionlessTransformerDeployerSuicidal>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(
    address: string
  ): TestPermissionlessTransformerDeployerSuicidal {
    return super.attach(
      address
    ) as TestPermissionlessTransformerDeployerSuicidal;
  }
  override connect(
    signer: Signer
  ): TestPermissionlessTransformerDeployerSuicidal__factory {
    return super.connect(
      signer
    ) as TestPermissionlessTransformerDeployerSuicidal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestPermissionlessTransformerDeployerSuicidalInterface {
    return new utils.Interface(
      _abi
    ) as TestPermissionlessTransformerDeployerSuicidalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestPermissionlessTransformerDeployerSuicidal {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestPermissionlessTransformerDeployerSuicidal;
  }
}
