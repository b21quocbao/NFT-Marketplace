/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestDelegateCaller,
  TestDelegateCallerInterface,
} from "../../../contracts/test/TestDelegateCaller";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "executeDelegateCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061025f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b68df16d14610030575b600080fd5b61004a60048036038101906100459190610130565b61004c565b005b600060608473ffffffffffffffffffffffffffffffffffffffff1684846040516100779291906101ad565b600060405180830381855af49150503d80600081146100b2576040519150601f19603f3d011682016040523d82523d6000602084013e6100b7565b606091505b5091509150816100c957805160208201fd5b805160208201f35b6000813590506100e081610212565b92915050565b60008083601f8401126100f857600080fd5b8235905067ffffffffffffffff81111561011157600080fd5b60208301915083600182028301111561012957600080fd5b9250929050565b60008060006040848603121561014557600080fd5b6000610153868287016100d1565b935050602084013567ffffffffffffffff81111561017057600080fd5b61017c868287016100e6565b92509250509250925092565b600061019483856101c6565b93506101a1838584610203565b82840190509392505050565b60006101ba828486610188565b91508190509392505050565b600081905092915050565b60006101dc826101e3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b61021b816101d1565b811461022657600080fd5b5056fea26469706673582212200aedc34949a0cbfcc6074e2e28a7bc0bc90fed9cc5069ef4b175facdf428edfc64736f6c634300060c0033";

type TestDelegateCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestDelegateCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestDelegateCaller__factory extends ContractFactory {
  constructor(...args: TestDelegateCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestDelegateCaller> {
    return super.deploy(overrides || {}) as Promise<TestDelegateCaller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestDelegateCaller {
    return super.attach(address) as TestDelegateCaller;
  }
  override connect(signer: Signer): TestDelegateCaller__factory {
    return super.connect(signer) as TestDelegateCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestDelegateCallerInterface {
    return new utils.Interface(_abi) as TestDelegateCallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestDelegateCaller {
    return new Contract(address, _abi, signerOrProvider) as TestDelegateCaller;
  }
}
