/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestMetaTransactionsNativeOrdersFeature,
  TestMetaTransactionsNativeOrdersFeatureInterface,
} from "../../../contracts/test/TestMetaTransactionsNativeOrdersFeature";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "enum LibSignature.SignatureType",
        name: "signatureType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "FillLimitOrderCalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "enum LibSignature.SignatureType",
        name: "signatureType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
    ],
    name: "FillRfqOrderCalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFeeFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFeePaid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "LimitOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "OrderSignerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledLimitOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledRfqOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "RfqOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "addrs",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "RfqOrderOriginsAllowed",
    type: "event",
  },
  {
    inputs: [],
    name: "EIP712_DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_FEE_MULTIPLIER",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "_fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetLimitOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetRfqOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelRfqOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getLimitOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolFeeMultiplier",
    outputs: [
      {
        internalType: "uint32",
        name: "multiplier",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getRfqOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "isValidOrderSigner",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedOrderSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "origins",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedRfqOrigins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "poolIds",
        type: "bytes32[]",
      },
    ],
    name: "transferProtocolFeesForPools",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101806040526200001b600160036000620002ab60201b60201c565b610160908152503480156200002f57600080fd5b5060008060006040516200004390620002d5565b604051809103906000f08015801562000060573d6000803e3d6000fd5b506000848484848483838383838383838c808060004690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba4277f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c8385604051602001620000f395949392919062000358565b6040516020818303038152906040528051906020012060808181525050505050508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1663f2541a8c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200019257600080fd5b505afa158015620001a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001cd9190620002f9565b60e081815250508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508063ffffffff1660a08163ffffffff1660e01b8152505050505050505050503073ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050505050505050505062000417565b60008163ffffffff1660208463ffffffff16901b60408663ffffffff16901b171790509392505050565b60d98062007e0b83390190565b600081519050620002f381620003fd565b92915050565b6000602082840312156200030c57600080fd5b60006200031c84828501620002e2565b91505092915050565b6200033081620003b5565b82525050565b6200034181620003c9565b82525050565b6200035281620003f3565b82525050565b600060a0820190506200036f600083018862000336565b6200037e602083018762000336565b6200038d604083018662000336565b6200039c606083018562000347565b620003ab608083018462000325565b9695505050505050565b6000620003c282620003d3565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200040881620003c9565b81146200041457600080fd5b50565b60805160a05160e01c60c05160601c60e0516101005160601c6101205160601c6101405160601c6101605161797362000498600039806109115250806134b6525080612b7c525080612ac8525080614d75525080612a195280614d54525080610f2452806116c05280614d22525080611ec1528061234f52506179736000f3fe60806040526004361061020f5760003560e01c80639a4f809c11610118578063b4658bfb116100a0578063ea7faa611161006f578063ea7faa6114610820578063f6274f6614610849578063f6e0f6a51461087a578063fd5f995b146108a3578063fe55a3ef146108cc5761020f565b8063b4658bfb14610750578063d0a55fb01461078f578063dab400f3146107b8578063dd11d225146107e35761020f565b8063aa6b21cd116100e7578063aa6b21cd14610643578063aa77476c14610681578063ad354eeb146106bf578063b09f1fb1146106fe578063b10a33f4146107275761020f565b80639a4f809c1461059d5780639baa45a8146105c65780639f0434f5146105ef578063a0edcef5146106185761020f565b8063487b5c201161019b57806386a0c8d71161016a57806386a0c8d7146104b35780638fd3ab80146104dc5780639240529c14610507578063935c82a41461053757806395480889146105605761020f565b8063487b5c20146103f75780636ae4b4f7146104225780636b52a4a81461044d5780637d49ec1a1461048a5761020f565b8063346693c5116101e2578063346693c5146102e457806337f381d8146103215780633cd2f02614610360578063414e4ccf14610389578063438cdfc5146103ba5761020f565b8063016a6d6514610214578063031b905c146102515780630f0e8cf71461027c5780631fb09795146102a5575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190615d1a565b6108f5565b6040516102489190616c63565b60405180910390f35b34801561025d57600080fd5b5061026661090f565b6040516102739190617222565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e919061591a565b610933565b005b3480156102b157600080fd5b506102cc60048036038101906102c79190615bbf565b6109e6565b6040516102db93929190617106565b60405180910390f35b3480156102f057600080fd5b5061030b60048036038101906103069190615d1a565b610b01565b60405161031891906170eb565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190615d44565b610c6c565b60405161035793929190617106565b60405180910390f35b34801561036c57600080fd5b50610387600480360381019061038291906158d5565b610d77565b005b6103a3600480360381019061039e9190615c4f565b610db0565b6040516103b19291906171f9565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190615d82565b610e1b565b6040516103ee91906171de565b60405180910390f35b34801561040357600080fd5b5061040c610f20565b6040516104199190617266565b60405180910390f35b34801561042e57600080fd5b50610437610f48565b6040516104449190616f79565b60405180910390f35b34801561045957600080fd5b50610474600480360381019061046f91906156fb565b610f81565b6040516104819190616c48565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac9190615b95565b61101e565b005b3480156104bf57600080fd5b506104da60048036038101906104d5919061591a565b6110a5565b005b3480156104e857600080fd5b506104f1611158565b6040516104fe9190616eac565b60405180910390f35b610521600480360381019061051c9190615bfd565b611357565b60405161052e91906171de565b60405180910390f35b34801561054357600080fd5b5061055e6004803603810190610559919061581e565b611460565b005b34801561056c57600080fd5b5061058760048036038101906105829190615b95565b611493565b60405161059491906170eb565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf9190615b46565b6115a1565b005b3480156105d257600080fd5b506105ed60048036038101906105e89190615a26565b6115b2565b005b3480156105fb57600080fd5b5061061660048036038101906106119190615737565b6115e9565b005b34801561062457600080fd5b5061062d6116be565b60405161063a9190617266565b60405180910390f35b34801561064f57600080fd5b5061066a60048036038101906106659190615dd4565b6116e2565b6040516106789291906171f9565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190615d82565b61174c565b6040516106b69291906171f9565b60405180910390f35b3480156106cb57600080fd5b506106e660048036038101906106e19190615a67565b6117ea565b6040516106f593929190616bfc565b60405180910390f35b34801561070a57600080fd5b5061072560048036038101906107209190615881565b611a74565b005b34801561073357600080fd5b5061074e6004803603810190610749919061581e565b611bf1565b005b34801561075c57600080fd5b50610777600480360381019061077291906159b1565b611c24565b60405161078693929190616bfc565b60405180910390f35b34801561079b57600080fd5b506107b660048036038101906107b19190615b46565b611eae565b005b3480156107c457600080fd5b506107cd611ebf565b6040516107da9190616c63565b60405180910390f35b3480156107ef57600080fd5b5061080a60048036038101906108059190615b95565b611ee3565b6040516108179190616c63565b60405180910390f35b34801561082c57600080fd5b50610847600480360381019061084291906157e2565b611efd565b005b610863600480360381019061085e9190615bfd565b611fdf565b6040516108719291906171f9565b60405180910390f35b34801561088657600080fd5b506108a1600480360381019061089c9190615adc565b612081565b005b3480156108af57600080fd5b506108ca60048036038101906108c59190615737565b6120b8565b005b3480156108d857600080fd5b506108f360048036038101906108ee9190615d1a565b61218d565b005b600061090861090383612214565b61234b565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b81518351148015610945575080518351145b610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90616fdb565b60405180910390fd5b60005b83518110156109e0576109d5338583815181106109a057fe5b60200260200101518584815181106109b457fe5b60200260200101518585815181106109c857fe5b602002602001015161239d565b806001019050610987565b50505050565b6109ee614e65565b6000806109fa85611493565b9250610a8b6040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250612589565b91506000610aad846000015186803603810190610aa89190615e63565b6126c2565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff161480610af75750610af68660a0015182610f81565b5b9150509250925092565b610b09614e65565b610b12826108f5565b8160000181815250506000610b25612856565b6002016000846080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c098284606001518561010001518661012001518561286c565b600073ffffffffffffffffffffffffffffffffffffffff168360c0015173ffffffffffffffffffffffffffffffffffffffff161415610c6657600082602001906004811115610c5457fe5b90816004811115610c6157fe5b815250505b50919050565b610c74614e65565b600080610c8085610b01565b9250610d116040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250612589565b91506000610d238460000151866126c2565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff161480610d6d5750610d6c866080015182610f81565b5b9150509250925092565b60005b82829050811015610dab57610da0838383818110610d9457fe5b90506020020135612a15565b806001019050610d7a565b505050565b6000807f74fece103e7470a8798099e7fd4af1eea16d523b4dbe60d7dc30ecf3519dba65878760000151886020015189604001518a606001518a8a8a604051610e00989796959493929190617066565b60405180910390a16000610539915091509550959350505050565b6000610e25614ea6565b610e9b6040518060c00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815250612c12565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff161015610f1157610f10610f0b610edc876108f5565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166130da565b613178565b5b80604001519150509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6040518060400160405280600b81526020017f4c696d69744f726465727300000000000000000000000000000000000000000081525081565b6000610f8b612856565b60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061102982611ee3565b90508160a0015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561107657506110748260a0015133610f81565b155b156110935761109261108d82338560a00151613180565b613178565b5b6110a1818360a0015161321e565b5050565b815183511480156110b7575080518351145b6110f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ed90616fdb565b60405180910390fd5b60005b8351811015611152576111473385838151811061111257fe5b602002602001015185848151811061112657fe5b602002602001015185858151811061113a57fe5b60200260200101516132ab565b8060010190506110f9565b50505050565b600061116a633cd2f02660e01b613497565b61117a63f6274f6660e01b613497565b61118a63aa77476c60e01b613497565b61119a639240529c60e01b613497565b6111aa63438cdfc560e01b613497565b6111ba63414e4ccf60e01b613497565b6111ca63aa6b21cd60e01b613497565b6111da637d49ec1a60e01b613497565b6111ea63fe55a3ef60e01b613497565b6111fa639baa45a860e01b613497565b61120a63f6e0f6a560e01b613497565b61121a63d0a55fb060e01b613497565b61122a63b10a33f460e01b613497565b61123a6386a0c8d760e01b613497565b61124a639f0434f560e01b613497565b61125a639a4f809c60e01b613497565b61126a63935c82a460e01b613497565b61127a630f0e8cf760e01b613497565b61128a63fd5f995b60e01b613497565b61129a639548088960e01b613497565b6112aa63346693c560e01b613497565b6112ba63dd11d22560e01b613497565b6112ca63016a6d6560e01b613497565b6112da63487b5c2060e01b613497565b6112ea63b09f1fb160e01b613497565b6112fa631fb0979560e01b613497565b61130a6337f381d860e01b613497565b61131a63b4658bfb60e01b613497565b61132a63ad354eeb60e01b613497565b61133a63ea7faa6160e01b613497565b61134a636b52a4a860e01b613497565b632c64c5ef60e01b905090565b6000611361614ea6565b6113ce6040518060a00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250613527565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff1610156114445761144361143e61140f87611ee3565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166130da565b613178565b5b6114518160000151613a90565b80604001519150509392505050565b61146a8433610f81565b6114815761148061147b8533613b71565b613178565b5b61148d8484848461239d565b50505050565b61149b614e65565b6114a482611ee3565b81600001818152505060006114b7612856565b60010160008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061159b8284606001518561014001518661016001518561286c565b50919050565b6115ad3384848461239d565b505050565b60005b81518110156115e5576115da8282815181106115cd57fe5b602002602001015161101e565b8060010190506115b5565b5050565b815183511480156115fb575080518351145b61163a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163190616fdb565b60405180910390fd5b6116448433610f81565b61165b5761165a6116558533613b71565b613178565b5b60005b83518110156116b7576116ac8585838151811061167757fe5b602002602001015185848151811061168b57fe5b602002602001015185858151811061169f57fe5b60200260200101516132ab565b80600101905061165e565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807fc03fa343c060fc606d5055416dcc7b6a43c24a30ee1f6f3e3ffd0c617aca241b88886000015189602001518a604001518b606001518b8b6040516117309796959493929190617168565b60405180910390a1600061053991509150965096945050505050565b600080611757614ea6565b6117cd6040518060c00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815250612c12565b905080602001518160400151809350819450505050935093915050565b6060806060848490508787905014611837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182e90616f9b565b60405180910390fd5b8686905067ffffffffffffffff8111801561185157600080fd5b5060405190808252806020026020018201604052801561188b57816020015b611878614e65565b8152602001906001900390816118705790505b5092508686905067ffffffffffffffff811180156118a857600080fd5b506040519080825280602002602001820160405280156118d75781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff811180156118f457600080fd5b506040519080825280602002602001820160405280156119235781602001602082028036833780820191505090505b50905060005b87879050811015611a69573073ffffffffffffffffffffffffffffffffffffffff166337f381d889898481811061195c57fe5b9050610140020188888581811061196f57fe5b9050608002016040518363ffffffff1660e01b815260040161199292919061713d565b60a06040518083038186803b1580156119aa57600080fd5b505afa9250505080156119db57506040513d601f19601f820116820180604052508101906119d89190615ccb565b60015b6119e457611a5e565b828785815181106119f157fe5b602002602001018190525081868581518110611a0957fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611a4857fe5b6020026020010190151590811515815250505050505b806001019050611929565b509450945094915050565b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad990616fbb565b60405180910390fd5b6000611aec612856565b905060005b8351811015611bb057828260030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110611b4a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611af1565b507f02dfead5eb769b298e82dd9650b31c40559a3d42701dbf53c931bc2682847c31338484604051611be493929190616b27565b60405180910390a1505050565b611bfb8433610f81565b611c1257611c11611c0c8533613b71565b613178565b5b611c1e848484846132ab565b50505050565b6060806060848490508787905014611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6890616f9b565b60405180910390fd5b8686905067ffffffffffffffff81118015611c8b57600080fd5b50604051908082528060200260200182016040528015611cc557816020015b611cb2614e65565b815260200190600190039081611caa5790505b5092508686905067ffffffffffffffff81118015611ce257600080fd5b50604051908082528060200260200182016040528015611d115781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff81118015611d2e57600080fd5b50604051908082528060200260200182016040528015611d5d5781602001602082028036833780820191505090505b50905060005b87879050811015611ea3573073ffffffffffffffffffffffffffffffffffffffff16631fb09795898984818110611d9657fe5b90506101800201888885818110611da957fe5b9050608002016040518363ffffffff1660e01b8152600401611dcc92919061703b565b60a06040518083038186803b158015611de457600080fd5b505afa925050508015611e1557506040513d601f19601f82011682018060405250810190611e129190615ccb565b60015b611e1e57611e98565b82878581518110611e2b57fe5b602002602001018190525081868581518110611e4357fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611e8257fe5b6020026020010190151590811515815250505050505b806001019050611d63565b509450945094915050565b611eba338484846132ab565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611ef6611ef183613c0c565b61234b565b9050919050565b6000611f07612856565b9050818160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f6ea9dbe8b2cc119348716a9220a0742ad62b7884ecb0ff4b32cd508121fd9379338484604051611fd293929190616af0565b60405180910390a1505050565b600080611fea614ea6565b6120576040518060a00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250613527565b90506120668160000151613a90565b80602001518160400151809350819450505050935093915050565b60005b81518110156120b4576120a982828151811061209c57fe5b602002602001015161218d565b806001019050612084565b5050565b815183511480156120ca575080518351145b612109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210090616fdb565b60405180910390fd5b6121138433610f81565b61212a576121296121248533613b71565b613178565b5b60005b83518110156121865761217b8585838151811061214657fe5b602002602001015185848151811061215a57fe5b602002602001015185858151811061216e57fe5b602002602001015161239d565b80600101905061212d565b5050505050565b6000612198826108f5565b9050816080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156121e557506121e3826080015133610f81565b155b15612202576122016121fc82338560800151613180565b613178565b5b61221081836080015161321e565b5050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000082604051602001612380929190616a37565b604051602081830303815290604052805190602001209050919050565b60006123a7612856565b905060008160020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828111156124845761248361247e8483613d83565b613178565b5b828260020160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe7ffb1edfe79f4df716cb2dcad21cf2f31b104d816a7976ba1e6e4653c1efb1868686866040516125799493929190616b8e565b60405180910390a1505050505050565b60008082604001516fffffffffffffffffffffffffffffffff1614806125c55750600082606001516fffffffffffffffffffffffffffffffff16145b156125d357600090506126bd565b600160048111156125e057fe5b82608001516020015160048111156125f457fe5b1461260257600090506126bd565b600061265b8360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff16613e1e565b90506126788161267385602001518660000151613e4e565b613f74565b90506126b96126b48285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff16613f8d565b613fe2565b9150505b919050565b60006126ce838361401a565b600260048111156126db57fe5b826000015160048111156126eb57fe5b141561275357600183836020015184604001518560600151604051600081526020016040526040516127209493929190616e67565b6020604051602081039080840390855afa158015612742573d6000803e3d6000fd5b505050602060405103519050612807565b6003600481111561276057fe5b8260000151600481111561277057fe5b14156128065760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c6000209050600181846020015185604001518660600151604051600081526020016040526040516127d69493929190616e67565b6020604051602081039080840390855afa1580156127f8573d6000803e3d6000fd5b505050602060405103519150505b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128505761284f61284a600585614145565b613178565b5b92915050565b60008061286360076141e0565b90508091505090565b6000612876612856565b90506000816000016000886000015181526020019081526020016000205490508087604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050856fffffffffffffffffffffffffffffffff1687604001516fffffffffffffffffffffffffffffffff161061291f5760028760200190600481111561290757fe5b9081600481111561291457fe5b815250505050612a0e565b60007f80000000000000000000000000000000000000000000000000000000000000008216146129735760038760200190600481111561295b57fe5b9081600481111561296857fe5b815250505050612a0e565b504267ffffffffffffffff168467ffffffffffffffff16116129b8576004866020019060048111156129a157fe5b908160048111156129ae57fe5b8152505050612a0e565b828211156129e9576003866020019060048111156129d257fe5b908160048111156129df57fe5b8152505050612a0e565b6001866020019060048111156129fb57fe5b90816004811115612a0857fe5b81525050505b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663319bed9a836040518263ffffffff1660e01b8152600401612a709190616c63565b602060405180830381600087803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac29190615b1d565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401612b1f9190616a9e565b60206040518083038186803b158015612b3757600080fd5b505afa158015612b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6f9190615e8c565b90506001811115612c0d577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3b4a3278384600185036040518463ffffffff1660e01b8152600401612bda93929190616ab9565b600060405180830381600087803b158015612bf457600080fd5b505af1158015612c08573d6000803e3d6000fd5b505050505b505050565b612c1a614ea6565b612c22614e65565b612c2f8360000151610b01565b905060016004811115612c3e57fe5b81602001516004811115612c4e57fe5b14612c7957612c78612c73826000015183602001516004811115612c6e57fe5b6141fc565b613178565b5b6000612c83612856565b90503273ffffffffffffffffffffffffffffffffffffffff16846000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614158015612d5a5750806003016000856000015160c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15612d7f57612d7e612d79836000015132876000015160c00151614297565b613178565b5b50600073ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff1614158015612dfd5750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612e2657612e25612e2082600001518560600151866000015160a00151614335565b613178565b5b6000612e3a826000015185602001516126c2565b905083600001516080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612e8f5750612e8d84600001516080015182610f81565b155b15612eb457612eb3612eae8360000151838760000151608001516143d3565b613178565b5b506130056040518061014001604052808360000151815260200185600001516080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560800151612f05578560600151612f07565b305b73ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff16815250614471565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050507f829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c3281600001518460000151608001518560600151866000015160000151876000015160200151876020015188604001518a6000015160e001516040516130cc989796959493929190616d89565b60405180910390a150919050565b60607f21948612b5ef214ec0508df4901600e07a810a371be76b25d59ade73826e3d9784848460405160240161311293929190616e07565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b60607f88b2c08e4a5f57d416ad23dad18c20497ccfe684b1379b28fd564adaf582b80f8484846040516024016131b893929190616ca7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6000613228612856565b90507f8000000000000000000000000000000000000000000000000000000000000000816000016000858152602001908152602001600020600082825417925050819055507fa6eb7cdc219e1518ced964e9a34e61d68a94e4f1569db3e84256ba981ba52753838360405161329e929190616c7e565b60405180910390a1505050565b60006132b5612856565b905060008160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828111156133925761339161338c8483613d83565b613178565b5b828260010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa91fe7ae62fce669df2c7f880f8c14d178531aae72515558e5c948e37c32a572868686866040516134879493929190616b8e565b60405180910390a1505050505050565b3073ffffffffffffffffffffffffffffffffffffffff16636eb224cb827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016134f2929190616ec7565b600060405180830381600087803b15801561350c57600080fd5b505af1158015613520573d6000803e3d6000fd5b5050505050565b61352f614ea6565b613537614e65565b6135448360000151611493565b90506001600481111561355357fe5b8160200151600481111561356357fe5b1461358e5761358d61358882600001518360200151600481111561358357fe5b6141fc565b613178565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff161415801561360b5750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614155b156136345761363361362e82600001518560600151866000015160c00151614335565b613178565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff16141580156136b15750826080015173ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614155b156136da576136d96136d482600001518560800151866000015160e0015161465e565b613178565b5b60006136ee826000015185602001516126c2565b9050836000015160a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141580156137435750613741846000015160a0015182610f81565b155b1561376857613767613762836000015183876000015160a001516143d3565b613178565b5b5061377b836000015161012001516146fc565b8260000181815250506138c460405180610140016040528083600001518152602001856000015160a0015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff16815250614471565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250505060008360000151608001516fffffffffffffffffffffffffffffffff1611156139fd5761399682602001516fffffffffffffffffffffffffffffffff168460000151606001516fffffffffffffffffffffffffffffffff168560000151608001516fffffffffffffffffffffffffffffffff16613e1e565b82606001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250506139fc83600001516020015184606001518560000151610100015185606001516fffffffffffffffffffffffffffffffff166147e1565b5b7fab614d2b738543c0ea21f56347cf696a3a0c42a7cbec3212a5ca22a4dcff21248160000151846000015160a00151856060015186600001516101000151876000015160000151886000015160200151886020015189604001518a606001518b600001518d600001516101200151604051613a829b9a99989796959493929190616cde565b60405180910390a150919050565b8034118015613acb57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15613b6e576000613ae582346148ff90919063ffffffff16565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051613b0d90616a6e565b60006040518083038185875af1925050503d8060008114613b4a576040519150601f19603f3d011682016040523d82523d6000602084013e613b4f565b606091505b5050905080613b6b57613b6a613b653384614929565b613178565b5b50505b50565b60607f84356db366796dc6e2aeb1ad74b631fe4e5ec6a650464da6059e9f95c8810a108383604051602401613ba7929190616b65565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b60607fb12bc7e7d341f4431d6faf05f991ee3b779183e341b24243064e10c886cd18738383604051602401613db992919061723d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6000613e4583613e3784876149c490919063ffffffff16565b614a0e90919063ffffffff16565b90509392505050565b6000613f6c8373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401613e8e929190616b65565b60206040518083038186803b158015613ea657600080fd5b505afa158015613eba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ede9190615e8c565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401613f179190616a83565b60206040518083038186803b158015613f2f57600080fd5b505afa158015613f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f679190615e8c565b613f74565b905092915050565b6000818310613f835781613f85565b825b905092915050565b6000613fd983613fcb613faa6001876148ff90919063ffffffff16565b613fbd86896149c490919063ffffffff16565b614a4590919063ffffffff16565b614a0e90919063ffffffff16565b90509392505050565b60006fffffffffffffffffffffffffffffffff80168211156140125761401161400c600384614a74565b613178565b5b819050919050565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816040015160001c1015806140845750600160027ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd03641418161407757fe5b0401816060015160001c10155b1561409d5761409c614097600584614145565b613178565b5b600060048111156140aa57fe5b816000015160048111156140ba57fe5b14156140d4576140d36140ce600384614145565b613178565b5b600160048111156140e157fe5b816000015160048111156140f157fe5b141561410b5761410a614105600084614145565b613178565b5b60048081111561411757fe5b8160000151600481111561412757fe5b14156141415761414061413b600284614145565b613178565b5b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd838360405160240161417b929190616f50565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006080600183600a8111156141f257fe5b01901b9050919050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c940008383604051602401614232929190616e3e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b16348484846040516024016142cf93929190616ca7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa639684848460405160240161436d93929190616ca7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f712484848460405160240161440b93929190616ca7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6000806144b08361010001516144ab8561012001518660e001516fffffffffffffffffffffffffffffffff16614af690919063ffffffff16565b614b68565b91506144fb826fffffffffffffffffffffffffffffffff168460e001516fffffffffffffffffffffffffffffffff168560c001516fffffffffffffffffffffffffffffffff16613e1e565b90506000826fffffffffffffffffffffffffffffffff16148061453057506000816fffffffffffffffffffffffffffffffff16145b156145415760008091509150614659565b61456b828461012001516fffffffffffffffffffffffffffffffff16614ba590919063ffffffff16565b6fffffffffffffffffffffffffffffffff16614585612856565b600001600085600001518152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff161415614603576145fe8360a001518460200151846fffffffffffffffffffffffffffffffff16614c1c565b61462e565b61462d8360a0015184604001518560200151856fffffffffffffffffffffffffffffffff166147e1565b5b614658836080015184602001518560600151846fffffffffffffffffffffffffffffffff166147e1565b5b915091565b60607f15e6a383bb02d79ee933b927fbecba78cdde16cba84b94a99661f44bcce3b73684848460405160240161469693929190616ca7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600080614707614d1d565b9050600081141561471c5760009150506147dc565b600061472784614d4d565b905060008173ffffffffffffffffffffffffffffffffffffffff168360405161474f90616a6e565b60006040518083038185875af1925050503d806000811461478c576040519150601f19603f3d011682016040523d82523d6000602084013e614791565b606091505b50509050806147d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016147cc9061701b565b60405180910390fd5b8293505050505b919050565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161484790616ffb565b60405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d600183511460208210151681151782169150816148f657806000843e8083fd5b50505050505050565b60008282111561491e5761491d61491860028585614da1565b613178565b5b818303905092915050565b60607fbde95cc2119e0200d80642397198abfcf98e6e4dddd0de9c6320d86252ad40ab838360405160240161495f929190616bd3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6000808314156149d75760009050614a08565b60008284029050828482816149e857fe5b0414614a0357614a026149fd60018686614da1565b613178565b5b809150505b92915050565b600080821415614a2d57614a2c614a2760038585614da1565b613178565b5b6000828481614a3857fe5b0490508091505092915050565b600080828401905083811015614a6a57614a69614a6460008686614da1565b613178565b5b8091505092915050565b606063c996af7b60e01b8383604051602401614a91929190616f27565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115614b5d57614b5c614b576002856fffffffffffffffffffffffffffffffff16856fffffffffffffffffffffffffffffffff16614da1565b613178565b5b818303905092915050565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610614b9b5781614b9d565b825b905092915050565b6000808284019050836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015614c1257614c11614c0c6000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16614da1565b613178565b5b8091505092915050565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c8290616ffb565b60405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d60018351146020821015168115178216915081614d1557806000843e8083fd5b505050505050565b60003a7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1602905090565b6000614d9a7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084614e26565b9050919050565b606063e946c1bb60e01b848484604051602401614dc093929190616ef0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600060ff60f81b848385604051602001614e4394939291906169e9565b6040516020818303038152906040528051906020012060001c90509392505050565b60405180606001604052806000801916815260200160006004811115614e8757fe5b815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180608001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b600081359050614f138161784e565b92915050565b600082601f830112614f2a57600080fd5b8135614f3d614f38826172ae565b617281565b91508181835260208401935060208101905083856020840282011115614f6257600080fd5b60005b83811015614f925781614f788882614f04565b845260208401935060208301925050600181019050614f65565b5050505092915050565b60008083601f840112614fae57600080fd5b8235905067ffffffffffffffff811115614fc757600080fd5b602083019150836020820283011115614fdf57600080fd5b9250929050565b600082601f830112614ff757600080fd5b813561500a615005826172d6565b617281565b9150818183526020840193506020810190508385602084028201111561502f57600080fd5b60005b8381101561505f5781615045888261533f565b845260208401935060208301925050600181019050615032565b5050505092915050565b60008083601f84011261507b57600080fd5b8235905067ffffffffffffffff81111561509457600080fd5b602083019150836101808202830111156150ad57600080fd5b9250929050565b600082601f8301126150c557600080fd5b81356150d86150d3826172fe565b617281565b91508181835260208401935060208101905083856101808402820111156150fe57600080fd5b60005b8381101561512f5781615114888261537e565b84526020840193506101808301925050600181019050615101565b5050505092915050565b60008083601f84011261514b57600080fd5b8235905067ffffffffffffffff81111561516457600080fd5b6020830191508361014082028301111561517d57600080fd5b9250929050565b600082601f83011261519557600080fd5b81356151a86151a382617326565b617281565b91508181835260208401935060208101905083856101408402820111156151ce57600080fd5b60005b838110156151ff57816151e488826154fc565b845260208401935061014083019250506001810190506151d1565b5050505092915050565b60008083601f84011261521b57600080fd5b8235905067ffffffffffffffff81111561523457600080fd5b60208301915083608082028301111561524c57600080fd5b9250929050565b600082601f83011261526457600080fd5b81356152776152728261734e565b617281565b9150818183526020840193506020810190508385602084028201111561529c57600080fd5b60005b838110156152cc57816152b288826156a7565b84526020840193506020830192505060018101905061529f565b5050505092915050565b6000813590506152e581617865565b92915050565b6000815190506152fa81617865565b92915050565b60008135905061530f8161787c565b92915050565b6000815190506153248161787c565b92915050565b60008151905061533981617893565b92915050565b60008135905061534e816178aa565b92915050565b600081519050615363816178c1565b92915050565b600081359050615378816178d1565b92915050565b6000610180828403121561539157600080fd5b61539c610180617281565b905060006153ac8482850161533f565b60008301525060206153c08482850161533f565b60208301525060406153d48482850161567d565b60408301525060606153e88482850161567d565b60608301525060806153fc8482850161567d565b60808301525060a061541084828501614f04565b60a08301525060c061542484828501614f04565b60c08301525060e061543884828501614f04565b60e08301525061010061544d84828501614f04565b6101008301525061012061546384828501615300565b61012083015250610140615479848285016156d1565b6101408301525061016061548f848285016156a7565b6101608301525092915050565b6000606082840312156154ae57600080fd5b6154b86060617281565b905060006154c884828501615315565b60008301525060206154dc84828501615354565b60208301525060406154f084828501615692565b60408301525092915050565b6000610140828403121561550f57600080fd5b61551a610140617281565b9050600061552a8482850161533f565b600083015250602061553e8482850161533f565b60208301525060406155528482850161567d565b60408301525060606155668482850161567d565b606083015250608061557a84828501614f04565b60808301525060a061558e84828501614f04565b60a08301525060c06155a284828501614f04565b60c08301525060e06155b684828501615300565b60e0830152506101006155cb848285016156d1565b610100830152506101206155e1848285016156a7565b6101208301525092915050565b60006080828403121561560057600080fd5b81905092915050565b60006080828403121561561b57600080fd5b6156256080617281565b9050600061563584828501615369565b6000830152506020615649848285016156e6565b602083015250604061565d84828501615300565b604083015250606061567184828501615300565b60608301525092915050565b60008135905061568c816178e1565b92915050565b6000815190506156a1816178e1565b92915050565b6000813590506156b6816178f8565b92915050565b6000815190506156cb816178f8565b92915050565b6000813590506156e08161790f565b92915050565b6000813590506156f581617926565b92915050565b6000806040838503121561570e57600080fd5b600061571c85828601614f04565b925050602061572d85828601614f04565b9150509250929050565b6000806000806080858703121561574d57600080fd5b600061575b87828801614f04565b945050602085013567ffffffffffffffff81111561577857600080fd5b61578487828801614fe6565b935050604085013567ffffffffffffffff8111156157a157600080fd5b6157ad87828801614fe6565b925050606085013567ffffffffffffffff8111156157ca57600080fd5b6157d687828801615253565b91505092959194509250565b600080604083850312156157f557600080fd5b600061580385828601614f04565b9250506020615814858286016152d6565b9150509250929050565b6000806000806080858703121561583457600080fd5b600061584287828801614f04565b94505060206158538782880161533f565b93505060406158648782880161533f565b9250506060615875878288016156a7565b91505092959194509250565b6000806040838503121561589457600080fd5b600083013567ffffffffffffffff8111156158ae57600080fd5b6158ba85828601614f19565b92505060206158cb858286016152d6565b9150509250929050565b600080602083850312156158e857600080fd5b600083013567ffffffffffffffff81111561590257600080fd5b61590e85828601614f9c565b92509250509250929050565b60008060006060848603121561592f57600080fd5b600084013567ffffffffffffffff81111561594957600080fd5b61595586828701614fe6565b935050602084013567ffffffffffffffff81111561597257600080fd5b61597e86828701614fe6565b925050604084013567ffffffffffffffff81111561599b57600080fd5b6159a786828701615253565b9150509250925092565b600080600080604085870312156159c757600080fd5b600085013567ffffffffffffffff8111156159e157600080fd5b6159ed87828801615069565b9450945050602085013567ffffffffffffffff811115615a0c57600080fd5b615a1887828801615209565b925092505092959194509250565b600060208284031215615a3857600080fd5b600082013567ffffffffffffffff811115615a5257600080fd5b615a5e848285016150b4565b91505092915050565b60008060008060408587031215615a7d57600080fd5b600085013567ffffffffffffffff811115615a9757600080fd5b615aa387828801615139565b9450945050602085013567ffffffffffffffff811115615ac257600080fd5b615ace87828801615209565b925092505092959194509250565b600060208284031215615aee57600080fd5b600082013567ffffffffffffffff811115615b0857600080fd5b615b1484828501615184565b91505092915050565b600060208284031215615b2f57600080fd5b6000615b3d8482850161532a565b91505092915050565b600080600060608486031215615b5b57600080fd5b6000615b698682870161533f565b9350506020615b7a8682870161533f565b9250506040615b8b868287016156a7565b9150509250925092565b60006101808284031215615ba857600080fd5b6000615bb68482850161537e565b91505092915050565b6000806102008385031215615bd357600080fd5b6000615be18582860161537e565b925050610180615bf3858286016155ee565b9150509250929050565b60008060006102208486031215615c1357600080fd5b6000615c218682870161537e565b935050610180615c3386828701615609565b925050610200615c458682870161567d565b9150509250925092565b60008060008060006102608688031215615c6857600080fd5b6000615c768882890161537e565b955050610180615c8888828901615609565b945050610200615c9a8882890161567d565b935050610220615cac88828901614f04565b925050610240615cbe88828901614f04565b9150509295509295909350565b600080600060a08486031215615ce057600080fd5b6000615cee8682870161549c565b9350506060615cff86828701615692565b9250506080615d10868287016152eb565b9150509250925092565b60006101408284031215615d2d57600080fd5b6000615d3b848285016154fc565b91505092915050565b6000806101c08385031215615d5857600080fd5b6000615d66858286016154fc565b925050610140615d7885828601615609565b9150509250929050565b60008060006101e08486031215615d9857600080fd5b6000615da6868287016154fc565b935050610140615db886828701615609565b9250506101c0615dca8682870161567d565b9150509250925092565b6000806000806000806102408789031215615dee57600080fd5b6000615dfc89828a016154fc565b965050610140615e0e89828a01615609565b9550506101c0615e2089828a0161567d565b9450506101e0615e3289828a01614f04565b935050610200615e4489828a016152d6565b925050610220615e5689828a01614f04565b9150509295509295509295565b600060808284031215615e7557600080fd5b6000615e8384828501615609565b91505092915050565b600060208284031215615e9e57600080fd5b6000615eac848285016156bc565b91505092915050565b6000615ec18383615f24565b60208301905092915050565b6000615ed983836160d1565b60208301905092915050565b6000615ef18383616690565b60608301905092915050565b6000615f098383616971565b60208301905092915050565b615f1e816176d0565b82525050565b615f2d81617544565b82525050565b615f3c81617544565b82525050565b615f53615f4e82617544565b6177b7565b82525050565b6000615f64826173b6565b615f6e8185617421565b9350615f7983617376565b8060005b83811015615faa578151615f918882615eb5565b9750615f9c836173ed565b925050600181019050615f7d565b5085935050505092915050565b6000615fc2826173c1565b615fcc8185617432565b9350615fd783617386565b8060005b83811015616008578151615fef8882615ecd565b9750615ffa836173fa565b925050600181019050615fdb565b5085935050505092915050565b6000616020826173cc565b61602a8185617443565b935061603583617396565b8060005b8381101561606657815161604d8882615ee5565b975061605883617407565b925050600181019050616039565b5085935050505092915050565b600061607e826173d7565b6160888185617454565b9350616093836173a6565b8060005b838110156160c45781516160ab8882615efd565b97506160b683617414565b925050600181019050616097565b5085935050505092915050565b6160da81617568565b82525050565b6160e981617568565b82525050565b6161006160fb82617574565b6177c9565b82525050565b61610f816175a0565b82525050565b61611e816175a0565b82525050565b616135616130826175a0565b6177d3565b82525050565b616144816175aa565b82525050565b616153816176e2565b82525050565b61616281617706565b82525050565b61617181617718565b82525050565b6161808161772a565b82525050565b61618f8161773c565b82525050565b61619e8161773c565b82525050565b6161ad8161774e565b82525050565b60006161be826173e2565b6161c88185617470565b93506161d8818560208601617784565b6161e1816177ef565b840191505092915050565b60006161f9600283617481565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000616239602c83617470565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160008301527f525241595f4c454e4754485300000000000000000000000000000000000000006020830152604082019050919050565b600061629f602783617470565b91507f4e61746976654f7264657273466561747572652f4e4f5f434f4e54524143545f60008301527f4f524947494e53000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000616305600083617465565b9150600082019050919050565b600061631f603883617470565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f5060008301527f4149525f4f52444552535f41525241595f4c454e4754485300000000000000006020830152604082019050919050565b6000616385602483617470565b91507f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60008301527f53454c46000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006163eb602783617470565b91507f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260008301527f5f46414c494544000000000000000000000000000000000000000000000000006020830152604082019050919050565b610180820161645660008301836174ba565b616463600085018261614a565b5061647160208301836174ba565b61647e602085018261614a565b5061648c60408301836174e8565b6164996040850182616971565b506164a760608301836174e8565b6164b46060850182616971565b506164c260808301836174e8565b6164cf6080850182616971565b506164dd60a083018361748c565b6164ea60a0850182615f24565b506164f860c083018361748c565b61650560c0850182615f24565b5061651360e083018361748c565b61652060e0850182615f24565b5061652f61010083018361748c565b61653d610100850182615f24565b5061654c6101208301836174a3565b61655a610120850182616106565b50616569610140830183617516565b6165776101408501826169bc565b506165866101608301836174ff565b61659461016085018261698f565b50505050565b610180820160008201516165b1600085018261614a565b5060208201516165c4602085018261614a565b5060408201516165d76040850182616971565b5060608201516165ea6060850182616971565b5060808201516165fd6080850182616971565b5060a082015161661060a0850182615f24565b5060c082015161662360c0850182615f24565b5060e082015161663660e0850182615f24565b5061010082015161664b610100850182615f24565b50610120820151616660610120850182616106565b506101408201516166756101408501826169bc565b5061016082015161668a61016085018261698f565b50505050565b6060820160008201516166a66000850182616106565b5060208201516166b96020850182616177565b5060408201516166cc6040850182616971565b50505050565b6060820160008201516166e86000850182616106565b5060208201516166fb6020850182616177565b50604082015161670e6040850182616971565b50505050565b610140820161672660008301836174ba565b616733600085018261614a565b5061674160208301836174ba565b61674e602085018261614a565b5061675c60408301836174e8565b6167696040850182616971565b5061677760608301836174e8565b6167846060850182616971565b50616792608083018361748c565b61679f6080850182615f24565b506167ad60a083018361748c565b6167ba60a0850182615f24565b506167c860c083018361748c565b6167d560c0850182615f24565b506167e360e08301836174a3565b6167f060e0850182616106565b506167ff610100830183617516565b61680d6101008501826169bc565b5061681c6101208301836174ff565b61682a61012085018261698f565b50505050565b61014082016000820151616847600085018261614a565b50602082015161685a602085018261614a565b50604082015161686d6040850182616971565b5060608201516168806060850182616971565b5060808201516168936080850182615f24565b5060a08201516168a660a0850182615f24565b5060c08201516168b960c0850182615f24565b5060e08201516168cc60e0850182616106565b506101008201516168e16101008501826169bc565b506101208201516168f661012085018261698f565b50505050565b6080820161690d60008301836174d1565b61691a6000850182616186565b50616928602083018361752d565b61693560208501826169cb565b5061694360408301836174a3565b6169506040850182616106565b5061695e60608301836174a3565b61696b6060850182616106565b50505050565b61697a81617659565b82525050565b61698981617659565b82525050565b61699881617695565b82525050565b6169a781617695565b82525050565b6169b68161769f565b82525050565b6169c5816176af565b82525050565b6169d4816176c3565b82525050565b6169e3816176c3565b82525050565b60006169f582876160ef565b600182019150616a058286615f42565b601482019150616a158285616124565b602082019150616a258284616124565b60208201915081905095945050505050565b6000616a42826161ec565b9150616a4e8285616124565b602082019150616a5e8284616124565b6020820191508190509392505050565b6000616a79826162f8565b9150819050919050565b6000602082019050616a986000830184615f33565b92915050565b6000602082019050616ab36000830184615f15565b92915050565b6000606082019050616ace6000830186615f15565b616adb6020830185615f15565b616ae8604083018461699e565b949350505050565b6000606082019050616b056000830186615f15565b616b126020830185615f33565b616b1f60408301846160e0565b949350505050565b6000606082019050616b3c6000830186615f15565b8181036020830152616b4e8185615f59565b9050616b5d60408301846160e0565b949350505050565b6000604082019050616b7a6000830185615f33565b616b876020830184615f33565b9392505050565b6000608082019050616ba36000830187615f33565b616bb06020830186615f33565b616bbd6040830185615f33565b616bca606083018461699e565b95945050505050565b6000604082019050616be86000830185615f33565b616bf5602083018461699e565b9392505050565b60006060820190508181036000830152616c168186616015565b90508181036020830152616c2a8185616073565b90508181036040830152616c3e8184615fb7565b9050949350505050565b6000602082019050616c5d60008301846160e0565b92915050565b6000602082019050616c786000830184616115565b92915050565b6000604082019050616c936000830185616115565b616ca06020830184615f33565b9392505050565b6000606082019050616cbc6000830186616115565b616cc96020830185615f33565b616cd66040830184615f33565b949350505050565b600061016082019050616cf4600083018e616115565b616d01602083018d615f33565b616d0e604083018c615f33565b616d1b606083018b615f33565b616d28608083018a615f33565b616d3560a0830189615f33565b616d4260c0830188616980565b616d4f60e0830187616980565b616d5d610100830186616980565b616d6b61012083018561699e565b616d79610140830184616115565b9c9b505050505050505050505050565b600061010082019050616d9f600083018b616115565b616dac602083018a615f33565b616db96040830189615f33565b616dc66060830188615f33565b616dd36080830187615f33565b616de060a0830186616980565b616ded60c0830185616980565b616dfa60e0830184616115565b9998505050505050505050565b6000606082019050616e1c6000830186616115565b616e29602083018561699e565b616e36604083018461699e565b949350505050565b6000604082019050616e536000830185616115565b616e6060208301846169da565b9392505050565b6000608082019050616e7c6000830187616115565b616e8960208301866169da565b616e966040830185616115565b616ea36060830184616115565b95945050505050565b6000602082019050616ec1600083018461613b565b92915050565b6000604082019050616edc600083018561613b565b616ee96020830184615f33565b9392505050565b6000606082019050616f056000830186616159565b616f12602083018561699e565b616f1f604083018461699e565b949350505050565b6000604082019050616f3c6000830185616168565b616f49602083018461699e565b9392505050565b6000604082019050616f6560008301856161a4565b616f726020830184616115565b9392505050565b60006020820190508181036000830152616f9381846161b3565b905092915050565b60006020820190508181036000830152616fb48161622c565b9050919050565b60006020820190508181036000830152616fd481616292565b9050919050565b60006020820190508181036000830152616ff481616312565b9050919050565b6000602082019050818103600083015261701481616378565b9050919050565b60006020820190508181036000830152617034816163de565b9050919050565b6000610200820190506170516000830185616444565b61705f6101808301846168fc565b9392505050565b60006102608201905061707c600083018b61659a565b61708a61018083018a616195565b6170986101a08301896169da565b6170a66101c0830188616115565b6170b46101e0830187616115565b6170c2610200830186616980565b6170d0610220830185615f33565b6170de610240830184615f33565b9998505050505050505050565b600060608201905061710060008301846166d2565b92915050565b600060a08201905061711b60008301866166d2565b6171286060830185616980565b61713560808301846160e0565b949350505050565b60006101c0820190506171536000830185616714565b6171616101408301846168fc565b9392505050565b60006102008201905061717e600083018a616830565b61718c610140830189616195565b61719a6101608301886169da565b6171a8610180830187616115565b6171b66101a0830186616115565b6171c46101c0830185616980565b6171d26101e0830184615f33565b98975050505050505050565b60006020820190506171f36000830184616980565b92915050565b600060408201905061720e6000830185616980565b61721b6020830184616980565b9392505050565b6000602082019050617237600083018461699e565b92915050565b6000604082019050617252600083018561699e565b61725f602083018461699e565b9392505050565b600060208201905061727b60008301846169ad565b92915050565b6000604051905081810181811067ffffffffffffffff821117156172a457600080fd5b8060405250919050565b600067ffffffffffffffff8211156172c557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156172ed57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561731557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561733d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561736557600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061749b6020840184614f04565b905092915050565b60006174b26020840184615300565b905092915050565b60006174c9602084018461533f565b905092915050565b60006174e06020840184615369565b905092915050565b60006174f7602084018461567d565b905092915050565b600061750e60208401846156a7565b905092915050565b600061752560208401846156d1565b905092915050565b600061753c60208401846156e6565b905092915050565b600061754f82617675565b9050919050565b600061756182617675565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006175e182617556565b9050919050565b60006175f382617544565b9050919050565b60008190506176088261780d565b919050565b600081905061761b8261781a565b919050565b600081905061762e82617827565b919050565b600081905061764182617834565b919050565b600081905061765482617841565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b60006176db82617760565b9050919050565b60006176ed826176f4565b9050919050565b60006176ff82617675565b9050919050565b6000617711826175fa565b9050919050565b60006177238261760d565b9050919050565b600061773582617620565b9050919050565b600061774782617633565b9050919050565b600061775982617646565b9050919050565b600061776b82617772565b9050919050565b600061777d82617675565b9050919050565b60005b838110156177a2578082015181840152602081019050617787565b838111156177b1576000848401525b50505050565b60006177c2826177dd565b9050919050565b6000819050919050565b6000819050919050565b60006177e882617800565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b6004811061781757fe5b50565b6004811061782457fe5b50565b6005811061783157fe5b50565b6005811061783e57fe5b50565b6006811061784b57fe5b50565b61785781617544565b811461786257600080fd5b50565b61786e81617568565b811461787957600080fd5b50565b617885816175a0565b811461789057600080fd5b50565b61789c816175d6565b81146178a757600080fd5b50565b6178b3816175e8565b81146178be57600080fd5b50565b600581106178ce57600080fd5b50565b600581106178de57600080fd5b50565b6178ea81617659565b81146178f557600080fd5b50565b61790181617695565b811461790c57600080fd5b50565b617918816176af565b811461792357600080fd5b50565b61792f816176c3565b811461793a57600080fd5b5056fea264697066735822122095ac802d28b74df4014ab1e1fab911562630378108cb895096b2a0bf7c2433fb64736f6c634300060c003360806040526000801b60005534801561001757600080fd5b5060b3806100266000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f2541a8c14602d575b600080fd5b60336047565b604051603e9190605a565b60405180910390f35b60005481565b6054816073565b82525050565b6000602082019050606d6000830184604d565b92915050565b600081905091905056fea2646970667358221220b1b4b1f922022cacd868e94385b51803c9f922b5cc952ea8629c8670ce18350364736f6c634300060c0033";

type TestMetaTransactionsNativeOrdersFeatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMetaTransactionsNativeOrdersFeatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMetaTransactionsNativeOrdersFeature__factory extends ContractFactory {
  constructor(
    ...args: TestMetaTransactionsNativeOrdersFeatureConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestMetaTransactionsNativeOrdersFeature> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestMetaTransactionsNativeOrdersFeature>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMetaTransactionsNativeOrdersFeature {
    return super.attach(address) as TestMetaTransactionsNativeOrdersFeature;
  }
  override connect(
    signer: Signer
  ): TestMetaTransactionsNativeOrdersFeature__factory {
    return super.connect(
      signer
    ) as TestMetaTransactionsNativeOrdersFeature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMetaTransactionsNativeOrdersFeatureInterface {
    return new utils.Interface(
      _abi
    ) as TestMetaTransactionsNativeOrdersFeatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMetaTransactionsNativeOrdersFeature {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestMetaTransactionsNativeOrdersFeature;
  }
}
