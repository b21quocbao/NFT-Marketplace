/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestOrderSignerRegistryWithContractWallet,
  TestOrderSignerRegistryWithContractWalletInterface,
} from "../../../contracts/test/TestOrderSignerRegistryWithContractWallet";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IZeroEx",
        name: "_zeroex",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approveERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedOrderSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516108b43803806108b4833981810160405281019061003291906100c4565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610148565b6000815190506100be81610131565b92915050565b6000602082840312156100d657600080fd5b60006100e4848285016100af565b91505092915050565b60006100f882610111565b9050919050565b600061010a826100ed565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61013a816100ff565b811461014557600080fd5b50565b60805160601c61074f6101656000398061018c525061074f6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80638da5cb5b14610051578063a8e5e4aa1461006f578063ea7faa611461008b578063f2fde38b146100a7575b600080fd5b6100596100c3565b60405161006691906105cd565b60405180910390f35b61008960048036038101906100849190610551565b6100e7565b005b6100a560048036038101906100a091906104ec565b610182565b005b6100c160048036038101906100bc91906104c3565b61021b565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6100ef61030b565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b815260040161012a92919061063a565b602060405180830381600087803b15801561014457600080fd5b505af1158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c9190610528565b50505050565b61018a61030b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea7faa6183836040518363ffffffff1660e01b81526004016101e5929190610611565b600060405180830381600087803b1580156101ff57600080fd5b505af1158015610213573d6000803e3d6000fd5b505050505050565b61022361030b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561026d57610268610263610393565b6103d0565b610308565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103915761039061038b3360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166103d8565b6103d0565b5b565b60606040518060400160405280600481526020017fe69edc3e00000000000000000000000000000000000000000000000000000000815250905090565b805160208201fd5b6060631de45ad160e01b83836040516024016103f59291906105e8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600081359050610469816106bd565b92915050565b60008135905061047e816106d4565b92915050565b600081519050610493816106d4565b92915050565b6000813590506104a8816106eb565b92915050565b6000813590506104bd81610702565b92915050565b6000602082840312156104d557600080fd5b60006104e38482850161045a565b91505092915050565b600080604083850312156104ff57600080fd5b600061050d8582860161045a565b925050602061051e8582860161046f565b9150509250929050565b60006020828403121561053a57600080fd5b600061054884828501610484565b91505092915050565b60008060006060848603121561056657600080fd5b600061057486828701610499565b93505060206105858682870161045a565b9250506040610596868287016104ae565b9150509250925092565b6105a981610663565b82525050565b6105b881610675565b82525050565b6105c7816106b3565b82525050565b60006020820190506105e260008301846105a0565b92915050565b60006040820190506105fd60008301856105a0565b61060a60208301846105a0565b9392505050565b600060408201905061062660008301856105a0565b61063360208301846105af565b9392505050565b600060408201905061064f60008301856105a0565b61065c60208301846105be565b9392505050565b600061066e82610693565b9050919050565b60008115159050919050565b600061068c82610663565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6106c681610663565b81146106d157600080fd5b50565b6106dd81610675565b81146106e857600080fd5b50565b6106f481610681565b81146106ff57600080fd5b50565b61070b816106b3565b811461071657600080fd5b5056fea2646970667358221220335382e39a0348c34670aea848b90adc123af4bf9ee3883be854c111cadd64d964736f6c634300060c0033";

type TestOrderSignerRegistryWithContractWalletConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestOrderSignerRegistryWithContractWalletConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestOrderSignerRegistryWithContractWallet__factory extends ContractFactory {
  constructor(
    ...args: TestOrderSignerRegistryWithContractWalletConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _zeroex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestOrderSignerRegistryWithContractWallet> {
    return super.deploy(
      _zeroex,
      overrides || {}
    ) as Promise<TestOrderSignerRegistryWithContractWallet>;
  }
  override getDeployTransaction(
    _zeroex: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_zeroex, overrides || {});
  }
  override attach(address: string): TestOrderSignerRegistryWithContractWallet {
    return super.attach(address) as TestOrderSignerRegistryWithContractWallet;
  }
  override connect(
    signer: Signer
  ): TestOrderSignerRegistryWithContractWallet__factory {
    return super.connect(
      signer
    ) as TestOrderSignerRegistryWithContractWallet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestOrderSignerRegistryWithContractWalletInterface {
    return new utils.Interface(
      _abi
    ) as TestOrderSignerRegistryWithContractWalletInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestOrderSignerRegistryWithContractWallet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestOrderSignerRegistryWithContractWallet;
  }
}
