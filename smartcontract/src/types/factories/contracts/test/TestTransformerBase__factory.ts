/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestTransformerBase,
  TestTransformerBaseInterface,
} from "../../../contracts/test/TestTransformerBase";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "ethRecipient",
        type: "address",
      },
    ],
    name: "die",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IERC20Transformer.TransformContext",
        name: "",
        type: "tuple",
      },
    ],
    name: "transform",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250503073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c60a05160601c61051c6100b66000398061014952806101a352508060c3528061011d52806101e8525061051c6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063832b24bb14610046578063c9353cb514610076578063d5f3948814610092575b600080fd5b610060600480360381019061005b91906103a1565b6100b0565b60405161006d9190610444565b60405180910390f35b610090600480360381019061008b9190610378565b6100c1565b005b61009a6101e6565b6040516100a79190610400565b60405180910390f35b60006313c9929e60e01b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014757610146610141337f000000000000000000000000000000000000000000000000000000000000000061020a565b6102a5565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16146101cd576101cc6101c7307f00000000000000000000000000000000000000000000000000000000000000006102ad565b6102a5565b5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b60607f5cec653b364cca3880afa73ceff506d0651d11d26abbbe4a56460aa933b21b08838360405160240161024092919061041b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b60607fb5cf2cd09307d6c717473134badbb9761c2c97d7565566c2a71eba6cd6fc514d83836040516024016102e392919061041b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600081359050610357816104cf565b92915050565b60006060828403121561036f57600080fd5b81905092915050565b60006020828403121561038a57600080fd5b600061039884828501610348565b91505092915050565b6000602082840312156103b357600080fd5b600082013567ffffffffffffffff8111156103cd57600080fd5b6103d98482850161035d565b91505092915050565b6103eb8161045f565b82525050565b6103fa81610483565b82525050565b600060208201905061041560008301846103e2565b92915050565b600060408201905061043060008301856103e2565b61043d60208301846103e2565b9392505050565b600060208201905061045960008301846103f1565b92915050565b600061046a826104af565b9050919050565b600061047c826104af565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6104d881610471565b81146104e357600080fd5b5056fea2646970667358221220eabd90752add8156ae13b630e51de7cda4c0644928d4d1498c8cd6b6431a0f2d64736f6c634300060c0033";

type TestTransformerBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTransformerBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTransformerBase__factory extends ContractFactory {
  constructor(...args: TestTransformerBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestTransformerBase> {
    return super.deploy(overrides || {}) as Promise<TestTransformerBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTransformerBase {
    return super.attach(address) as TestTransformerBase;
  }
  override connect(signer: Signer): TestTransformerBase__factory {
    return super.connect(signer) as TestTransformerBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTransformerBaseInterface {
    return new utils.Interface(_abi) as TestTransformerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTransformerBase {
    return new Contract(address, _abi, signerOrProvider) as TestTransformerBase;
  }
}
