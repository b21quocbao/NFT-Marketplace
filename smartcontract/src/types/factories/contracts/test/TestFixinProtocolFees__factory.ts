/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestFixinProtocolFees,
  TestFixinProtocolFeesInterface,
} from "../../../contracts/test/TestFixinProtocolFees";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
      {
        internalType: "contract IStaking",
        name: "staking",
        type: "address",
      },
      {
        internalType: "contract FeeCollectorController",
        name: "feeCollectorController",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "protocolFeeMultiplier",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "PROTOCOL_FEE_MULTIPLIER",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "collectProtocolFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "getFeeCollector",
    outputs: [
      {
        internalType: "contract FeeCollector",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSingleProtocolFee",
    outputs: [
      {
        internalType: "uint256",
        name: "protocolFeeAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
    ],
    name: "transferFeesForPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101206040523480156200001257600080fd5b5060405162000e0e38038062000e0e83398181016040528101906200003891906200022f565b838383838173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1663f2541a8c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000ba57600080fd5b505afa158015620000cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f5919062000203565b60c081815250508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508063ffffffff1660808163ffffffff1660e01b815250505050505050505050620003a7565b600081519050620001a18162000325565b92915050565b600081519050620001b8816200033f565b92915050565b600081519050620001cf8162000359565b92915050565b600081519050620001e68162000373565b92915050565b600081519050620001fd816200038d565b92915050565b6000602082840312156200021657600080fd5b6000620002268482850162000190565b91505092915050565b600080600080608085870312156200024657600080fd5b60006200025687828801620001be565b94505060206200026987828801620001d5565b93505060406200027c87828801620001a7565b92505060606200028f87828801620001ec565b91505092959194509250565b6000620002a882620002f5565b9050919050565b6000819050919050565b6000620002c6826200029b565b9050919050565b6000620002da826200029b565b9050919050565b6000620002ee826200029b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600063ffffffff82169050919050565b6200033081620002af565b81146200033c57600080fd5b50565b6200034a81620002b9565b81146200035657600080fd5b50565b6200036481620002cd565b81146200037057600080fd5b50565b6200037e81620002e1565b81146200038a57600080fd5b50565b620003988162000315565b8114620003a457600080fd5b50565b60805160e01c60a05160601c60c05160e05160601c6101005160601c610a11620003fd600039806104555250806103a152508061029252508061027152806102f252508061014852806102c35250610a116000f3fe60806040526004361061004a5760003560e01c80634900c02f1461004f578063713192b41461006b578063a0edcef5146100a8578063b7bf197b146100d3578063e707b1f7146100fe575b600080fd5b61006960048036038101906100649190610569565b610127565b005b34801561007757600080fd5b50610092600480360381019061008d9190610569565b610134565b60405161009f91906107c4565b60405180910390f35b3480156100b457600080fd5b506100bd610146565b6040516100ca919061081a565b60405180910390f35b3480156100df57600080fd5b506100e861016a565b6040516100f591906107ff565b60405180910390f35b34801561010a57600080fd5b5061012560048036038101906101209190610569565b610179565b005b61013081610185565b5050565b600061013f8261026a565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101746102be565b905090565b610182816102ee565b50565b6000806101906102be565b905060008114156101a5576000915050610265565b60006101b08461026a565b905060008173ffffffffffffffffffffffffffffffffffffffff16836040516101d890610742565b60006040518083038185875af1925050503d8060008114610215576040519150601f19603f3d011682016040523d82523d6000602084013e61021a565b606091505b505090508061025e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610255906107df565b60405180910390fd5b8293505050505b919050565b60006102b77f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846104eb565b9050919050565b60003a7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1602905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663319bed9a836040518263ffffffff1660e01b815260040161034991906107a9565b602060405180830381600087803b15801561036357600080fd5b505af1158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190610592565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103f89190610757565b60206040518083038186803b15801561041057600080fd5b505afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044891906105bb565b905060018111156104e6577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3b4a3278384600185036040518463ffffffff1660e01b81526004016104b393929190610772565b600060405180830381600087803b1580156104cd57600080fd5b505af11580156104e1573d6000803e3d6000fd5b505050505b505050565b600060ff60f81b84838560405160200161050894939291906106f4565b6040516020818303038152906040528051906020012060001c90509392505050565b60008135905061053981610996565b92915050565b60008151905061054e816109ad565b92915050565b600081519050610563816109c4565b92915050565b60006020828403121561057b57600080fd5b60006105898482850161052a565b91505092915050565b6000602082840312156105a457600080fd5b60006105b28482850161053f565b91505092915050565b6000602082840312156105cd57600080fd5b60006105db84828501610554565b91505092915050565b6105ed816108f7565b82525050565b6106046105ff82610851565b610951565b82525050565b61061b61061682610875565b610963565b82525050565b61062a816108a1565b82525050565b61064161063c826108a1565b61096d565b82525050565b61065081610909565b82525050565b6000610663600083610835565b9150600082019050919050565b600061067d602783610840565b91507f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260008301527f5f46414c494544000000000000000000000000000000000000000000000000006020830152604082019050919050565b6106df816108dd565b82525050565b6106ee816108e7565b82525050565b6000610700828761060a565b60018201915061071082866105f3565b6014820191506107208285610630565b6020820191506107308284610630565b60208201915081905095945050505050565b600061074d82610656565b9150819050919050565b600060208201905061076c60008301846105e4565b92915050565b600060608201905061078760008301866105e4565b61079460208301856105e4565b6107a160408301846106d6565b949350505050565b60006020820190506107be6000830184610621565b92915050565b60006020820190506107d96000830184610647565b92915050565b600060208201905081810360008301526107f881610670565b9050919050565b600060208201905061081460008301846106d6565b92915050565b600060208201905061082f60008301846106e5565b92915050565b600081905092915050565b600082825260208201905092915050565b600061085c826108bd565b9050919050565b600061086e826108bd565b9050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60006108b682610863565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006109028261092d565b9050919050565b60006109148261091b565b9050919050565b6000610926826108bd565b9050919050565b60006109388261093f565b9050919050565b600061094a826108bd565b9050919050565b600061095c82610977565b9050919050565b6000819050919050565b6000819050919050565b600061098282610989565b9050919050565b60008160601b9050919050565b61099f816108a1565b81146109aa57600080fd5b50565b6109b6816108ab565b81146109c157600080fd5b50565b6109cd816108dd565b81146109d857600080fd5b5056fea26469706673582212203ecd52f21aa5ea71078a2e471949937aef55691f3637c995bfa64e3f727c58df64736f6c634300060c0033";

type TestFixinProtocolFeesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestFixinProtocolFeesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestFixinProtocolFees__factory extends ContractFactory {
  constructor(...args: TestFixinProtocolFeesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: string,
    staking: string,
    feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFixinProtocolFees> {
    return super.deploy(
      weth,
      staking,
      feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    ) as Promise<TestFixinProtocolFees>;
  }
  override getDeployTransaction(
    weth: string,
    staking: string,
    feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      weth,
      staking,
      feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    );
  }
  override attach(address: string): TestFixinProtocolFees {
    return super.attach(address) as TestFixinProtocolFees;
  }
  override connect(signer: Signer): TestFixinProtocolFees__factory {
    return super.connect(signer) as TestFixinProtocolFees__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFixinProtocolFeesInterface {
    return new utils.Interface(_abi) as TestFixinProtocolFeesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFixinProtocolFees {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestFixinProtocolFees;
  }
}
