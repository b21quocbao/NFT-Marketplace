/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestNativeOrdersFeature,
  TestNativeOrdersFeatureInterface,
} from "../../../contracts/test/TestNativeOrdersFeature";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "zeroExAddress",
        type: "address",
      },
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
      {
        internalType: "contract IStaking",
        name: "staking",
        type: "address",
      },
      {
        internalType: "contract FeeCollectorController",
        name: "_feeCollectorController",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "protocolFeeMultiplier",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFeeFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFeePaid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "LimitOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "OrderSignerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledLimitOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledRfqOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "RfqOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "addrs",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "RfqOrderOriginsAllowed",
    type: "event",
  },
  {
    inputs: [],
    name: "EIP712_DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_FEE_MULTIPLIER",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "_fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "bool",
        name: "useSelfBalance",
        type: "bool",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "_fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetLimitOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetRfqOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelRfqOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getLimitOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolFeeMultiplier",
    outputs: [
      {
        internalType: "uint32",
        name: "multiplier",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getRfqOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "isValidOrderSigner",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedOrderSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "origins",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedRfqOrigins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "poolIds",
        type: "bytes32[]",
      },
    ],
    name: "transferProtocolFeesForPools",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101806040526200001b600160036000620002d260201b60201c565b610160908152503480156200002f57600080fd5b5060405162007e6438038062007e64833981810160405281019062000055919062000393565b8484846040516200006690620002fc565b604051809103906000f08015801562000083573d6000803e3d6000fd5b5084848484848483838383838383838c808060004690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba4277f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c83856040516020016200011595949392919062000474565b6040516020818303038152906040528051906020012060808181525050505050508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1663f2541a8c6040518163ffffffff1660e01b815260040160206040518083038186803b158015620001b457600080fd5b505afa158015620001c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ef919062000415565b60e081815250508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508063ffffffff1660a08163ffffffff1660e01b8152505050505050505050503073ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050505050505050505050505062000601565b60008163ffffffff1660208463ffffffff16901b60408663ffffffff16901b171790509392505050565b60d98062007d8b83390190565b6000815190506200031a8162000565565b92915050565b60008151905062000331816200057f565b92915050565b600081519050620003488162000599565b92915050565b6000815190506200035f81620005b3565b92915050565b6000815190506200037681620005cd565b92915050565b6000815190506200038d81620005e7565b92915050565b600080600080600060a08688031215620003ac57600080fd5b6000620003bc8882890162000309565b9550506020620003cf888289016200034e565b9450506040620003e28882890162000365565b9350506060620003f58882890162000337565b925050608062000408888289016200037c565b9150509295509295909350565b6000602082840312156200042857600080fd5b6000620004388482850162000320565b91505092915050565b6200044c81620004d1565b82525050565b6200045d81620004e5565b82525050565b6200046e816200054b565b82525050565b600060a0820190506200048b600083018862000452565b6200049a602083018762000452565b620004a9604083018662000452565b620004b8606083018562000463565b620004c7608083018462000441565b9695505050505050565b6000620004de826200052b565b9050919050565b6000819050919050565b6000620004fc82620004d1565b9050919050565b60006200051082620004d1565b9050919050565b60006200052482620004d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6200057081620004d1565b81146200057c57600080fd5b50565b6200058a81620004e5565b81146200059657600080fd5b50565b620005a481620004ef565b8114620005b057600080fd5b50565b620005be8162000503565b8114620005ca57600080fd5b50565b620005d88162000517565b8114620005e457600080fd5b50565b620005f28162000555565b8114620005fe57600080fd5b50565b60805160a05160e01c60c05160601c60e0516101005160601c6101205160601c6101405160601c610160516177096200068260003980610911525080613a81525080612bde525080612b2a525080614bb0525080612a7b5280614b8f525080610f5052806116ec5280614b5d525080611f2352806123b152506177096000f3fe60806040526004361061020f5760003560e01c80639a4f809c11610118578063b4658bfb116100a0578063ea7faa611161006f578063ea7faa6114610820578063f6274f6614610849578063f6e0f6a51461087a578063fd5f995b146108a3578063fe55a3ef146108cc5761020f565b8063b4658bfb14610750578063d0a55fb01461078f578063dab400f3146107b8578063dd11d225146107e35761020f565b8063aa6b21cd116100e7578063aa6b21cd14610643578063aa77476c14610681578063ad354eeb146106bf578063b09f1fb1146106fe578063b10a33f4146107275761020f565b80639a4f809c1461059d5780639baa45a8146105c65780639f0434f5146105ef578063a0edcef5146106185761020f565b8063487b5c201161019b57806386a0c8d71161016a57806386a0c8d7146104b35780638fd3ab80146104dc5780639240529c14610507578063935c82a41461053757806395480889146105605761020f565b8063487b5c20146103f75780636ae4b4f7146104225780636b52a4a81461044d5780637d49ec1a1461048a5761020f565b8063346693c5116101e2578063346693c5146102e457806337f381d8146103215780633cd2f02614610360578063414e4ccf14610389578063438cdfc5146103ba5761020f565b8063016a6d6514610214578063031b905c146102515780630f0e8cf71461027c5780631fb09795146102a5575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190615d7c565b6108f5565b6040516102489190616af4565b60405180910390f35b34801561025d57600080fd5b5061026661090f565b6040516102739190616fb8565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e919061597c565b610933565b005b3480156102b157600080fd5b506102cc60048036038101906102c79190615c21565b6109e6565b6040516102db93929190616f12565b60405180910390f35b3480156102f057600080fd5b5061030b60048036038101906103069190615d7c565b610b01565b6040516103189190616ef7565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190615da6565b610c6c565b60405161035793929190616f12565b60405180910390f35b34801561036c57600080fd5b5061038760048036038101906103829190615937565b610d77565b005b6103a3600480360381019061039e9190615cb1565b610db0565b6040516103b1929190616f8f565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190615de4565b610e47565b6040516103ee9190616f74565b60405180910390f35b34801561040357600080fd5b5061040c610f4c565b6040516104199190616ffc565b60405180910390f35b34801561042e57600080fd5b50610437610f74565b6040516104449190616e0a565b60405180910390f35b34801561045957600080fd5b50610474600480360381019061046f919061575d565b610fad565b6040516104819190616ad9565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac9190615bf7565b61104a565b005b3480156104bf57600080fd5b506104da60048036038101906104d5919061597c565b6110d1565b005b3480156104e857600080fd5b506104f1611184565b6040516104fe9190616d3d565b60405180910390f35b610521600480360381019061051c9190615c5f565b611383565b60405161052e9190616f74565b60405180910390f35b34801561054357600080fd5b5061055e60048036038101906105599190615880565b61148c565b005b34801561056c57600080fd5b5061058760048036038101906105829190615bf7565b6114bf565b6040516105949190616ef7565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf9190615ba8565b6115cd565b005b3480156105d257600080fd5b506105ed60048036038101906105e89190615a88565b6115de565b005b3480156105fb57600080fd5b5061061660048036038101906106119190615799565b611615565b005b34801561062457600080fd5b5061062d6116ea565b60405161063a9190616ffc565b60405180910390f35b34801561064f57600080fd5b5061066a60048036038101906106659190615e36565b61170e565b604051610678929190616f8f565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190615de4565b6117ae565b6040516106b6929190616f8f565b60405180910390f35b3480156106cb57600080fd5b506106e660048036038101906106e19190615ac9565b61184c565b6040516106f593929190616a8d565b60405180910390f35b34801561070a57600080fd5b50610725600480360381019061072091906158e3565b611ad6565b005b34801561073357600080fd5b5061074e60048036038101906107499190615880565b611c53565b005b34801561075c57600080fd5b5061077760048036038101906107729190615a13565b611c86565b60405161078693929190616a8d565b60405180910390f35b34801561079b57600080fd5b506107b660048036038101906107b19190615ba8565b611f10565b005b3480156107c457600080fd5b506107cd611f21565b6040516107da9190616af4565b60405180910390f35b3480156107ef57600080fd5b5061080a60048036038101906108059190615bf7565b611f45565b6040516108179190616af4565b60405180910390f35b34801561082c57600080fd5b5061084760048036038101906108429190615844565b611f5f565b005b610863600480360381019061085e9190615c5f565b612041565b604051610871929190616f8f565b60405180910390f35b34801561088657600080fd5b506108a1600480360381019061089c9190615b3e565b6120e3565b005b3480156108af57600080fd5b506108ca60048036038101906108c59190615799565b61211a565b005b3480156108d857600080fd5b506108f360048036038101906108ee9190615d7c565b6121ef565b005b600061090861090383612276565b6123ad565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b81518351148015610945575080518351145b610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90616e6c565b60405180910390fd5b60005b83518110156109e0576109d5338583815181106109a057fe5b60200260200101518584815181106109b457fe5b60200260200101518585815181106109c857fe5b60200260200101516123ff565b806001019050610987565b50505050565b6109ee614ec7565b6000806109fa856114bf565b9250610a8b6040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff168152602001858152506125eb565b91506000610aad846000015186803603810190610aa89190615ec5565b612724565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff161480610af75750610af68660a0015182610fad565b5b9150509250925092565b610b09614ec7565b610b12826108f5565b8160000181815250506000610b256128b8565b6002016000846080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c09828460600151856101000151866101200151856128ce565b600073ffffffffffffffffffffffffffffffffffffffff168360c0015173ffffffffffffffffffffffffffffffffffffffff161415610c6657600082602001906004811115610c5457fe5b90816004811115610c6157fe5b815250505b50919050565b610c74614ec7565b600080610c8085610b01565b9250610d116040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff168152602001858152506125eb565b91506000610d23846000015186612724565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff161480610d6d5750610d6c866080015182610fad565b5b9150509250925092565b60005b82829050811015610dab57610da0838383818110610d9457fe5b90506020020135612a77565b806001019050610d7a565b505050565b600080610dbb614f08565b610e286040518060a001604052808a8152602001898152602001886fffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815250612c74565b9050806020015181604001518093508194505050509550959350505050565b6000610e51614f08565b610ec76040518060c00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff168152506131dd565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff161015610f3d57610f3c610f37610f08876108f5565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166136a5565b613743565b5b80604001519150509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6040518060400160405280600b81526020017f4c696d69744f726465727300000000000000000000000000000000000000000081525081565b6000610fb76128b8565b60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061105582611f45565b90508160a0015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156110a257506110a08260a0015133610fad565b155b156110bf576110be6110b982338560a0015161374b565b613743565b5b6110cd818360a001516137e9565b5050565b815183511480156110e3575080518351145b611122576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111990616e6c565b60405180910390fd5b60005b835181101561117e576111733385838151811061113e57fe5b602002602001015185848151811061115257fe5b602002602001015185858151811061116657fe5b6020026020010151613876565b806001019050611125565b50505050565b6000611196633cd2f02660e01b613a62565b6111a663f6274f6660e01b613a62565b6111b663aa77476c60e01b613a62565b6111c6639240529c60e01b613a62565b6111d663438cdfc560e01b613a62565b6111e663414e4ccf60e01b613a62565b6111f663aa6b21cd60e01b613a62565b611206637d49ec1a60e01b613a62565b61121663fe55a3ef60e01b613a62565b611226639baa45a860e01b613a62565b61123663f6e0f6a560e01b613a62565b61124663d0a55fb060e01b613a62565b61125663b10a33f460e01b613a62565b6112666386a0c8d760e01b613a62565b611276639f0434f560e01b613a62565b611286639a4f809c60e01b613a62565b61129663935c82a460e01b613a62565b6112a6630f0e8cf760e01b613a62565b6112b663fd5f995b60e01b613a62565b6112c6639548088960e01b613a62565b6112d663346693c560e01b613a62565b6112e663dd11d22560e01b613a62565b6112f663016a6d6560e01b613a62565b61130663487b5c2060e01b613a62565b61131663b09f1fb160e01b613a62565b611326631fb0979560e01b613a62565b6113366337f381d860e01b613a62565b61134663b4658bfb60e01b613a62565b61135663ad354eeb60e01b613a62565b61136663ea7faa6160e01b613a62565b611376636b52a4a860e01b613a62565b632c64c5ef60e01b905090565b600061138d614f08565b6113fa6040518060a00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250612c74565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff1610156114705761146f61146a61143b87611f45565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166136a5565b613743565b5b61147d8160000151613af2565b80604001519150509392505050565b6114968433610fad565b6114ad576114ac6114a78533613bd3565b613743565b5b6114b9848484846123ff565b50505050565b6114c7614ec7565b6114d082611f45565b81600001818152505060006114e36128b8565b60010160008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506115c7828460600151856101400151866101600151856128ce565b50919050565b6115d9338484846123ff565b505050565b60005b8151811015611611576116068282815181106115f957fe5b602002602001015161104a565b8060010190506115e1565b5050565b81518351148015611627575080518351145b611666576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165d90616e6c565b60405180910390fd5b6116708433610fad565b611687576116866116818533613bd3565b613743565b5b60005b83518110156116e3576116d8858583815181106116a357fe5b60200260200101518584815181106116b757fe5b60200260200101518585815181106116cb57fe5b6020026020010151613876565b80600101905061168a565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600080611719614f08565b61178e6040518060c001604052808b81526020018a8152602001896fffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187151581526020018673ffffffffffffffffffffffffffffffffffffffff168152506131dd565b905080602001518160400151809350819450505050965096945050505050565b6000806117b9614f08565b61182f6040518060c00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff168152506131dd565b905080602001518160400151809350819450505050935093915050565b6060806060848490508787905014611899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189090616e2c565b60405180910390fd5b8686905067ffffffffffffffff811180156118b357600080fd5b506040519080825280602002602001820160405280156118ed57816020015b6118da614ec7565b8152602001906001900390816118d25790505b5092508686905067ffffffffffffffff8111801561190a57600080fd5b506040519080825280602002602001820160405280156119395781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff8111801561195657600080fd5b506040519080825280602002602001820160405280156119855781602001602082028036833780820191505090505b50905060005b87879050811015611acb573073ffffffffffffffffffffffffffffffffffffffff166337f381d88989848181106119be57fe5b905061014002018888858181106119d157fe5b9050608002016040518363ffffffff1660e01b81526004016119f4929190616f49565b60a06040518083038186803b158015611a0c57600080fd5b505afa925050508015611a3d57506040513d601f19601f82011682018060405250810190611a3a9190615d2d565b60015b611a4657611ac0565b82878581518110611a5357fe5b602002602001018190525081868581518110611a6b57fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611aaa57fe5b6020026020010190151590811515815250505050505b80600101905061198b565b509450945094915050565b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b90616e4c565b60405180910390fd5b6000611b4e6128b8565b905060005b8351811015611c1257828260030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110611bac57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611b53565b507f02dfead5eb769b298e82dd9650b31c40559a3d42701dbf53c931bc2682847c31338484604051611c46939291906169b8565b60405180910390a1505050565b611c5d8433610fad565b611c7457611c73611c6e8533613bd3565b613743565b5b611c8084848484613876565b50505050565b6060806060848490508787905014611cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cca90616e2c565b60405180910390fd5b8686905067ffffffffffffffff81118015611ced57600080fd5b50604051908082528060200260200182016040528015611d2757816020015b611d14614ec7565b815260200190600190039081611d0c5790505b5092508686905067ffffffffffffffff81118015611d4457600080fd5b50604051908082528060200260200182016040528015611d735781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff81118015611d9057600080fd5b50604051908082528060200260200182016040528015611dbf5781602001602082028036833780820191505090505b50905060005b87879050811015611f05573073ffffffffffffffffffffffffffffffffffffffff16631fb09795898984818110611df857fe5b90506101800201888885818110611e0b57fe5b9050608002016040518363ffffffff1660e01b8152600401611e2e929190616ecc565b60a06040518083038186803b158015611e4657600080fd5b505afa925050508015611e7757506040513d601f19601f82011682018060405250810190611e749190615d2d565b60015b611e8057611efa565b82878581518110611e8d57fe5b602002602001018190525081868581518110611ea557fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611ee457fe5b6020026020010190151590811515815250505050505b806001019050611dc5565b509450945094915050565b611f1c33848484613876565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611f58611f5383613c6e565b6123ad565b9050919050565b6000611f696128b8565b9050818160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f6ea9dbe8b2cc119348716a9220a0742ad62b7884ecb0ff4b32cd508121fd937933848460405161203493929190616981565b60405180910390a1505050565b60008061204c614f08565b6120b96040518060a00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250612c74565b90506120c88160000151613af2565b80602001518160400151809350819450505050935093915050565b60005b81518110156121165761210b8282815181106120fe57fe5b60200260200101516121ef565b8060010190506120e6565b5050565b8151835114801561212c575080518351145b61216b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216290616e6c565b60405180910390fd5b6121758433610fad565b61218c5761218b6121868533613bd3565b613743565b5b60005b83518110156121e8576121dd858583815181106121a857fe5b60200260200101518584815181106121bc57fe5b60200260200101518585815181106121d057fe5b60200260200101516123ff565b80600101905061218f565b5050505050565b60006121fa826108f5565b9050816080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156122475750612245826080015133610fad565b155b156122645761226361225e8233856080015161374b565b613743565b5b6122728183608001516137e9565b5050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016123e29291906168c8565b604051602081830303815290604052805190602001209050919050565b60006124096128b8565b905060008160020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828111156124e6576124e56124e08483613de5565b613743565b5b828260020160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe7ffb1edfe79f4df716cb2dcad21cf2f31b104d816a7976ba1e6e4653c1efb1868686866040516125db9493929190616a1f565b60405180910390a1505050505050565b60008082604001516fffffffffffffffffffffffffffffffff1614806126275750600082606001516fffffffffffffffffffffffffffffffff16145b15612635576000905061271f565b6001600481111561264257fe5b826080015160200151600481111561265657fe5b14612664576000905061271f565b60006126bd8360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff16613e80565b90506126da816126d585602001518660000151613eb0565b613fd6565b905061271b6127168285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff16613fef565b614044565b9150505b919050565b6000612730838361407c565b6002600481111561273d57fe5b8260000151600481111561274d57fe5b14156127b557600183836020015184604001518560600151604051600081526020016040526040516127829493929190616cf8565b6020604051602081039080840390855afa1580156127a4573d6000803e3d6000fd5b505050602060405103519050612869565b600360048111156127c257fe5b826000015160048111156127d257fe5b14156128685760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c6000209050600181846020015185604001518660600151604051600081526020016040526040516128389493929190616cf8565b6020604051602081039080840390855afa15801561285a573d6000803e3d6000fd5b505050602060405103519150505b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128b2576128b16128ac6005856141a7565b613743565b5b92915050565b6000806128c56007614242565b90508091505090565b60006128d86128b8565b90506000816000016000886000015181526020019081526020016000205490508087604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050856fffffffffffffffffffffffffffffffff1687604001516fffffffffffffffffffffffffffffffff16106129815760028760200190600481111561296957fe5b9081600481111561297657fe5b815250505050612a70565b60007f80000000000000000000000000000000000000000000000000000000000000008216146129d5576003876020019060048111156129bd57fe5b908160048111156129ca57fe5b815250505050612a70565b504267ffffffffffffffff168467ffffffffffffffff1611612a1a57600486602001906004811115612a0357fe5b90816004811115612a1057fe5b8152505050612a70565b82821115612a4b57600386602001906004811115612a3457fe5b90816004811115612a4157fe5b8152505050612a70565b600186602001906004811115612a5d57fe5b90816004811115612a6a57fe5b81525050505b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663319bed9a836040518263ffffffff1660e01b8152600401612ad29190616af4565b602060405180830381600087803b158015612aec57600080fd5b505af1158015612b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b249190615b7f565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401612b81919061692f565b60206040518083038186803b158015612b9957600080fd5b505afa158015612bad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd19190615eee565b90506001811115612c6f577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3b4a3278384600185036040518463ffffffff1660e01b8152600401612c3c9392919061694a565b600060405180830381600087803b158015612c5657600080fd5b505af1158015612c6a573d6000803e3d6000fd5b505050505b505050565b612c7c614f08565b612c84614ec7565b612c9183600001516114bf565b905060016004811115612ca057fe5b81602001516004811115612cb057fe5b14612cdb57612cda612cd5826000015183602001516004811115612cd057fe5b61425e565b613743565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614158015612d585750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612d8157612d80612d7b82600001518560600151866000015160c001516142f9565b613743565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614158015612dfe5750826080015173ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612e2757612e26612e2182600001518560800151866000015160e00151614397565b613743565b5b6000612e3b82600001518560200151612724565b9050836000015160a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612e905750612e8e846000015160a0015182610fad565b155b15612eb557612eb4612eaf836000015183876000015160a00151614435565b613743565b5b50612ec8836000015161012001516144d3565b82600001818152505061301160405180610140016040528083600001518152602001856000015160a0015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff168152506145b8565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250505060008360000151608001516fffffffffffffffffffffffffffffffff16111561314a576130e382602001516fffffffffffffffffffffffffffffffff168460000151606001516fffffffffffffffffffffffffffffffff168560000151608001516fffffffffffffffffffffffffffffffff16613e80565b82606001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505061314983600001516020015184606001518560000151610100015185606001516fffffffffffffffffffffffffffffffff166147a5565b5b7fab614d2b738543c0ea21f56347cf696a3a0c42a7cbec3212a5ca22a4dcff21248160000151846000015160a00151856060015186600001516101000151876000015160000151886000015160200151886020015189604001518a606001518b600001518d6000015161012001516040516131cf9b9a99989796959493929190616b6f565b60405180910390a150919050565b6131e5614f08565b6131ed614ec7565b6131fa8360000151610b01565b90506001600481111561320957fe5b8160200151600481111561321957fe5b146132445761324361323e82600001518360200151600481111561323957fe5b61425e565b613743565b5b600061324e6128b8565b90503273ffffffffffffffffffffffffffffffffffffffff16846000015160c0015173ffffffffffffffffffffffffffffffffffffffff16141580156133255750806003016000856000015160c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561334a57613349613344836000015132876000015160c001516148c3565b613743565b5b50600073ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff16141580156133c85750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff1614155b156133f1576133f06133eb82600001518560600151866000015160a001516142f9565b613743565b5b600061340582600001518560200151612724565b905083600001516080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561345a575061345884600001516080015182610fad565b155b1561347f5761347e613479836000015183876000015160800151614435565b613743565b5b506135d06040518061014001604052808360000151815260200185600001516080015173ffffffffffffffffffffffffffffffffffffffff16815260200185608001516134d05785606001516134d2565b305b73ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff168152506145b8565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050507f829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c3281600001518460000151608001518560600151866000015160000151876000015160200151876020015188604001518a6000015160e00151604051613697989796959493929190616c1a565b60405180910390a150919050565b60607f21948612b5ef214ec0508df4901600e07a810a371be76b25d59ade73826e3d978484846040516024016136dd93929190616c98565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b60607f88b2c08e4a5f57d416ad23dad18c20497ccfe684b1379b28fd564adaf582b80f84848460405160240161378393929190616b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60006137f36128b8565b90507f8000000000000000000000000000000000000000000000000000000000000000816000016000858152602001908152602001600020600082825417925050819055507fa6eb7cdc219e1518ced964e9a34e61d68a94e4f1569db3e84256ba981ba527538383604051613869929190616b0f565b60405180910390a1505050565b60006138806128b8565b905060008160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281111561395d5761395c6139578483613de5565b613743565b5b828260010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa91fe7ae62fce669df2c7f880f8c14d178531aae72515558e5c948e37c32a57286868686604051613a529493929190616a1f565b60405180910390a1505050505050565b3073ffffffffffffffffffffffffffffffffffffffff16636eb224cb827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401613abd929190616d58565b600060405180830381600087803b158015613ad757600080fd5b505af1158015613aeb573d6000803e3d6000fd5b5050505050565b8034118015613b2d57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15613bd0576000613b47823461496190919063ffffffff16565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051613b6f906168ff565b60006040518083038185875af1925050503d8060008114613bac576040519150601f19603f3d011682016040523d82523d6000602084013e613bb1565b606091505b5050905080613bcd57613bcc613bc7338461498b565b613743565b5b50505b50565b60607f84356db366796dc6e2aeb1ad74b631fe4e5ec6a650464da6059e9f95c8810a108383604051602401613c099291906169f6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b60607fb12bc7e7d341f4431d6faf05f991ee3b779183e341b24243064e10c886cd18738383604051602401613e1b929190616fd3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6000613ea783613e998487614a2690919063ffffffff16565b614a7090919063ffffffff16565b90509392505050565b6000613fce8373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401613ef09291906169f6565b60206040518083038186803b158015613f0857600080fd5b505afa158015613f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f409190615eee565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401613f799190616914565b60206040518083038186803b158015613f9157600080fd5b505afa158015613fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc99190615eee565b613fd6565b905092915050565b6000818310613fe55781613fe7565b825b905092915050565b600061403b8361402d61400c60018761496190919063ffffffff16565b61401f8689614a2690919063ffffffff16565b614aa790919063ffffffff16565b614a7090919063ffffffff16565b90509392505050565b60006fffffffffffffffffffffffffffffffff80168211156140745761407361406e600384614ad6565b613743565b5b819050919050565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816040015160001c1015806140e65750600160027ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816140d957fe5b0401816060015160001c10155b156140ff576140fe6140f96005846141a7565b613743565b5b6000600481111561410c57fe5b8160000151600481111561411c57fe5b1415614136576141356141306003846141a7565b613743565b5b6001600481111561414357fe5b8160000151600481111561415357fe5b141561416d5761416c6141676000846141a7565b613743565b5b60048081111561417957fe5b8160000151600481111561418957fe5b14156141a3576141a261419d6002846141a7565b613743565b5b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd83836040516024016141dd929190616de1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006080600183600a81111561425457fe5b01901b9050919050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c940008383604051602401614294929190616ccf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa639684848460405160240161433193929190616b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607f15e6a383bb02d79ee933b927fbecba78cdde16cba84b94a99661f44bcce3b7368484846040516024016143cf93929190616b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f712484848460405160240161446d93929190616b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6000806144de614b58565b905060008114156144f35760009150506145b3565b60006144fe84614b88565b905060008173ffffffffffffffffffffffffffffffffffffffff1683604051614526906168ff565b60006040518083038185875af1925050503d8060008114614563576040519150601f19603f3d011682016040523d82523d6000602084013e614568565b606091505b50509050806145ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016145a390616eac565b60405180910390fd5b8293505050505b919050565b6000806145f78361010001516145f28561012001518660e001516fffffffffffffffffffffffffffffffff16614bdc90919063ffffffff16565b614c4e565b9150614642826fffffffffffffffffffffffffffffffff168460e001516fffffffffffffffffffffffffffffffff168560c001516fffffffffffffffffffffffffffffffff16613e80565b90506000826fffffffffffffffffffffffffffffffff16148061467757506000816fffffffffffffffffffffffffffffffff16145b1561468857600080915091506147a0565b6146b2828461012001516fffffffffffffffffffffffffffffffff16614c8b90919063ffffffff16565b6fffffffffffffffffffffffffffffffff166146cc6128b8565b600001600085600001518152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16141561474a576147458360a001518460200151846fffffffffffffffffffffffffffffffff16614d02565b614775565b6147748360a0015184604001518560200151856fffffffffffffffffffffffffffffffff166147a5565b5b61479f836080015184602001518560600151846fffffffffffffffffffffffffffffffff166147a5565b5b915091565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161480b90616e8c565b60405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d600183511460208210151681151782169150816148ba57806000843e8083fd5b50505050505050565b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b16348484846040516024016148fb93929190616b38565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6000828211156149805761497f61497a60028585614e03565b613743565b5b818303905092915050565b60607fbde95cc2119e0200d80642397198abfcf98e6e4dddd0de9c6320d86252ad40ab83836040516024016149c1929190616a64565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600080831415614a395760009050614a6a565b6000828402905082848281614a4a57fe5b0414614a6557614a64614a5f60018686614e03565b613743565b5b809150505b92915050565b600080821415614a8f57614a8e614a8960038585614e03565b613743565b5b6000828481614a9a57fe5b0490508091505092915050565b600080828401905083811015614acc57614acb614ac660008686614e03565b613743565b5b8091505092915050565b606063c996af7b60e01b8383604051602401614af3929190616db8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60003a7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1602905090565b6000614bd57f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084614e88565b9050919050565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115614c4357614c42614c3d6002856fffffffffffffffffffffffffffffffff16856fffffffffffffffffffffffffffffffff16614e03565b613743565b5b818303905092915050565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610614c815781614c83565b825b905092915050565b6000808284019050836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015614cf857614cf7614cf26000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16614e03565b613743565b5b8091505092915050565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614d6890616e8c565b60405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d60018351146020821015168115178216915081614dfb57806000843e8083fd5b505050505050565b606063e946c1bb60e01b848484604051602401614e2293929190616d81565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600060ff60f81b848385604051602001614ea5949392919061687a565b6040516020818303038152906040528051906020012060001c90509392505050565b60405180606001604052806000801916815260200160006004811115614ee957fe5b815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180608001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b600081359050614f75816175e4565b92915050565b600082601f830112614f8c57600080fd5b8135614f9f614f9a82617044565b617017565b91508181835260208401935060208101905083856020840282011115614fc457600080fd5b60005b83811015614ff45781614fda8882614f66565b845260208401935060208301925050600181019050614fc7565b5050505092915050565b60008083601f84011261501057600080fd5b8235905067ffffffffffffffff81111561502957600080fd5b60208301915083602082028301111561504157600080fd5b9250929050565b600082601f83011261505957600080fd5b813561506c6150678261706c565b617017565b9150818183526020840193506020810190508385602084028201111561509157600080fd5b60005b838110156150c157816150a788826153a1565b845260208401935060208301925050600181019050615094565b5050505092915050565b60008083601f8401126150dd57600080fd5b8235905067ffffffffffffffff8111156150f657600080fd5b6020830191508361018082028301111561510f57600080fd5b9250929050565b600082601f83011261512757600080fd5b813561513a61513582617094565b617017565b915081818352602084019350602081019050838561018084028201111561516057600080fd5b60005b83811015615191578161517688826153e0565b84526020840193506101808301925050600181019050615163565b5050505092915050565b60008083601f8401126151ad57600080fd5b8235905067ffffffffffffffff8111156151c657600080fd5b602083019150836101408202830111156151df57600080fd5b9250929050565b600082601f8301126151f757600080fd5b813561520a615205826170bc565b617017565b915081818352602084019350602081019050838561014084028201111561523057600080fd5b60005b838110156152615781615246888261555e565b84526020840193506101408301925050600181019050615233565b5050505092915050565b60008083601f84011261527d57600080fd5b8235905067ffffffffffffffff81111561529657600080fd5b6020830191508360808202830111156152ae57600080fd5b9250929050565b600082601f8301126152c657600080fd5b81356152d96152d4826170e4565b617017565b915081818352602084019350602081019050838560208402820111156152fe57600080fd5b60005b8381101561532e57816153148882615709565b845260208401935060208301925050600181019050615301565b5050505092915050565b600081359050615347816175fb565b92915050565b60008151905061535c816175fb565b92915050565b60008135905061537181617612565b92915050565b60008151905061538681617612565b92915050565b60008151905061539b81617629565b92915050565b6000813590506153b081617640565b92915050565b6000815190506153c581617657565b92915050565b6000813590506153da81617667565b92915050565b600061018082840312156153f357600080fd5b6153fe610180617017565b9050600061540e848285016153a1565b6000830152506020615422848285016153a1565b6020830152506040615436848285016156df565b604083015250606061544a848285016156df565b606083015250608061545e848285016156df565b60808301525060a061547284828501614f66565b60a08301525060c061548684828501614f66565b60c08301525060e061549a84828501614f66565b60e0830152506101006154af84828501614f66565b610100830152506101206154c584828501615362565b610120830152506101406154db84828501615733565b610140830152506101606154f184828501615709565b6101608301525092915050565b60006060828403121561551057600080fd5b61551a6060617017565b9050600061552a84828501615377565b600083015250602061553e848285016153b6565b6020830152506040615552848285016156f4565b60408301525092915050565b6000610140828403121561557157600080fd5b61557c610140617017565b9050600061558c848285016153a1565b60008301525060206155a0848285016153a1565b60208301525060406155b4848285016156df565b60408301525060606155c8848285016156df565b60608301525060806155dc84828501614f66565b60808301525060a06155f084828501614f66565b60a08301525060c061560484828501614f66565b60c08301525060e061561884828501615362565b60e08301525061010061562d84828501615733565b6101008301525061012061564384828501615709565b6101208301525092915050565b60006080828403121561566257600080fd5b81905092915050565b60006080828403121561567d57600080fd5b6156876080617017565b90506000615697848285016153cb565b60008301525060206156ab84828501615748565b60208301525060406156bf84828501615362565b60408301525060606156d384828501615362565b60608301525092915050565b6000813590506156ee81617677565b92915050565b60008151905061570381617677565b92915050565b6000813590506157188161768e565b92915050565b60008151905061572d8161768e565b92915050565b600081359050615742816176a5565b92915050565b600081359050615757816176bc565b92915050565b6000806040838503121561577057600080fd5b600061577e85828601614f66565b925050602061578f85828601614f66565b9150509250929050565b600080600080608085870312156157af57600080fd5b60006157bd87828801614f66565b945050602085013567ffffffffffffffff8111156157da57600080fd5b6157e687828801615048565b935050604085013567ffffffffffffffff81111561580357600080fd5b61580f87828801615048565b925050606085013567ffffffffffffffff81111561582c57600080fd5b615838878288016152b5565b91505092959194509250565b6000806040838503121561585757600080fd5b600061586585828601614f66565b925050602061587685828601615338565b9150509250929050565b6000806000806080858703121561589657600080fd5b60006158a487828801614f66565b94505060206158b5878288016153a1565b93505060406158c6878288016153a1565b92505060606158d787828801615709565b91505092959194509250565b600080604083850312156158f657600080fd5b600083013567ffffffffffffffff81111561591057600080fd5b61591c85828601614f7b565b925050602061592d85828601615338565b9150509250929050565b6000806020838503121561594a57600080fd5b600083013567ffffffffffffffff81111561596457600080fd5b61597085828601614ffe565b92509250509250929050565b60008060006060848603121561599157600080fd5b600084013567ffffffffffffffff8111156159ab57600080fd5b6159b786828701615048565b935050602084013567ffffffffffffffff8111156159d457600080fd5b6159e086828701615048565b925050604084013567ffffffffffffffff8111156159fd57600080fd5b615a09868287016152b5565b9150509250925092565b60008060008060408587031215615a2957600080fd5b600085013567ffffffffffffffff811115615a4357600080fd5b615a4f878288016150cb565b9450945050602085013567ffffffffffffffff811115615a6e57600080fd5b615a7a8782880161526b565b925092505092959194509250565b600060208284031215615a9a57600080fd5b600082013567ffffffffffffffff811115615ab457600080fd5b615ac084828501615116565b91505092915050565b60008060008060408587031215615adf57600080fd5b600085013567ffffffffffffffff811115615af957600080fd5b615b058782880161519b565b9450945050602085013567ffffffffffffffff811115615b2457600080fd5b615b308782880161526b565b925092505092959194509250565b600060208284031215615b5057600080fd5b600082013567ffffffffffffffff811115615b6a57600080fd5b615b76848285016151e6565b91505092915050565b600060208284031215615b9157600080fd5b6000615b9f8482850161538c565b91505092915050565b600080600060608486031215615bbd57600080fd5b6000615bcb868287016153a1565b9350506020615bdc868287016153a1565b9250506040615bed86828701615709565b9150509250925092565b60006101808284031215615c0a57600080fd5b6000615c18848285016153e0565b91505092915050565b6000806102008385031215615c3557600080fd5b6000615c43858286016153e0565b925050610180615c5585828601615650565b9150509250929050565b60008060006102208486031215615c7557600080fd5b6000615c83868287016153e0565b935050610180615c958682870161566b565b925050610200615ca7868287016156df565b9150509250925092565b60008060008060006102608688031215615cca57600080fd5b6000615cd8888289016153e0565b955050610180615cea8882890161566b565b945050610200615cfc888289016156df565b935050610220615d0e88828901614f66565b925050610240615d2088828901614f66565b9150509295509295909350565b600080600060a08486031215615d4257600080fd5b6000615d50868287016154fe565b9350506060615d61868287016156f4565b9250506080615d728682870161534d565b9150509250925092565b60006101408284031215615d8f57600080fd5b6000615d9d8482850161555e565b91505092915050565b6000806101c08385031215615dba57600080fd5b6000615dc88582860161555e565b925050610140615dda8582860161566b565b9150509250929050565b60008060006101e08486031215615dfa57600080fd5b6000615e088682870161555e565b935050610140615e1a8682870161566b565b9250506101c0615e2c868287016156df565b9150509250925092565b6000806000806000806102408789031215615e5057600080fd5b6000615e5e89828a0161555e565b965050610140615e7089828a0161566b565b9550506101c0615e8289828a016156df565b9450506101e0615e9489828a01614f66565b935050610200615ea689828a01615338565b925050610220615eb889828a01614f66565b9150509295509295509295565b600060808284031215615ed757600080fd5b6000615ee58482850161566b565b91505092915050565b600060208284031215615f0057600080fd5b6000615f0e8482850161571e565b91505092915050565b6000615f238383615f86565b60208301905092915050565b6000615f3b8383616133565b60208301905092915050565b6000615f5383836165ed565b60608301905092915050565b6000615f6b8383616802565b60208301905092915050565b615f8081617466565b82525050565b615f8f816172da565b82525050565b615f9e816172da565b82525050565b615fb5615fb0826172da565b61754d565b82525050565b6000615fc68261714c565b615fd081856171b7565b9350615fdb8361710c565b8060005b8381101561600c578151615ff38882615f17565b9750615ffe83617183565b925050600181019050615fdf565b5085935050505092915050565b600061602482617157565b61602e81856171c8565b93506160398361711c565b8060005b8381101561606a5781516160518882615f2f565b975061605c83617190565b92505060018101905061603d565b5085935050505092915050565b600061608282617162565b61608c81856171d9565b93506160978361712c565b8060005b838110156160c85781516160af8882615f47565b97506160ba8361719d565b92505060018101905061609b565b5085935050505092915050565b60006160e08261716d565b6160ea81856171ea565b93506160f58361713c565b8060005b8381101561612657815161610d8882615f5f565b9750616118836171aa565b9250506001810190506160f9565b5085935050505092915050565b61613c816172fe565b82525050565b61614b816172fe565b82525050565b61616261615d8261730a565b61755f565b82525050565b61617181617336565b82525050565b61618081617336565b82525050565b61619761619282617336565b617569565b82525050565b6161a681617340565b82525050565b6161b581617478565b82525050565b6161c48161749c565b82525050565b6161d3816174ae565b82525050565b6161e2816174c0565b82525050565b6161f1816174d2565b82525050565b616200816174e4565b82525050565b600061621182617178565b61621b8185617206565b935061622b81856020860161751a565b61623481617585565b840191505092915050565b600061624c600283617217565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b600061628c602c83617206565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160008301527f525241595f4c454e4754485300000000000000000000000000000000000000006020830152604082019050919050565b60006162f2602783617206565b91507f4e61746976654f7264657273466561747572652f4e4f5f434f4e54524143545f60008301527f4f524947494e53000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006163586000836171fb565b9150600082019050919050565b6000616372603883617206565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f5060008301527f4149525f4f52444552535f41525241595f4c454e4754485300000000000000006020830152604082019050919050565b60006163d8602483617206565b91507f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60008301527f53454c46000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061643e602783617206565b91507f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260008301527f5f46414c494544000000000000000000000000000000000000000000000000006020830152604082019050919050565b61018082016164a96000830183617250565b6164b660008501826161ac565b506164c46020830183617250565b6164d160208501826161ac565b506164df604083018361727e565b6164ec6040850182616802565b506164fa606083018361727e565b6165076060850182616802565b50616515608083018361727e565b6165226080850182616802565b5061653060a0830183617222565b61653d60a0850182615f86565b5061654b60c0830183617222565b61655860c0850182615f86565b5061656660e0830183617222565b61657360e0850182615f86565b50616582610100830183617222565b616590610100850182615f86565b5061659f610120830183617239565b6165ad610120850182616168565b506165bc6101408301836172ac565b6165ca61014085018261684d565b506165d9610160830183617295565b6165e7610160850182616820565b50505050565b6060820160008201516166036000850182616168565b50602082015161661660208501826161d9565b5060408201516166296040850182616802565b50505050565b6060820160008201516166456000850182616168565b50602082015161665860208501826161d9565b50604082015161666b6040850182616802565b50505050565b61014082016166836000830183617250565b61669060008501826161ac565b5061669e6020830183617250565b6166ab60208501826161ac565b506166b9604083018361727e565b6166c66040850182616802565b506166d4606083018361727e565b6166e16060850182616802565b506166ef6080830183617222565b6166fc6080850182615f86565b5061670a60a0830183617222565b61671760a0850182615f86565b5061672560c0830183617222565b61673260c0850182615f86565b5061674060e0830183617239565b61674d60e0850182616168565b5061675c6101008301836172ac565b61676a61010085018261684d565b50616779610120830183617295565b616787610120850182616820565b50505050565b6080820161679e6000830183617267565b6167ab60008501826161e8565b506167b960208301836172c3565b6167c6602085018261685c565b506167d46040830183617239565b6167e16040850182616168565b506167ef6060830183617239565b6167fc6060850182616168565b50505050565b61680b816173ef565b82525050565b61681a816173ef565b82525050565b6168298161742b565b82525050565b6168388161742b565b82525050565b61684781617435565b82525050565b61685681617445565b82525050565b61686581617459565b82525050565b61687481617459565b82525050565b60006168868287616151565b6001820191506168968286615fa4565b6014820191506168a68285616186565b6020820191506168b68284616186565b60208201915081905095945050505050565b60006168d38261623f565b91506168df8285616186565b6020820191506168ef8284616186565b6020820191508190509392505050565b600061690a8261634b565b9150819050919050565b60006020820190506169296000830184615f95565b92915050565b60006020820190506169446000830184615f77565b92915050565b600060608201905061695f6000830186615f77565b61696c6020830185615f77565b616979604083018461682f565b949350505050565b60006060820190506169966000830186615f77565b6169a36020830185615f95565b6169b06040830184616142565b949350505050565b60006060820190506169cd6000830186615f77565b81810360208301526169df8185615fbb565b90506169ee6040830184616142565b949350505050565b6000604082019050616a0b6000830185615f95565b616a186020830184615f95565b9392505050565b6000608082019050616a346000830187615f95565b616a416020830186615f95565b616a4e6040830185615f95565b616a5b606083018461682f565b95945050505050565b6000604082019050616a796000830185615f95565b616a86602083018461682f565b9392505050565b60006060820190508181036000830152616aa78186616077565b90508181036020830152616abb81856160d5565b90508181036040830152616acf8184616019565b9050949350505050565b6000602082019050616aee6000830184616142565b92915050565b6000602082019050616b096000830184616177565b92915050565b6000604082019050616b246000830185616177565b616b316020830184615f95565b9392505050565b6000606082019050616b4d6000830186616177565b616b5a6020830185615f95565b616b676040830184615f95565b949350505050565b600061016082019050616b85600083018e616177565b616b92602083018d615f95565b616b9f604083018c615f95565b616bac606083018b615f95565b616bb9608083018a615f95565b616bc660a0830189615f95565b616bd360c0830188616811565b616be060e0830187616811565b616bee610100830186616811565b616bfc61012083018561682f565b616c0a610140830184616177565b9c9b505050505050505050505050565b600061010082019050616c30600083018b616177565b616c3d602083018a615f95565b616c4a6040830189615f95565b616c576060830188615f95565b616c646080830187615f95565b616c7160a0830186616811565b616c7e60c0830185616811565b616c8b60e0830184616177565b9998505050505050505050565b6000606082019050616cad6000830186616177565b616cba602083018561682f565b616cc7604083018461682f565b949350505050565b6000604082019050616ce46000830185616177565b616cf1602083018461686b565b9392505050565b6000608082019050616d0d6000830187616177565b616d1a602083018661686b565b616d276040830185616177565b616d346060830184616177565b95945050505050565b6000602082019050616d52600083018461619d565b92915050565b6000604082019050616d6d600083018561619d565b616d7a6020830184615f95565b9392505050565b6000606082019050616d9660008301866161bb565b616da3602083018561682f565b616db0604083018461682f565b949350505050565b6000604082019050616dcd60008301856161ca565b616dda602083018461682f565b9392505050565b6000604082019050616df660008301856161f7565b616e036020830184616177565b9392505050565b60006020820190508181036000830152616e248184616206565b905092915050565b60006020820190508181036000830152616e458161627f565b9050919050565b60006020820190508181036000830152616e65816162e5565b9050919050565b60006020820190508181036000830152616e8581616365565b9050919050565b60006020820190508181036000830152616ea5816163cb565b9050919050565b60006020820190508181036000830152616ec581616431565b9050919050565b600061020082019050616ee26000830185616497565b616ef061018083018461678d565b9392505050565b6000606082019050616f0c600083018461662f565b92915050565b600060a082019050616f27600083018661662f565b616f346060830185616811565b616f416080830184616142565b949350505050565b60006101c082019050616f5f6000830185616671565b616f6d61014083018461678d565b9392505050565b6000602082019050616f896000830184616811565b92915050565b6000604082019050616fa46000830185616811565b616fb16020830184616811565b9392505050565b6000602082019050616fcd600083018461682f565b92915050565b6000604082019050616fe8600083018561682f565b616ff5602083018461682f565b9392505050565b6000602082019050617011600083018461683e565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561703a57600080fd5b8060405250919050565b600067ffffffffffffffff82111561705b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561708357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156170ab57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156170d357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156170fb57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006172316020840184614f66565b905092915050565b60006172486020840184615362565b905092915050565b600061725f60208401846153a1565b905092915050565b600061727660208401846153cb565b905092915050565b600061728d60208401846156df565b905092915050565b60006172a46020840184615709565b905092915050565b60006172bb6020840184615733565b905092915050565b60006172d26020840184615748565b905092915050565b60006172e58261740b565b9050919050565b60006172f78261740b565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000617377826172ec565b9050919050565b6000617389826172da565b9050919050565b600081905061739e826175a3565b919050565b60008190506173b1826175b0565b919050565b60008190506173c4826175bd565b919050565b60008190506173d7826175ca565b919050565b60008190506173ea826175d7565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b6000617471826174f6565b9050919050565b60006174838261748a565b9050919050565b60006174958261740b565b9050919050565b60006174a782617390565b9050919050565b60006174b9826173a3565b9050919050565b60006174cb826173b6565b9050919050565b60006174dd826173c9565b9050919050565b60006174ef826173dc565b9050919050565b600061750182617508565b9050919050565b60006175138261740b565b9050919050565b60005b8381101561753857808201518184015260208101905061751d565b83811115617547576000848401525b50505050565b600061755882617573565b9050919050565b6000819050919050565b6000819050919050565b600061757e82617596565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b600481106175ad57fe5b50565b600481106175ba57fe5b50565b600581106175c757fe5b50565b600581106175d457fe5b50565b600681106175e157fe5b50565b6175ed816172da565b81146175f857600080fd5b50565b617604816172fe565b811461760f57600080fd5b50565b61761b81617336565b811461762657600080fd5b50565b6176328161736c565b811461763d57600080fd5b50565b6176498161737e565b811461765457600080fd5b50565b6005811061766457600080fd5b50565b6005811061767457600080fd5b50565b617680816173ef565b811461768b57600080fd5b50565b6176978161742b565b81146176a257600080fd5b50565b6176ae81617445565b81146176b957600080fd5b50565b6176c581617459565b81146176d057600080fd5b5056fea26469706673582212204cc83176da93afa423fd929d9b907299a0663501a1c0f6fd42d77c2f21e941e964736f6c634300060c003360806040526000801b60005534801561001757600080fd5b5060b3806100266000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063f2541a8c14602d575b600080fd5b60336047565b604051603e9190605a565b60405180910390f35b60005481565b6054816073565b82525050565b6000602082019050606d6000830184604d565b92915050565b600081905091905056fea2646970667358221220b1b4b1f922022cacd868e94385b51803c9f922b5cc952ea8629c8670ce18350364736f6c634300060c0033";

type TestNativeOrdersFeatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestNativeOrdersFeatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestNativeOrdersFeature__factory extends ContractFactory {
  constructor(...args: TestNativeOrdersFeatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    zeroExAddress: string,
    weth: string,
    staking: string,
    _feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestNativeOrdersFeature> {
    return super.deploy(
      zeroExAddress,
      weth,
      staking,
      _feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    ) as Promise<TestNativeOrdersFeature>;
  }
  override getDeployTransaction(
    zeroExAddress: string,
    weth: string,
    staking: string,
    _feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      zeroExAddress,
      weth,
      staking,
      _feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    );
  }
  override attach(address: string): TestNativeOrdersFeature {
    return super.attach(address) as TestNativeOrdersFeature;
  }
  override connect(signer: Signer): TestNativeOrdersFeature__factory {
    return super.connect(signer) as TestNativeOrdersFeature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestNativeOrdersFeatureInterface {
    return new utils.Interface(_abi) as TestNativeOrdersFeatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestNativeOrdersFeature {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestNativeOrdersFeature;
  }
}
