/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestBridge,
  TestBridgeInterface,
} from "../../../contracts/test/TestBridge";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "xAsset_",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "yAsset_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "inputTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "outputTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "ERC20BridgeTransfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "bridgeTransferFrom",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "xAsset",
    outputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "yAsset",
    outputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161072a38038061072a833981810160405281019061003291906100bc565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250505050610153565b6000815190506100b68161013c565b92915050565b600080604083850312156100cf57600080fd5b60006100dd858286016100a7565b92505060206100ee858286016100a7565b9150509250929050565b60006101038261011c565b9050919050565b6000610115826100f8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101458161010a565b811461015057600080fd5b50565b60805160601c60a05160601c6105a061018a60003980610130528061023852508060b7528061010a528061025c52506105a06000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063c2df82e614610046578063c858540a14610076578063f280726b14610094575b600080fd5b610060600480360381019061005b9190610307565b6100b2565b60405161006d919061047a565b60405180910390f35b61007e610236565b60405161008b9190610495565b60405180910390f35b61009c61025a565b6040516100a99190610495565b60405180910390f35b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461012e577f0000000000000000000000000000000000000000000000000000000000000000610150565b7f00000000000000000000000000000000000000000000000000000000000000005b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161018d91906103fe565b60206040518083038186803b1580156101a557600080fd5b505afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd9190610399565b90507f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a9828a83898c8c60405161021896959493929190610419565b60405180910390a163decaf00060e01b925050509695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008135905061028d8161053c565b92915050565b60008083601f8401126102a557600080fd5b8235905067ffffffffffffffff8111156102be57600080fd5b6020830191508360018202830111156102d657600080fd5b9250929050565b6000813590506102ec81610553565b92915050565b60008151905061030181610553565b92915050565b60008060008060008060a0878903121561032057600080fd5b600061032e89828a0161027e565b965050602061033f89828a0161027e565b955050604061035089828a0161027e565b945050606061036189828a016102dd565b935050608087013567ffffffffffffffff81111561037e57600080fd5b61038a89828a01610293565b92509250509295509295509295565b6000602082840312156103ab57600080fd5b60006103b9848285016102f2565b91505092915050565b6103cb816104b0565b82525050565b6103da816104c2565b82525050565b6103e981610518565b82525050565b6103f88161050e565b82525050565b600060208201905061041360008301846103c2565b92915050565b600060c08201905061042e60008301896103c2565b61043b60208301886103c2565b61044860408301876103ef565b61045560608301866103ef565b61046260808301856103c2565b61046f60a08301846103c2565b979650505050505050565b600060208201905061048f60008301846103d1565b92915050565b60006020820190506104aa60008301846103e0565b92915050565b60006104bb826104ee565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105238261052a565b9050919050565b6000610535826104ee565b9050919050565b610545816104b0565b811461055057600080fd5b50565b61055c8161050e565b811461056757600080fd5b5056fea2646970667358221220fea051ae8a13e4a65c66931477c3c194d5dce1a70036e8d755c15241ef354e9064736f6c634300060c0033";

type TestBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestBridge__factory extends ContractFactory {
  constructor(...args: TestBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    xAsset_: string,
    yAsset_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestBridge> {
    return super.deploy(
      xAsset_,
      yAsset_,
      overrides || {}
    ) as Promise<TestBridge>;
  }
  override getDeployTransaction(
    xAsset_: string,
    yAsset_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(xAsset_, yAsset_, overrides || {});
  }
  override attach(address: string): TestBridge {
    return super.attach(address) as TestBridge;
  }
  override connect(signer: Signer): TestBridge__factory {
    return super.connect(signer) as TestBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBridgeInterface {
    return new utils.Interface(_abi) as TestBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestBridge {
    return new Contract(address, _abi, signerOrProvider) as TestBridge;
  }
}
