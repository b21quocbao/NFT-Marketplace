/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestLiquidityProvider,
  TestLiquidityProviderInterface,
} from "../../../../contracts/test/integration/TestLiquidityProvider";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethBalance",
        type: "uint256",
      },
    ],
    name: "SellEthForToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "inputTokenBalance",
        type: "uint256",
      },
    ],
    name: "SellTokenForEth",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "inputTokenBalance",
        type: "uint256",
      },
    ],
    name: "SellTokenForToken",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sellEthForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sellTokenForEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "sellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a87806100206000396000f3fe6080604052600436106100385760003560e01c806365d02b041461004457806369be90ec14610081578063b52e8458146100be5761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610698565b6100fb565b604051610078919061094a565b60405180910390f35b34801561008d57600080fd5b506100a860048036038101906100a39190610618565b6102ea565b6040516100b5919061094a565b60405180910390f35b3480156100ca57600080fd5b506100e560048036038101906100e0919061072a565b610401565b6040516100f2919061094a565b60405180910390f35b60007f72e1b68f223f767f8f4e75471718f528e74c571e73cb3e7d4620e1c5daa44488878787878b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161015b9190610829565b60206040518083038186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ab91906107d3565b6040516101bc959493929190610889565b60405180910390a160008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101ff9190610829565b60206040518083038186803b15801561021757600080fd5b505afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f91906107d3565b90508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b815260040161028c929190610921565b602060405180830381600087803b1580156102a657600080fd5b505af11580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906107aa565b50509695505050505050565b60007ff19658c26bb755dbf08298ecedda00e49e9d6b5d26968a394637c30849d2427f8686868973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103499190610829565b60206040518083038186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039991906107d3565b6040516103a99493929190610844565b60405180910390a18473ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156103f7573d6000803e3d6000fd5b5095945050505050565b60007f678ad43a49f074542215575fe2203b2d03f61a461d1cca15922445e58f2a9ca28686864760405161043894939291906108dc565b60405180910390a160008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161047b9190610829565b60206040518083038186803b15801561049357600080fd5b505afa1580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb91906107d3565b90508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87836040518363ffffffff1660e01b8152600401610508929190610921565b602060405180830381600087803b15801561052257600080fd5b505af1158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a91906107aa565b505095945050505050565b600081359050610574816109f5565b92915050565b60008135905061058981610a0c565b92915050565b60008151905061059e81610a23565b92915050565b60008083601f8401126105b657600080fd5b8235905067ffffffffffffffff8111156105cf57600080fd5b6020830191508360018202830111156105e757600080fd5b9250929050565b6000813590506105fd81610a3a565b92915050565b60008151905061061281610a3a565b92915050565b60008060008060006080868803121561063057600080fd5b600061063e88828901610565565b955050602061064f8882890161057a565b9450506040610660888289016105ee565b935050606086013567ffffffffffffffff81111561067d57600080fd5b610689888289016105a4565b92509250509295509295909350565b60008060008060008060a087890312156106b157600080fd5b60006106bf89828a01610565565b96505060206106d089828a01610565565b95505060406106e189828a01610565565b94505060606106f289828a016105ee565b935050608087013567ffffffffffffffff81111561070f57600080fd5b61071b89828a016105a4565b92509250509295509295509295565b60008060008060006080868803121561074257600080fd5b600061075088828901610565565b955050602061076188828901610565565b9450506040610772888289016105ee565b935050606086013567ffffffffffffffff81111561078f57600080fd5b61079b888289016105a4565b92509250509295509295909350565b6000602082840312156107bc57600080fd5b60006107ca8482850161058f565b91505092915050565b6000602082840312156107e557600080fd5b60006107f384828501610603565b91505092915050565b610805816109bf565b82525050565b61081481610965565b82525050565b610823816109b5565b82525050565b600060208201905061083e60008301846107fc565b92915050565b6000608082019050610859600083018761080b565b61086660208301866107fc565b610873604083018561081a565b610880606083018461081a565b95945050505050565b600060a08201905061089e600083018861080b565b6108ab602083018761080b565b6108b8604083018661080b565b6108c5606083018561081a565b6108d2608083018461081a565b9695505050505050565b60006080820190506108f1600083018761080b565b6108fe602083018661080b565b61090b604083018561081a565b610918606083018461081a565b95945050505050565b6000604082019050610936600083018561080b565b610943602083018461081a565b9392505050565b600060208201905061095f600083018461081a565b92915050565b600061097082610995565b9050919050565b600061098282610995565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109ca826109d1565b9050919050565b60006109dc826109e3565b9050919050565b60006109ee82610995565b9050919050565b6109fe81610965565b8114610a0957600080fd5b50565b610a1581610977565b8114610a2057600080fd5b50565b610a2c81610989565b8114610a3757600080fd5b50565b610a43816109b5565b8114610a4e57600080fd5b5056fea26469706673582212207b92840475c7df496f0d69b9705ed91d87202f5c1e2343df7ccb9f5530484dca64736f6c634300060c0033";

type TestLiquidityProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLiquidityProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLiquidityProvider__factory extends ContractFactory {
  constructor(...args: TestLiquidityProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLiquidityProvider> {
    return super.deploy(overrides || {}) as Promise<TestLiquidityProvider>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestLiquidityProvider {
    return super.attach(address) as TestLiquidityProvider;
  }
  override connect(signer: Signer): TestLiquidityProvider__factory {
    return super.connect(signer) as TestLiquidityProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLiquidityProviderInterface {
    return new utils.Interface(_abi) as TestLiquidityProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLiquidityProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestLiquidityProvider;
  }
}
