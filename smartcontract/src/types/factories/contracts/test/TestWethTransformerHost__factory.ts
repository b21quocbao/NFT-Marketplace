/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TestWethTransformerHost,
  TestWethTransformerHostInterface,
} from "../../../contracts/test/TestWethTransformerHost";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TestWeth",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wethAmount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20Transformer",
        name: "transformer",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "executeTransform",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20Transformer",
        name: "transformer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address payable",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IERC20Transformer.TransformContext",
        name: "context",
        type: "tuple",
      },
    ],
    name: "rawExecuteTransform",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610aff380380610aff83398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610108565b60008151905061007e816100f1565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100d1565b9050919050565b60006100ca826100ad565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b60805160601c6109da6101256000398061021a52506109da6000f3fe60806040526004361061002d5760003560e01c8063844e7c5b14610039578063b294020f1461006257610034565b3661003457005b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610481565b61007e565b005b61007c600480360381019061007791906104d5565b610210565b005b600060608373ffffffffffffffffffffffffffffffffffffffff1663832b24bb60e01b846040516024016100b2919061077d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161011c9190610716565b600060405180830381855af49150503d8060008114610157576040519150601f19603f3d011682016040523d82523d6000602084013e61015c565b606091505b5091509150816101705761016f81610397565b5b6313c9929e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906101ab9190610458565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461020a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102019061075d565b60405180910390fd5b50505050565b6000841461029a577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b50505050505b3073ffffffffffffffffffffffffffffffffffffffff1663844e7c5b8460405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152506040518363ffffffff1660e01b815260040161035f92919061072d565b600060405180830381600087803b15801561037957600080fd5b505af115801561038d573d6000803e3d6000fd5b5050505050505050565b805160208201fd5b6000813590506103ae81610948565b92915050565b6000815190506103c38161095f565b92915050565b60008083601f8401126103db57600080fd5b8235905067ffffffffffffffff8111156103f457600080fd5b60208301915083600182028301111561040c57600080fd5b9250929050565b60008135905061042281610976565b92915050565b60006060828403121561043a57600080fd5b81905092915050565b6000813590506104528161098d565b92915050565b60006020828403121561046a57600080fd5b6000610478848285016103b4565b91505092915050565b6000806040838503121561049457600080fd5b60006104a285828601610413565b925050602083013567ffffffffffffffff8111156104bf57600080fd5b6104cb85828601610428565b9150509250929050565b600080600080606085870312156104eb57600080fd5b60006104f987828801610443565b945050602061050a87828801610413565b935050604085013567ffffffffffffffff81111561052757600080fd5b610533878288016103c9565b925092505092959194509250565b61054a81610857565b82525050565b600061055c83856107aa565b93506105698385846108f5565b61057283610937565b840190509392505050565b60006105888261079f565b61059281856107aa565b93506105a2818560208601610904565b6105ab81610937565b840191505092915050565b60006105c18261079f565b6105cb81856107bb565b93506105db818560208601610904565b80840191505092915050565b6105f0816108d1565b82525050565b6000610603602e836107c6565b91507f546573745472616e73666f726d6572486f73742f494e56414c49445f5452414e60008301527f53464f524d45525f524553554c540000000000000000000000000000000000006020830152604082019050919050565b60006060830161066f60008401846107d7565b61067c6000860182610541565b5061068a60208401846107d7565b6106976020860182610541565b506106a560408401846107ee565b85830360408701526106b8838284610550565b925050508091505092915050565b60006060830160008301516106de6000860182610541565b5060208301516106f16020860182610541565b5060408301518482036040860152610709828261057d565b9150508091505092915050565b600061072282846105b6565b915081905092915050565b600060408201905061074260008301856105e7565b818103602083015261075481846106c6565b90509392505050565b60006020820190508181036000830152610776816105f6565b9050919050565b60006020820190508181036000830152610797818461065c565b905092915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006107e6602084018461039f565b905092915050565b6000808335600160200384360303811261080757600080fd5b83810192508235915060208301925067ffffffffffffffff82111561082b57600080fd5b60018202360384131561083d57600080fd5b509250929050565b6000610850826108a7565b9050919050565b6000610862826108a7565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006108a082610845565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108dc826108e3565b9050919050565b60006108ee826108a7565b9050919050565b82818337600083830152505050565b60005b83811015610922578082015181840152602081019050610907565b83811115610931576000848401525b50505050565b6000601f19601f8301169050919050565b61095181610857565b811461095c57600080fd5b50565b61096881610869565b811461097357600080fd5b50565b61097f81610895565b811461098a57600080fd5b50565b610996816108c7565b81146109a157600080fd5b5056fea264697066735822122005bb78a4994ae7f2b3efefb058a340bda0cfa28863cfd90759895ab938007b0264736f6c634300060c0033";

type TestWethTransformerHostConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWethTransformerHostConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWethTransformerHost__factory extends ContractFactory {
  constructor(...args: TestWethTransformerHostConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestWethTransformerHost> {
    return super.deploy(
      weth,
      overrides || {}
    ) as Promise<TestWethTransformerHost>;
  }
  override getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): TestWethTransformerHost {
    return super.attach(address) as TestWethTransformerHost;
  }
  override connect(signer: Signer): TestWethTransformerHost__factory {
    return super.connect(signer) as TestWethTransformerHost__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWethTransformerHostInterface {
    return new utils.Interface(_abi) as TestWethTransformerHostInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWethTransformerHost {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestWethTransformerHost;
  }
}
