/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  PayTakerTransformer,
  PayTakerTransformerInterface,
} from "../../../../contracts/src/transformers/PayTakerTransformer";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "deployer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "ethRecipient",
        type: "address",
      },
    ],
    name: "die",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IERC20Transformer.TransformContext",
        name: "context",
        type: "tuple",
      },
    ],
    name: "transform",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250503073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c60a05160601c610fca6100b7600039806102a552806102ff52508061021f528061027952806103445250610fca6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063832b24bb14610046578063c9353cb514610076578063d5f3948814610092575b600080fd5b610060600480360381019061005b9190610aef565b6100b0565b60405161006d9190610cf1565b60405180910390f35b610090600480360381019061008b9190610ac6565b61021d565b005b61009a610342565b6040516100a79190610c84565b60405180910390f35b60006100ba6108bb565b8280604001906100ca9190610d63565b8101906100d79190610b30565b905060005b81600001515181101561020c576000818360200151511161011d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610136565b8260200151828151811061012d57fe5b60200260200101515b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156101a3576101a0308460000151848151811061017457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661036690919063ffffffff16565b90505b60008114610200576101ff8560200160208101906101c19190610ac6565b82856000015185815181106101d257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166104279092919063ffffffff16565b5b508060010190506100dc565b506313c9929e60e01b915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576102a261029d337f00000000000000000000000000000000000000000000000000000000000000006104b2565b61054d565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461032957610328610323307f0000000000000000000000000000000000000000000000000000000000000000610555565b61054d565b5b8073ffffffffffffffffffffffffffffffffffffffff16ff5b7f000000000000000000000000000000000000000000000000000000000000000081565b6000610371836105f0565b15610395578173ffffffffffffffffffffffffffffffffffffffff16319050610421565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103ce9190610c84565b60206040518083038186803b1580156103e657600080fd5b505afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610b71565b90505b92915050565b610430836105f0565b15610481578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561047b573d6000803e3d6000fd5b506104ad565b6104ac82828573ffffffffffffffffffffffffffffffffffffffff1661063c9092919063ffffffff16565b5b505050565b60607f5cec653b364cca3880afa73ceff506d0651d11d26abbbe4a56460aa933b21b0883836040516024016104e8929190610c9f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b60607fb5cf2cd09307d6c717473134badbb9761c2c97d7565566c2a71eba6cd6fc514d838360405160240161058b929190610c9f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b606063a9059cbb60e01b8383604051602401610659929190610cc8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506106c284826106c8565b50505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516106f19190610c6d565b6000604051808303816000865af19150503d806000811461072e576040519150601f19603f3d011682016040523d82523d6000602084013e610733565b606091505b509150915081610747576107468161054d565b5b6000815114156107a2576000843b90506000811161079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190610d43565b60405180910390fd5b5050506107e2565b60208151106107d65760006107b88260006107e6565b905060018114156107cb575050506107e2565b6107d48261054d565b505b6107df8161054d565b50505b5050565b60006107f283836107fd565b60001c905092915050565b600060208201835110156108245761082361081e6005855160208601610836565b61054d565b5b60208201915081830151905092915050565b6060632800659560e01b84848460405160240161085593929190610d0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b604051806040016040528060608152602001606081525090565b6000813590506108e481610f4f565b92915050565b600082601f8301126108fb57600080fd5b813561090e61090982610de7565b610dba565b9150818183526020840193506020810190508385602084028201111561093357600080fd5b60005b83811015610963578161094988826109f0565b845260208401935060208301925050600181019050610936565b5050505092915050565b600082601f83011261097e57600080fd5b813561099161098c82610e0f565b610dba565b915081818352602084019350602081019050838560208402820111156109b657600080fd5b60005b838110156109e657816109cc8882610a9c565b8452602084019350602083019250506001810190506109b9565b5050505092915050565b6000813590506109ff81610f66565b92915050565b600060608284031215610a1757600080fd5b81905092915050565b600060408284031215610a3257600080fd5b610a3c6040610dba565b9050600082013567ffffffffffffffff811115610a5857600080fd5b610a64848285016108ea565b600083015250602082013567ffffffffffffffff811115610a8457600080fd5b610a908482850161096d565b60208301525092915050565b600081359050610aab81610f7d565b92915050565b600081519050610ac081610f7d565b92915050565b600060208284031215610ad857600080fd5b6000610ae6848285016108d5565b91505092915050565b600060208284031215610b0157600080fd5b600082013567ffffffffffffffff811115610b1b57600080fd5b610b2784828501610a05565b91505092915050565b600060208284031215610b4257600080fd5b600082013567ffffffffffffffff811115610b5c57600080fd5b610b6884828501610a20565b91505092915050565b600060208284031215610b8357600080fd5b6000610b9184828501610ab1565b91505092915050565b610ba381610e5e565b82525050565b610bb281610e82565b82525050565b6000610bc382610e37565b610bcd8185610e42565b9350610bdd818560208601610f0f565b80840191505092915050565b610bf281610efd565b82525050565b6000610c05602783610e4d565b91507f696e76616c696420746f6b656e20616464726573732c20636f6e7461696e732060008301527f6e6f20636f6465000000000000000000000000000000000000000000000000006020830152604082019050919050565b610c6781610ef3565b82525050565b6000610c798284610bb8565b915081905092915050565b6000602082019050610c996000830184610b9a565b92915050565b6000604082019050610cb46000830185610b9a565b610cc16020830184610b9a565b9392505050565b6000604082019050610cdd6000830185610b9a565b610cea6020830184610c5e565b9392505050565b6000602082019050610d066000830184610ba9565b92915050565b6000606082019050610d216000830186610be9565b610d2e6020830185610c5e565b610d3b6040830184610c5e565b949350505050565b60006020820190508181036000830152610d5c81610bf8565b9050919050565b60008083356001602003843603038112610d7c57600080fd5b80840192508235915067ffffffffffffffff821115610d9a57600080fd5b602083019250600182023603831315610db257600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff82111715610ddd57600080fd5b8060405250919050565b600067ffffffffffffffff821115610dfe57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115610e2657600080fd5b602082029050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610e6982610ed3565b9050919050565b6000610e7b82610ed3565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000610eb982610e5e565b9050919050565b6000819050610ece82610f42565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610f0882610ec0565b9050919050565b60005b83811015610f2d578082015181840152602081019050610f12565b83811115610f3c576000848401525b50505050565b60088110610f4c57fe5b50565b610f5881610e70565b8114610f6357600080fd5b50565b610f6f81610eae565b8114610f7a57600080fd5b50565b610f8681610ef3565b8114610f9157600080fd5b5056fea26469706673582212206eef91d56aac2997372a1d75d9dab53f2951847184d644bd0f60c269528cbc0064736f6c634300060c0033";

type PayTakerTransformerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PayTakerTransformerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PayTakerTransformer__factory extends ContractFactory {
  constructor(...args: PayTakerTransformerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PayTakerTransformer> {
    return super.deploy(overrides || {}) as Promise<PayTakerTransformer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PayTakerTransformer {
    return super.attach(address) as PayTakerTransformer;
  }
  override connect(signer: Signer): PayTakerTransformer__factory {
    return super.connect(signer) as PayTakerTransformer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PayTakerTransformerInterface {
    return new utils.Interface(_abi) as PayTakerTransformerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PayTakerTransformer {
    return new Contract(address, _abi, signerOrProvider) as PayTakerTransformer;
  }
}
