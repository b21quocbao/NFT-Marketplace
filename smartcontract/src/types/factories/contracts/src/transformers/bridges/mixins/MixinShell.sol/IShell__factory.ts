/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  IShell,
  IShellInterface,
} from "../../../../../../../contracts/src/transformers/bridges/mixins/MixinShell.sol/IShell";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "from",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minTargetAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "originSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "toAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IShell__factory {
  static readonly abi = _abi;
  static createInterface(): IShellInterface {
    return new utils.Interface(_abi) as IShellInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IShell {
    return new Contract(address, _abi, signerOrProvider) as IShell;
  }
}
