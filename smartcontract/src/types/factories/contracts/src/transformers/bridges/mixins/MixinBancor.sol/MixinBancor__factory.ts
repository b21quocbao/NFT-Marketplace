/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MixinBancor,
  MixinBancorInterface,
} from "../../../../../../../contracts/src/transformers/bridges/mixins/MixinBancor.sol/MixinBancor";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BANCOR_ETH_ADDRESS",
    outputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161021938038061021983398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610108565b60008151905061007e816100f1565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100d1565b9050919050565b60006100ca826100ad565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b60805160601c60fb61011e6000395060fb6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638dc669fa14602d575b600080fd5b60336047565b604051603e9190606c565b60405180910390f35b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60668160a5565b82525050565b6000602082019050607f6000830184605f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ae8260b5565b9050919050565b600060be826085565b905091905056fea2646970667358221220d5c55041ff050d006810c06a15c190e2db1cd166c5f832861914953365040a3264736f6c634300060c0033";

type MixinBancorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MixinBancorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MixinBancor__factory extends ContractFactory {
  constructor(...args: MixinBancorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MixinBancor> {
    return super.deploy(weth, overrides || {}) as Promise<MixinBancor>;
  }
  override getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): MixinBancor {
    return super.attach(address) as MixinBancor;
  }
  override connect(signer: Signer): MixinBancor__factory {
    return super.connect(signer) as MixinBancor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MixinBancorInterface {
    return new utils.Interface(_abi) as MixinBancorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MixinBancor {
    return new Contract(address, _abi, signerOrProvider) as MixinBancor;
  }
}
