/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  MixinLido,
  MixinLidoInterface,
} from "../../../../../../../contracts/src/transformers/bridges/mixins/MixinLido.sol/MixinLido";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161015d38038061015d83398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610108565b60008151905061007e816100f1565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100d1565b9050919050565b60006100ca826100ad565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100fa816100bf565b811461010557600080fd5b50565b60805160601c603f61011e60003950603f6000f3fe6080604052600080fdfea2646970667358221220271f783486872d0aaa46fb432655efacadb343dfe04e6484da6f8aeab08bc2bf64736f6c634300060c0033";

type MixinLidoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MixinLidoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MixinLido__factory extends ContractFactory {
  constructor(...args: MixinLidoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MixinLido> {
    return super.deploy(weth, overrides || {}) as Promise<MixinLido>;
  }
  override getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): MixinLido {
    return super.attach(address) as MixinLido;
  }
  override connect(signer: Signer): MixinLido__factory {
    return super.connect(signer) as MixinLido__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MixinLidoInterface {
    return new utils.Interface(_abi) as MixinLidoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MixinLido {
    return new Contract(address, _abi, signerOrProvider) as MixinLido;
  }
}
