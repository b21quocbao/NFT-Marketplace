/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  LiquidityProviderSandbox,
  LiquidityProviderSandboxInterface,
} from "../../../../contracts/src/external/LiquidityProviderSandbox";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidityProvider",
        name: "provider",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "executeSellEthForToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidityProvider",
        name: "provider",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "executeSellTokenForEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidityProvider",
        name: "provider",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "executeSellTokenForToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610b1d380380610b1d83398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100f6565b60008151905061007e816100df565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100bf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100e8816100ad565b81146100f357600080fd5b50565b60805160601c6109ed6101306000398060c5528061011f52806101e752806102415280610309528061032d528061038752506109ed6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806314549137146100515780636f025ee61461006d5780638da5cb5b14610089578063bb503e21146100a7575b600080fd5b61006b6004803603810190610066919061058d565b6100c3565b005b6100876004803603810190610082919061058d565b6101e5565b005b610091610307565b60405161009e9190610758565b60405180910390f35b6100c160048036038101906100bc919061061f565b61032b565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014957610148610143337f0000000000000000000000000000000000000000000000000000000000000000610450565b6104d2565b5b8573ffffffffffffffffffffffffffffffffffffffff166369be90ec86868686866040518663ffffffff1660e01b815260040161018a95949392919061079c565b602060405180830381600087803b1580156101a457600080fd5b505af11580156101b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dc91906106c6565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026b5761026a610265337f0000000000000000000000000000000000000000000000000000000000000000610450565b6104d2565b5b8573ffffffffffffffffffffffffffffffffffffffff1663b52e845886868686866040518663ffffffff1660e01b81526004016102ac9594939291906107ea565b602060405180830381600087803b1580156102c657600080fd5b505af11580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906106c6565b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103b1576103b06103ab337f0000000000000000000000000000000000000000000000000000000000000000610450565b6104d2565b5b8673ffffffffffffffffffffffffffffffffffffffff166365d02b048787878787876040518763ffffffff1660e01b81526004016103f496959493929190610838565b602060405180830381600087803b15801561040e57600080fd5b505af1158015610422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044691906106c6565b5050505050505050565b6060631de45ad160e01b838360405160240161046d929190610773565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b6000813590506104e98161095b565b92915050565b60008083601f84011261050157600080fd5b8235905067ffffffffffffffff81111561051a57600080fd5b60208301915083600182028301111561053257600080fd5b9250929050565b60008135905061054881610972565b92915050565b60008135905061055d81610989565b92915050565b600081359050610572816109a0565b92915050565b600081519050610587816109a0565b92915050565b60008060008060008060a087890312156105a657600080fd5b60006105b489828a0161054e565b96505060206105c589828a01610539565b95505060406105d689828a016104da565b94505060606105e789828a01610563565b935050608087013567ffffffffffffffff81111561060457600080fd5b61061089828a016104ef565b92509250509295509295509295565b600080600080600080600060c0888a03121561063a57600080fd5b60006106488a828b0161054e565b97505060206106598a828b01610539565b965050604061066a8a828b01610539565b955050606061067b8a828b016104da565b945050608061068c8a828b01610563565b93505060a088013567ffffffffffffffff8111156106a957600080fd5b6106b58a828b016104ef565b925092505092959891949750929550565b6000602082840312156106d857600080fd5b60006106e684828501610578565b91505092915050565b6106f8816108b7565b82525050565b610707816108a5565b82525050565b60006107198385610894565b935061072683858461093b565b61072f8361094a565b840190509392505050565b61074381610917565b82525050565b6107528161090d565b82525050565b600060208201905061076d60008301846106fe565b92915050565b600060408201905061078860008301856106fe565b61079560208301846106fe565b9392505050565b60006080820190506107b1600083018861073a565b6107be60208301876106ef565b6107cb6040830186610749565b81810360608301526107de81848661070d565b90509695505050505050565b60006080820190506107ff600083018861073a565b61080c60208301876106fe565b6108196040830186610749565b818103606083015261082c81848661070d565b90509695505050505050565b600060a08201905061084d600083018961073a565b61085a602083018861073a565b61086760408301876106fe565b6108746060830186610749565b818103608083015261088781848661070d565b9050979650505050505050565b600082825260208201905092915050565b60006108b0826108ed565b9050919050565b60006108c2826108ed565b9050919050565b60006108d4826108a5565b9050919050565b60006108e6826108a5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061092282610929565b9050919050565b6000610934826108ed565b9050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b610964816108a5565b811461096f57600080fd5b50565b61097b816108c9565b811461098657600080fd5b50565b610992816108db565b811461099d57600080fd5b50565b6109a98161090d565b81146109b457600080fd5b5056fea264697066735822122039c3048351a4565ee912b50cfe645448b42a52bef15e572f2c16e12ae6779b6a64736f6c634300060c0033";

type LiquidityProviderSandboxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityProviderSandboxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityProviderSandbox__factory extends ContractFactory {
  constructor(...args: LiquidityProviderSandboxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityProviderSandbox> {
    return super.deploy(
      owner_,
      overrides || {}
    ) as Promise<LiquidityProviderSandbox>;
  }
  override getDeployTransaction(
    owner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner_, overrides || {});
  }
  override attach(address: string): LiquidityProviderSandbox {
    return super.attach(address) as LiquidityProviderSandbox;
  }
  override connect(signer: Signer): LiquidityProviderSandbox__factory {
    return super.connect(signer) as LiquidityProviderSandbox__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityProviderSandboxInterface {
    return new utils.Interface(_abi) as LiquidityProviderSandboxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityProviderSandbox {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LiquidityProviderSandbox;
  }
}
