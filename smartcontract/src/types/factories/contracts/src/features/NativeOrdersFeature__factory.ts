/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  NativeOrdersFeature,
  NativeOrdersFeatureInterface,
} from "../../../../contracts/src/features/NativeOrdersFeature";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "zeroExAddress",
        type: "address",
      },
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
      {
        internalType: "contract IStaking",
        name: "staking",
        type: "address",
      },
      {
        internalType: "contract FeeCollectorController",
        name: "feeCollectorController",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "protocolFeeMultiplier",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFeeFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "protocolFeePaid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "LimitOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
    ],
    name: "OrderCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "OrderSignerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledLimitOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "PairCancelledRfqOrders",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "makerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "takerToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "pool",
        type: "bytes32",
      },
    ],
    name: "RfqOrderFilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "addrs",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "RfqOrderOriginsAllowed",
    type: "event",
  },
  {
    inputs: [],
    name: "EIP712_DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PROTOCOL_FEE_MULTIPLIER",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "_fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
      {
        internalType: "address",
        name: "taker",
        type: "address",
      },
      {
        internalType: "bool",
        name: "useSelfBalance",
        type: "bool",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "_fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "makerTokens",
        type: "address[]",
      },
      {
        internalType: "contract IERC20TokenV06[]",
        name: "takerTokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "minValidSalts",
        type: "uint256[]",
      },
    ],
    name: "batchCancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "batchCancelRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetLimitOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder[]",
        name: "orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "batchGetRfqOrderRelevantStates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo[]",
        name: "orderInfos",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "actualFillableTakerTokenAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool[]",
        name: "isSignatureValids",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairLimitOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "makerToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "takerToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minValidSalt",
        type: "uint256",
      },
    ],
    name: "cancelPairRfqOrdersWithSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "cancelRfqOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillOrKillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillRfqOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getLimitOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.LimitOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getLimitOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProtocolFeeMultiplier",
    outputs: [
      {
        internalType: "uint32",
        name: "multiplier",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
    ],
    name: "getRfqOrderInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20TokenV06",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "contract IERC20TokenV06",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "txOrigin",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct LibNativeOrder.RfqOrder",
        name: "order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum LibSignature.SignatureType",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct LibSignature.Signature",
        name: "signature",
        type: "tuple",
      },
    ],
    name: "getRfqOrderRelevantState",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32",
          },
          {
            internalType: "enum LibNativeOrder.OrderStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "uint128",
            name: "takerTokenFilledAmount",
            type: "uint128",
          },
        ],
        internalType: "struct LibNativeOrder.OrderInfo",
        name: "orderInfo",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "actualFillableTakerTokenAmount",
        type: "uint128",
      },
      {
        internalType: "bool",
        name: "isSignatureValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "maker",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "isValidOrderSigner",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedOrderSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "origins",
        type: "address[]",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
    ],
    name: "registerAllowedRfqOrigins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "poolIds",
        type: "bytes32[]",
      },
    ],
    name: "transferProtocolFeesForPools",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101806040526200001b6001600360006200029d60201b60201c565b610160908152503480156200002f57600080fd5b5060405162007e6b38038062007e6b833981810160405281019062000055919062000351565b848484848483838383838383838c808060004690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f9e5dae0addaf20578aeb5d70341d092b53b4e14480ac5726438fd436df7ba4277f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c8385604051602001620000e595949392919062000432565b6040516020818303038152906040528051906020012060808181525050505050508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1663f2541a8c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018457600080fd5b505afa15801562000199573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bf9190620003d3565b60e081815250508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508273ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508063ffffffff1660a08163ffffffff1660e01b8152505050505050505050503073ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050505050505050505050620005bf565b60008163ffffffff1660208463ffffffff16901b60408663ffffffff16901b171790509392505050565b600081519050620002d88162000523565b92915050565b600081519050620002ef816200053d565b92915050565b600081519050620003068162000557565b92915050565b6000815190506200031d8162000571565b92915050565b60008151905062000334816200058b565b92915050565b6000815190506200034b81620005a5565b92915050565b600080600080600060a086880312156200036a57600080fd5b60006200037a88828901620002c7565b95505060206200038d888289016200030c565b9450506040620003a08882890162000323565b9350506060620003b388828901620002f5565b9250506080620003c6888289016200033a565b9150509295509295909350565b600060208284031215620003e657600080fd5b6000620003f684828501620002de565b91505092915050565b6200040a816200048f565b82525050565b6200041b81620004a3565b82525050565b6200042c8162000509565b82525050565b600060a08201905062000449600083018862000410565b62000458602083018762000410565b62000467604083018662000410565b62000476606083018562000421565b620004856080830184620003ff565b9695505050505050565b60006200049c82620004e9565b9050919050565b6000819050919050565b6000620004ba826200048f565b9050919050565b6000620004ce826200048f565b9050919050565b6000620004e2826200048f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6200052e816200048f565b81146200053a57600080fd5b50565b6200054881620004a3565b81146200055457600080fd5b50565b6200056281620004ad565b81146200056e57600080fd5b50565b6200057c81620004c1565b81146200058857600080fd5b50565b6200059681620004d5565b8114620005a257600080fd5b50565b620005b08162000513565b8114620005bc57600080fd5b50565b60805160a05160e01c60c05160601c60e0516101005160601c6101205160601c6101405160601c6101605161782b6200064060003980610911525080613ba3525080612c68525080612bb4525080614cd2525080612b055280614cb1525080610f9552806117315280614c7f525080611fad528061243b525061782b6000f3fe60806040526004361061020f5760003560e01c80639a4f809c11610118578063b4658bfb116100a0578063ea7faa611161006f578063ea7faa6114610820578063f6274f6614610849578063f6e0f6a51461087a578063fd5f995b146108a3578063fe55a3ef146108cc5761020f565b8063b4658bfb14610750578063d0a55fb01461078f578063dab400f3146107b8578063dd11d225146107e35761020f565b8063aa6b21cd116100e7578063aa6b21cd14610643578063aa77476c14610681578063ad354eeb146106bf578063b09f1fb1146106fe578063b10a33f4146107275761020f565b80639a4f809c1461059d5780639baa45a8146105c65780639f0434f5146105ef578063a0edcef5146106185761020f565b8063487b5c201161019b57806386a0c8d71161016a57806386a0c8d7146104b35780638fd3ab80146104dc5780639240529c14610507578063935c82a41461053757806395480889146105605761020f565b8063487b5c20146103f75780636ae4b4f7146104225780636b52a4a81461044d5780637d49ec1a1461048a5761020f565b8063346693c5116101e2578063346693c5146102e457806337f381d8146103215780633cd2f02614610360578063414e4ccf14610389578063438cdfc5146103ba5761020f565b8063016a6d6514610214578063031b905c146102515780630f0e8cf71461027c5780631fb09795146102a5575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190615e9e565b6108f5565b6040516102489190616c16565b60405180910390f35b34801561025d57600080fd5b5061026661090f565b60405161027391906170da565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190615a9e565b610933565b005b3480156102b157600080fd5b506102cc60048036038101906102c79190615d43565b6109e6565b6040516102db93929190617034565b60405180910390f35b3480156102f057600080fd5b5061030b60048036038101906103069190615e9e565b610b01565b6040516103189190617019565b60405180910390f35b34801561032d57600080fd5b5061034860048036038101906103439190615ec8565b610c6c565b60405161035793929190617034565b60405180910390f35b34801561036c57600080fd5b5061038760048036038101906103829190615a59565b610d77565b005b6103a3600480360381019061039e9190615dd3565b610db0565b6040516103b19291906170b1565b60405180910390f35b3480156103c657600080fd5b506103e160048036038101906103dc9190615f06565b610e8c565b6040516103ee9190617096565b60405180910390f35b34801561040357600080fd5b5061040c610f91565b604051610419919061711e565b60405180910390f35b34801561042e57600080fd5b50610437610fb9565b6040516104449190616f2c565b60405180910390f35b34801561045957600080fd5b50610474600480360381019061046f919061587f565b610ff2565b6040516104819190616bfb565b60405180910390f35b34801561049657600080fd5b506104b160048036038101906104ac9190615d19565b61108f565b005b3480156104bf57600080fd5b506104da60048036038101906104d59190615a9e565b611116565b005b3480156104e857600080fd5b506104f16111c9565b6040516104fe9190616e5f565b60405180910390f35b610521600480360381019061051c9190615d81565b6113c8565b60405161052e9190617096565b60405180910390f35b34801561054357600080fd5b5061055e600480360381019061055991906159a2565b6114d1565b005b34801561056c57600080fd5b5061058760048036038101906105829190615d19565b611504565b6040516105949190617019565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf9190615cca565b611612565b005b3480156105d257600080fd5b506105ed60048036038101906105e89190615baa565b611623565b005b3480156105fb57600080fd5b50610616600480360381019061061191906158bb565b61165a565b005b34801561062457600080fd5b5061062d61172f565b60405161063a919061711e565b60405180910390f35b34801561064f57600080fd5b5061066a60048036038101906106659190615f58565b611753565b6040516106789291906170b1565b60405180910390f35b34801561068d57600080fd5b506106a860048036038101906106a39190615f06565b611838565b6040516106b69291906170b1565b60405180910390f35b3480156106cb57600080fd5b506106e660048036038101906106e19190615beb565b6118d6565b6040516106f593929190616baf565b60405180910390f35b34801561070a57600080fd5b5061072560048036038101906107209190615a05565b611b60565b005b34801561073357600080fd5b5061074e600480360381019061074991906159a2565b611cdd565b005b34801561075c57600080fd5b5061077760048036038101906107729190615b35565b611d10565b60405161078693929190616baf565b60405180910390f35b34801561079b57600080fd5b506107b660048036038101906107b19190615cca565b611f9a565b005b3480156107c457600080fd5b506107cd611fab565b6040516107da9190616c16565b60405180910390f35b3480156107ef57600080fd5b5061080a60048036038101906108059190615d19565b611fcf565b6040516108179190616c16565b60405180910390f35b34801561082c57600080fd5b5061084760048036038101906108429190615966565b611fe9565b005b610863600480360381019061085e9190615d81565b6120cb565b6040516108719291906170b1565b60405180910390f35b34801561088657600080fd5b506108a1600480360381019061089c9190615c60565b61216d565b005b3480156108af57600080fd5b506108ca60048036038101906108c591906158bb565b6121a4565b005b3480156108d857600080fd5b506108f360048036038101906108ee9190615e9e565b612279565b005b600061090861090383612300565b612437565b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b81518351148015610945575080518351145b610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90616f8e565b60405180910390fd5b60005b83518110156109e0576109d5338583815181106109a057fe5b60200260200101518584815181106109b457fe5b60200260200101518585815181106109c857fe5b6020026020010151612489565b806001019050610987565b50505050565b6109ee614fe9565b6000806109fa85611504565b9250610a8b6040518060a001604052808760a0015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250612675565b91506000610aad846000015186803603810190610aa89190615fe7565b6127ae565b90508073ffffffffffffffffffffffffffffffffffffffff168660a0015173ffffffffffffffffffffffffffffffffffffffff161480610af75750610af68660a0015182610ff2565b5b9150509250925092565b610b09614fe9565b610b12826108f5565b8160000181815250506000610b25612942565b6002016000846080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610c0982846060015185610100015186610120015185612958565b600073ffffffffffffffffffffffffffffffffffffffff168360c0015173ffffffffffffffffffffffffffffffffffffffff161415610c6657600082602001906004811115610c5457fe5b90816004811115610c6157fe5b815250505b50919050565b610c74614fe9565b600080610c8085610b01565b9250610d116040518060a00160405280876080015173ffffffffffffffffffffffffffffffffffffffff168152602001876000015173ffffffffffffffffffffffffffffffffffffffff16815260200187604001516fffffffffffffffffffffffffffffffff16815260200187606001516fffffffffffffffffffffffffffffffff16815260200185815250612675565b91506000610d238460000151866127ae565b90508073ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff161480610d6d5750610d6c866080015182610ff2565b5b9150509250925092565b60005b82829050811015610dab57610da0838383818110610d9457fe5b90506020020135612b01565b806001019050610d7a565b505050565b6000803073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610df857610df7610df233612cfe565b612d96565b5b610e0061502a565b610e6d6040518060a001604052808a8152602001898152602001886fffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815250612d9e565b9050806020015181604001518093508194505050509550959350505050565b6000610e9661502a565b610f0c6040518060c00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815250613307565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff161015610f8257610f81610f7c610f4d876108f5565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166137cf565b612d96565b5b80604001519150509392505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6040518060400160405280600b81526020017f4c696d69744f726465727300000000000000000000000000000000000000000081525081565b6000610ffc612942565b60040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061109a82611fcf565b90508160a0015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156110e757506110e58260a0015133610ff2565b155b15611104576111036110fe82338560a0015161386d565b612d96565b5b611112818360a0015161390b565b5050565b81518351148015611128575080518351145b611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90616f8e565b60405180910390fd5b60005b83518110156111c3576111b83385838151811061118357fe5b602002602001015185848151811061119757fe5b60200260200101518585815181106111ab57fe5b6020026020010151613998565b80600101905061116a565b50505050565b60006111db633cd2f02660e01b613b84565b6111eb63f6274f6660e01b613b84565b6111fb63aa77476c60e01b613b84565b61120b639240529c60e01b613b84565b61121b63438cdfc560e01b613b84565b61122b63414e4ccf60e01b613b84565b61123b63aa6b21cd60e01b613b84565b61124b637d49ec1a60e01b613b84565b61125b63fe55a3ef60e01b613b84565b61126b639baa45a860e01b613b84565b61127b63f6e0f6a560e01b613b84565b61128b63d0a55fb060e01b613b84565b61129b63b10a33f460e01b613b84565b6112ab6386a0c8d760e01b613b84565b6112bb639f0434f560e01b613b84565b6112cb639a4f809c60e01b613b84565b6112db63935c82a460e01b613b84565b6112eb630f0e8cf760e01b613b84565b6112fb63fd5f995b60e01b613b84565b61130b639548088960e01b613b84565b61131b63346693c560e01b613b84565b61132b63dd11d22560e01b613b84565b61133b63016a6d6560e01b613b84565b61134b63487b5c2060e01b613b84565b61135b63b09f1fb160e01b613b84565b61136b631fb0979560e01b613b84565b61137b6337f381d860e01b613b84565b61138b63b4658bfb60e01b613b84565b61139b63ad354eeb60e01b613b84565b6113ab63ea7faa6160e01b613b84565b6113bb636b52a4a860e01b613b84565b632c64c5ef60e01b905090565b60006113d261502a565b61143f6040518060a00160405280878152602001868152602001856fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250612d9e565b9050826fffffffffffffffffffffffffffffffff1681602001516fffffffffffffffffffffffffffffffff1610156114b5576114b46114af61148087611fcf565b83602001516fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff166137cf565b612d96565b5b6114c28160000151613c14565b80604001519150509392505050565b6114db8433610ff2565b6114f2576114f16114ec8533613cf5565b612d96565b5b6114fe84848484612489565b50505050565b61150c614fe9565b61151582611fcf565b8160000181815250506000611528612942565b60010160008460a0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905061160c82846060015185610140015186610160015185612958565b50919050565b61161e33848484612489565b505050565b60005b81518110156116565761164b82828151811061163e57fe5b602002602001015161108f565b806001019050611626565b5050565b8151835114801561166c575080518351145b6116ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a290616f8e565b60405180910390fd5b6116b58433610ff2565b6116cc576116cb6116c68533613cf5565b612d96565b5b60005b83518110156117285761171d858583815181106116e857fe5b60200260200101518584815181106116fc57fe5b602002602001015185858151811061171057fe5b6020026020010151613998565b8060010190506116cf565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000803073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461179b5761179a61179533612cfe565b612d96565b5b6117a361502a565b6118186040518060c001604052808b81526020018a8152602001896fffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187151581526020018673ffffffffffffffffffffffffffffffffffffffff16815250613307565b905080602001518160400151809350819450505050965096945050505050565b60008061184361502a565b6118b96040518060c00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff16815250613307565b905080602001518160400151809350819450505050935093915050565b6060806060848490508787905014611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a90616f4e565b60405180910390fd5b8686905067ffffffffffffffff8111801561193d57600080fd5b5060405190808252806020026020018201604052801561197757816020015b611964614fe9565b81526020019060019003908161195c5790505b5092508686905067ffffffffffffffff8111801561199457600080fd5b506040519080825280602002602001820160405280156119c35781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff811180156119e057600080fd5b50604051908082528060200260200182016040528015611a0f5781602001602082028036833780820191505090505b50905060005b87879050811015611b55573073ffffffffffffffffffffffffffffffffffffffff166337f381d8898984818110611a4857fe5b90506101400201888885818110611a5b57fe5b9050608002016040518363ffffffff1660e01b8152600401611a7e92919061706b565b60a06040518083038186803b158015611a9657600080fd5b505afa925050508015611ac757506040513d601f19601f82011682018060405250810190611ac49190615e4f565b60015b611ad057611b4a565b82878581518110611add57fe5b602002602001018190525081868581518110611af557fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611b3457fe5b6020026020010190151590811515815250505050505b806001019050611a15565b509450945094915050565b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc590616f6e565b60405180910390fd5b6000611bd8612942565b905060005b8351811015611c9c57828260030160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868481518110611c3657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050611bdd565b507f02dfead5eb769b298e82dd9650b31c40559a3d42701dbf53c931bc2682847c31338484604051611cd093929190616ada565b60405180910390a1505050565b611ce78433610ff2565b611cfe57611cfd611cf88533613cf5565b612d96565b5b611d0a84848484613998565b50505050565b6060806060848490508787905014611d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5490616f4e565b60405180910390fd5b8686905067ffffffffffffffff81118015611d7757600080fd5b50604051908082528060200260200182016040528015611db157816020015b611d9e614fe9565b815260200190600190039081611d965790505b5092508686905067ffffffffffffffff81118015611dce57600080fd5b50604051908082528060200260200182016040528015611dfd5781602001602082028036833780820191505090505b5091508686905067ffffffffffffffff81118015611e1a57600080fd5b50604051908082528060200260200182016040528015611e495781602001602082028036833780820191505090505b50905060005b87879050811015611f8f573073ffffffffffffffffffffffffffffffffffffffff16631fb09795898984818110611e8257fe5b90506101800201888885818110611e9557fe5b9050608002016040518363ffffffff1660e01b8152600401611eb8929190616fee565b60a06040518083038186803b158015611ed057600080fd5b505afa925050508015611f0157506040513d601f19601f82011682018060405250810190611efe9190615e4f565b60015b611f0a57611f84565b82878581518110611f1757fe5b602002602001018190525081868581518110611f2f57fe5b60200260200101906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505080858581518110611f6e57fe5b6020026020010190151590811515815250505050505b806001019050611e4f565b509450945094915050565b611fa633848484613998565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000611fe2611fdd83613d90565b612437565b9050919050565b6000611ff3612942565b9050818160040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f6ea9dbe8b2cc119348716a9220a0742ad62b7884ecb0ff4b32cd508121fd93793384846040516120be93929190616aa3565b60405180910390a1505050565b6000806120d661502a565b6121436040518060a00160405280888152602001878152602001866fffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250612d9e565b90506121528160000151613c14565b80602001518160400151809350819450505050935093915050565b60005b81518110156121a05761219582828151811061218857fe5b6020026020010151612279565b806001019050612170565b5050565b815183511480156121b6575080518351145b6121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec90616f8e565b60405180910390fd5b6121ff8433610ff2565b612216576122156122108533613cf5565b612d96565b5b60005b8351811015612272576122678585838151811061223257fe5b602002602001015185848151811061224657fe5b602002602001015185858151811061225a57fe5b6020026020010151612489565b806001019050612219565b5050505050565b6000612284826108f5565b9050816080015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156122d157506122cf826080015133610ff2565b155b156122ee576122ed6122e88233856080015161386d565b612d96565b5b6122fc81836080015161390b565b5050565b60006040517fe593d3fdfa8b60e5e17a1b2204662ecbe15c23f2084b9ad5bae40359540a7da98152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff166080820152608083015173ffffffffffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015161010082015261010083015167ffffffffffffffff166101208201526101208301516101408201526101608120915050919050565b60007f00000000000000000000000000000000000000000000000000000000000000008260405160200161246c9291906169ea565b604051602081830303815290604052805190602001209050919050565b6000612493612942565b905060008160020160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828111156125705761256f61256a8483613f07565b612d96565b5b828260020160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ffe7ffb1edfe79f4df716cb2dcad21cf2f31b104d816a7976ba1e6e4653c1efb1868686866040516126659493929190616b41565b60405180910390a1505050505050565b60008082604001516fffffffffffffffffffffffffffffffff1614806126b15750600082606001516fffffffffffffffffffffffffffffffff16145b156126bf57600090506127a9565b600160048111156126cc57fe5b82608001516020015160048111156126e057fe5b146126ee57600090506127a9565b60006127478360800151604001518460600151036fffffffffffffffffffffffffffffffff1684606001516fffffffffffffffffffffffffffffffff1685604001516fffffffffffffffffffffffffffffffff16613fa2565b90506127648161275f85602001518660000151613fd2565b6140f8565b90506127a56127a08285604001516fffffffffffffffffffffffffffffffff1686606001516fffffffffffffffffffffffffffffffff16614111565b614166565b9150505b919050565b60006127ba838361419e565b600260048111156127c757fe5b826000015160048111156127d757fe5b141561283f576001838360200151846040015185606001516040516000815260200160405260405161280c9493929190616e1a565b6020604051602081039080840390855afa15801561282e573d6000803e3d6000fd5b5050506020604051035190506128f3565b6003600481111561284c57fe5b8260000151600481111561285c57fe5b14156128f25760007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005283601c52603c6000209050600181846020015185604001518660600151604051600081526020016040526040516128c29493929190616e1a565b6020604051602081039080840390855afa1580156128e4573d6000803e3d6000fd5b505050602060405103519150505b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561293c5761293b6129366005856142c9565b612d96565b5b92915050565b60008061294f6007614364565b90508091505090565b6000612962612942565b90506000816000016000886000015181526020019081526020016000205490508087604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050856fffffffffffffffffffffffffffffffff1687604001516fffffffffffffffffffffffffffffffff1610612a0b576002876020019060048111156129f357fe5b90816004811115612a0057fe5b815250505050612afa565b60007f8000000000000000000000000000000000000000000000000000000000000000821614612a5f57600387602001906004811115612a4757fe5b90816004811115612a5457fe5b815250505050612afa565b504267ffffffffffffffff168467ffffffffffffffff1611612aa457600486602001906004811115612a8d57fe5b90816004811115612a9a57fe5b8152505050612afa565b82821115612ad557600386602001906004811115612abe57fe5b90816004811115612acb57fe5b8152505050612afa565b600186602001906004811115612ae757fe5b90816004811115612af457fe5b81525050505b5050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663319bed9a836040518263ffffffff1660e01b8152600401612b5c9190616c16565b602060405180830381600087803b158015612b7657600080fd5b505af1158015612b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bae9190615ca1565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401612c0b9190616a51565b60206040518083038186803b158015612c2357600080fd5b505afa158015612c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5b9190616010565b90506001811115612cf9577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a3b4a3278384600185036040518463ffffffff1660e01b8152600401612cc693929190616a6c565b600060405180830381600087803b158015612ce057600080fd5b505af1158015612cf4573d6000803e3d6000fd5b505050505b505050565b60607ff0ec779b0bcda6d84abf99ee2c67647d1100ebbb553a9c2d1c2ba1579592832c82604051602401612d329190616a36565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b805160208201fd5b612da661502a565b612dae614fe9565b612dbb8360000151611504565b905060016004811115612dca57fe5b81602001516004811115612dda57fe5b14612e0557612e04612dff826000015183602001516004811115612dfa57fe5b614380565b612d96565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614158015612e825750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160c0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612eab57612eaa612ea582600001518560600151866000015160c0015161441b565b612d96565b5b600073ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614158015612f285750826080015173ffffffffffffffffffffffffffffffffffffffff16836000015160e0015173ffffffffffffffffffffffffffffffffffffffff1614155b15612f5157612f50612f4b82600001518560800151866000015160e001516144b9565b612d96565b5b6000612f65826000015185602001516127ae565b9050836000015160a0015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612fba5750612fb8846000015160a0015182610ff2565b155b15612fdf57612fde612fd9836000015183876000015160a00151614557565b612d96565b5b50612ff2836000015161012001516145f5565b82600001818152505061313b60405180610140016040528083600001518152602001856000015160a0015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff168152602001856060015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff168152506146da565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250505060008360000151608001516fffffffffffffffffffffffffffffffff1611156132745761320d82602001516fffffffffffffffffffffffffffffffff168460000151606001516fffffffffffffffffffffffffffffffff168560000151608001516fffffffffffffffffffffffffffffffff16613fa2565b82606001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff168152505061327383600001516020015184606001518560000151610100015185606001516fffffffffffffffffffffffffffffffff166148c7565b5b7fab614d2b738543c0ea21f56347cf696a3a0c42a7cbec3212a5ca22a4dcff21248160000151846000015160a00151856060015186600001516101000151876000015160000151886000015160200151886020015189604001518a606001518b600001518d6000015161012001516040516132f99b9a99989796959493929190616c91565b60405180910390a150919050565b61330f61502a565b613317614fe9565b6133248360000151610b01565b90506001600481111561333357fe5b8160200151600481111561334357fe5b1461336e5761336d61336882600001518360200151600481111561336357fe5b614380565b612d96565b5b6000613378612942565b90503273ffffffffffffffffffffffffffffffffffffffff16846000015160c0015173ffffffffffffffffffffffffffffffffffffffff161415801561344f5750806003016000856000015160c0015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b156134745761347361346e836000015132876000015160c001516149e5565b612d96565b5b50600073ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff16141580156134f25750826060015173ffffffffffffffffffffffffffffffffffffffff16836000015160a0015173ffffffffffffffffffffffffffffffffffffffff1614155b1561351b5761351a61351582600001518560600151866000015160a0015161441b565b612d96565b5b600061352f826000015185602001516127ae565b905083600001516080015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015613584575061358284600001516080015182610ff2565b155b156135a9576135a86135a3836000015183876000015160800151614557565b612d96565b5b506136fa6040518061014001604052808360000151815260200185600001516080015173ffffffffffffffffffffffffffffffffffffffff16815260200185608001516135fa5785606001516135fc565b305b73ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516000015173ffffffffffffffffffffffffffffffffffffffff16815260200185600001516020015173ffffffffffffffffffffffffffffffffffffffff1681526020018560000151604001516fffffffffffffffffffffffffffffffff1681526020018560000151606001516fffffffffffffffffffffffffffffffff16815260200185604001516fffffffffffffffffffffffffffffffff16815260200183604001516fffffffffffffffffffffffffffffffff168152506146da565b8360200184604001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050507f829fa99d94dc4636925b38632e625736a614c154d55006b7ab6bea979c210c3281600001518460000151608001518560600151866000015160000151876000015160200151876020015188604001518a6000015160e001516040516137c1989796959493929190616d3c565b60405180910390a150919050565b60607f21948612b5ef214ec0508df4901600e07a810a371be76b25d59ade73826e3d9784848460405160240161380793929190616dba565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607f88b2c08e4a5f57d416ad23dad18c20497ccfe684b1379b28fd564adaf582b80f8484846040516024016138a593929190616c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6000613915612942565b90507f8000000000000000000000000000000000000000000000000000000000000000816000016000858152602001908152602001600020600082825417925050819055507fa6eb7cdc219e1518ced964e9a34e61d68a94e4f1569db3e84256ba981ba52753838360405161398b929190616c31565b60405180910390a1505050565b60006139a2612942565b905060008160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811115613a7f57613a7e613a798483613f07565b612d96565b5b828260010160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fa91fe7ae62fce669df2c7f880f8c14d178531aae72515558e5c948e37c32a57286868686604051613b749493929190616b41565b60405180910390a1505050505050565b3073ffffffffffffffffffffffffffffffffffffffff16636eb224cb827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401613bdf929190616e7a565b600060405180830381600087803b158015613bf957600080fd5b505af1158015613c0d573d6000803e3d6000fd5b5050505050565b8034118015613c4f57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15613cf2576000613c698234614a8390919063ffffffff16565b905060003373ffffffffffffffffffffffffffffffffffffffff1682604051613c9190616a21565b60006040518083038185875af1925050503d8060008114613cce576040519150601f19603f3d011682016040523d82523d6000602084013e613cd3565b606091505b5050905080613cef57613cee613ce93384614aad565b612d96565b5b50505b50565b60607f84356db366796dc6e2aeb1ad74b631fe4e5ec6a650464da6059e9f95c8810a108383604051602401613d2b929190616b18565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006040517fce918627cb55462ddbb85e73de69a8b322f2bc88f4507c52fcad6d4c33c29d498152825173ffffffffffffffffffffffffffffffffffffffff166020820152602083015173ffffffffffffffffffffffffffffffffffffffff16604082015260408301516fffffffffffffffffffffffffffffffff16606082015260608301516fffffffffffffffffffffffffffffffff16608082015260808301516fffffffffffffffffffffffffffffffff1660a082015260a083015173ffffffffffffffffffffffffffffffffffffffff1660c082015260c083015173ffffffffffffffffffffffffffffffffffffffff1660e082015260e083015173ffffffffffffffffffffffffffffffffffffffff1661010082015261010083015173ffffffffffffffffffffffffffffffffffffffff1661012082015261012083015161014082015261014083015167ffffffffffffffff166101608201526101608301516101808201526101a08120915050919050565b60607fb12bc7e7d341f4431d6faf05f991ee3b779183e341b24243064e10c886cd18738383604051602401613f3d9291906170f5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6000613fc983613fbb8487614b4890919063ffffffff16565b614b9290919063ffffffff16565b90509392505050565b60006140f08373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401614012929190616b18565b60206040518083038186803b15801561402a57600080fd5b505afa15801561403e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140629190616010565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161409b9190616a36565b60206040518083038186803b1580156140b357600080fd5b505afa1580156140c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140eb9190616010565b6140f8565b905092915050565b60008183106141075781614109565b825b905092915050565b600061415d8361414f61412e600187614a8390919063ffffffff16565b6141418689614b4890919063ffffffff16565b614bc990919063ffffffff16565b614b9290919063ffffffff16565b90509392505050565b60006fffffffffffffffffffffffffffffffff801682111561419657614195614190600384614bf8565b612d96565b5b819050919050565b7ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816040015160001c1015806142085750600160027ffffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141816141fb57fe5b0401816060015160001c10155b156142215761422061421b6005846142c9565b612d96565b5b6000600481111561422e57fe5b8160000151600481111561423e57fe5b1415614258576142576142526003846142c9565b612d96565b5b6001600481111561426557fe5b8160000151600481111561427557fe5b141561428f5761428e6142896000846142c9565b612d96565b5b60048081111561429b57fe5b816000015160048111156142ab57fe5b14156142c5576142c46142bf6002846142c9565b612d96565b5b5050565b60607ff18f11f3027e735c758137924b262d4d3aff0037dcd785aca3c699fa05d960bd83836040516024016142ff929190616f03565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60006080600183600a81111561437657fe5b01901b9050919050565b60607f47ab394e41470191eaf9fa542e84ac483a12665fbd616eb8d1c022ced6c9400083836040516024016143b6929190616df1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60607f5d3300180a4547b3e27137be832d3ebf56f1ba5ebb30dd580999c61f77fa639684848460405160240161445393929190616c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607f15e6a383bb02d79ee933b927fbecba78cdde16cba84b94a99661f44bcce3b7368484846040516024016144f193929190616c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b60607ff13e65d925201525f3d71a731833b19bb26e44cfbd97caf72a366b73866f712484848460405160240161458f93929190616c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600080614600614c7a565b905060008114156146155760009150506146d5565b600061462084614caa565b905060008173ffffffffffffffffffffffffffffffffffffffff168360405161464890616a21565b60006040518083038185875af1925050503d8060008114614685576040519150601f19603f3d011682016040523d82523d6000602084013e61468a565b606091505b50509050806146ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146c590616fce565b60405180910390fd5b8293505050505b919050565b6000806147198361010001516147148561012001518660e001516fffffffffffffffffffffffffffffffff16614cfe90919063ffffffff16565b614d70565b9150614764826fffffffffffffffffffffffffffffffff168460e001516fffffffffffffffffffffffffffffffff168560c001516fffffffffffffffffffffffffffffffff16613fa2565b90506000826fffffffffffffffffffffffffffffffff16148061479957506000816fffffffffffffffffffffffffffffffff16145b156147aa57600080915091506148c2565b6147d4828461012001516fffffffffffffffffffffffffffffffff16614dad90919063ffffffff16565b6fffffffffffffffffffffffffffffffff166147ee612942565b600001600085600001518152602001908152602001600020819055503073ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16141561486c576148678360a001518460200151846fffffffffffffffffffffffffffffffff16614e24565b614897565b6148968360a0015184604001518560200151856fffffffffffffffffffffffffffffffff166148c7565b5b6148c1836080015184602001518560600151846fffffffffffffffffffffffffffffffff166148c7565b5b915091565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161492d90616fae565b60405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015273ffffffffffffffffffffffffffffffffffffffff83166024820152816044820152602081606483600073ffffffffffffffffffffffffffffffffffffffff8a165af13d600183511460208210151681151782169150816149dc57806000843e8083fd5b50505050505050565b60607fc0972f3cc4234ca2091de7e7bc7081494bd29ac280167d66f0d44168973b1634848484604051602401614a1d93929190616c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600082821115614aa257614aa1614a9c60028585614f25565b612d96565b5b818303905092915050565b60607fbde95cc2119e0200d80642397198abfcf98e6e4dddd0de9c6320d86252ad40ab8383604051602401614ae3929190616b86565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b600080831415614b5b5760009050614b8c565b6000828402905082848281614b6c57fe5b0414614b8757614b86614b8160018686614f25565b612d96565b5b809150505b92915050565b600080821415614bb157614bb0614bab60038585614f25565b612d96565b5b6000828481614bbc57fe5b0490508091505092915050565b600080828401905083811015614bee57614bed614be860008686614f25565b612d96565b5b8091505092915050565b606063c996af7b60e01b8383604051602401614c15929190616eda565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b60003a7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1602905090565b6000614cf77f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084614faa565b9050919050565b6000826fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff161115614d6557614d64614d5f6002856fffffffffffffffffffffffffffffffff16856fffffffffffffffffffffffffffffffff16614f25565b612d96565b5b818303905092915050565b6000816fffffffffffffffffffffffffffffffff16836fffffffffffffffffffffffffffffffff1610614da35781614da5565b825b905092915050565b6000808284019050836fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015614e1a57614e19614e146000866fffffffffffffffffffffffffffffffff16866fffffffffffffffffffffffffffffffff16614f25565b612d96565b5b8091505092915050565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614e93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614e8a90616fae565b60405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152816024820152602081604483600073ffffffffffffffffffffffffffffffffffffffff89165af13d60018351146020821015168115178216915081614f1d57806000843e8083fd5b505050505050565b606063e946c1bb60e01b848484604051602401614f4493929190616ea3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600060ff60f81b848385604051602001614fc7949392919061699c565b6040516020818303038152906040528051906020012060001c90509392505050565b6040518060600160405280600080191681526020016000600481111561500b57fe5b815260200160006fffffffffffffffffffffffffffffffff1681525090565b60405180608001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b60008135905061509781617706565b92915050565b600082601f8301126150ae57600080fd5b81356150c16150bc82617166565b617139565b915081818352602084019350602081019050838560208402820111156150e657600080fd5b60005b8381101561511657816150fc8882615088565b8452602084019350602083019250506001810190506150e9565b5050505092915050565b60008083601f84011261513257600080fd5b8235905067ffffffffffffffff81111561514b57600080fd5b60208301915083602082028301111561516357600080fd5b9250929050565b600082601f83011261517b57600080fd5b813561518e6151898261718e565b617139565b915081818352602084019350602081019050838560208402820111156151b357600080fd5b60005b838110156151e357816151c988826154c3565b8452602084019350602083019250506001810190506151b6565b5050505092915050565b60008083601f8401126151ff57600080fd5b8235905067ffffffffffffffff81111561521857600080fd5b6020830191508361018082028301111561523157600080fd5b9250929050565b600082601f83011261524957600080fd5b813561525c615257826171b6565b617139565b915081818352602084019350602081019050838561018084028201111561528257600080fd5b60005b838110156152b357816152988882615502565b84526020840193506101808301925050600181019050615285565b5050505092915050565b60008083601f8401126152cf57600080fd5b8235905067ffffffffffffffff8111156152e857600080fd5b6020830191508361014082028301111561530157600080fd5b9250929050565b600082601f83011261531957600080fd5b813561532c615327826171de565b617139565b915081818352602084019350602081019050838561014084028201111561535257600080fd5b60005b8381101561538357816153688882615680565b84526020840193506101408301925050600181019050615355565b5050505092915050565b60008083601f84011261539f57600080fd5b8235905067ffffffffffffffff8111156153b857600080fd5b6020830191508360808202830111156153d057600080fd5b9250929050565b600082601f8301126153e857600080fd5b81356153fb6153f682617206565b617139565b9150818183526020840193506020810190508385602084028201111561542057600080fd5b60005b838110156154505781615436888261582b565b845260208401935060208301925050600181019050615423565b5050505092915050565b6000813590506154698161771d565b92915050565b60008151905061547e8161771d565b92915050565b60008135905061549381617734565b92915050565b6000815190506154a881617734565b92915050565b6000815190506154bd8161774b565b92915050565b6000813590506154d281617762565b92915050565b6000815190506154e781617779565b92915050565b6000813590506154fc81617789565b92915050565b6000610180828403121561551557600080fd5b615520610180617139565b90506000615530848285016154c3565b6000830152506020615544848285016154c3565b602083015250604061555884828501615801565b604083015250606061556c84828501615801565b606083015250608061558084828501615801565b60808301525060a061559484828501615088565b60a08301525060c06155a884828501615088565b60c08301525060e06155bc84828501615088565b60e0830152506101006155d184828501615088565b610100830152506101206155e784828501615484565b610120830152506101406155fd84828501615855565b610140830152506101606156138482850161582b565b6101608301525092915050565b60006060828403121561563257600080fd5b61563c6060617139565b9050600061564c84828501615499565b6000830152506020615660848285016154d8565b602083015250604061567484828501615816565b60408301525092915050565b6000610140828403121561569357600080fd5b61569e610140617139565b905060006156ae848285016154c3565b60008301525060206156c2848285016154c3565b60208301525060406156d684828501615801565b60408301525060606156ea84828501615801565b60608301525060806156fe84828501615088565b60808301525060a061571284828501615088565b60a08301525060c061572684828501615088565b60c08301525060e061573a84828501615484565b60e08301525061010061574f84828501615855565b610100830152506101206157658482850161582b565b6101208301525092915050565b60006080828403121561578457600080fd5b81905092915050565b60006080828403121561579f57600080fd5b6157a96080617139565b905060006157b9848285016154ed565b60008301525060206157cd8482850161586a565b60208301525060406157e184828501615484565b60408301525060606157f584828501615484565b60608301525092915050565b60008135905061581081617799565b92915050565b60008151905061582581617799565b92915050565b60008135905061583a816177b0565b92915050565b60008151905061584f816177b0565b92915050565b600081359050615864816177c7565b92915050565b600081359050615879816177de565b92915050565b6000806040838503121561589257600080fd5b60006158a085828601615088565b92505060206158b185828601615088565b9150509250929050565b600080600080608085870312156158d157600080fd5b60006158df87828801615088565b945050602085013567ffffffffffffffff8111156158fc57600080fd5b6159088782880161516a565b935050604085013567ffffffffffffffff81111561592557600080fd5b6159318782880161516a565b925050606085013567ffffffffffffffff81111561594e57600080fd5b61595a878288016153d7565b91505092959194509250565b6000806040838503121561597957600080fd5b600061598785828601615088565b92505060206159988582860161545a565b9150509250929050565b600080600080608085870312156159b857600080fd5b60006159c687828801615088565b94505060206159d7878288016154c3565b93505060406159e8878288016154c3565b92505060606159f98782880161582b565b91505092959194509250565b60008060408385031215615a1857600080fd5b600083013567ffffffffffffffff811115615a3257600080fd5b615a3e8582860161509d565b9250506020615a4f8582860161545a565b9150509250929050565b60008060208385031215615a6c57600080fd5b600083013567ffffffffffffffff811115615a8657600080fd5b615a9285828601615120565b92509250509250929050565b600080600060608486031215615ab357600080fd5b600084013567ffffffffffffffff811115615acd57600080fd5b615ad98682870161516a565b935050602084013567ffffffffffffffff811115615af657600080fd5b615b028682870161516a565b925050604084013567ffffffffffffffff811115615b1f57600080fd5b615b2b868287016153d7565b9150509250925092565b60008060008060408587031215615b4b57600080fd5b600085013567ffffffffffffffff811115615b6557600080fd5b615b71878288016151ed565b9450945050602085013567ffffffffffffffff811115615b9057600080fd5b615b9c8782880161538d565b925092505092959194509250565b600060208284031215615bbc57600080fd5b600082013567ffffffffffffffff811115615bd657600080fd5b615be284828501615238565b91505092915050565b60008060008060408587031215615c0157600080fd5b600085013567ffffffffffffffff811115615c1b57600080fd5b615c27878288016152bd565b9450945050602085013567ffffffffffffffff811115615c4657600080fd5b615c528782880161538d565b925092505092959194509250565b600060208284031215615c7257600080fd5b600082013567ffffffffffffffff811115615c8c57600080fd5b615c9884828501615308565b91505092915050565b600060208284031215615cb357600080fd5b6000615cc1848285016154ae565b91505092915050565b600080600060608486031215615cdf57600080fd5b6000615ced868287016154c3565b9350506020615cfe868287016154c3565b9250506040615d0f8682870161582b565b9150509250925092565b60006101808284031215615d2c57600080fd5b6000615d3a84828501615502565b91505092915050565b6000806102008385031215615d5757600080fd5b6000615d6585828601615502565b925050610180615d7785828601615772565b9150509250929050565b60008060006102208486031215615d9757600080fd5b6000615da586828701615502565b935050610180615db78682870161578d565b925050610200615dc986828701615801565b9150509250925092565b60008060008060006102608688031215615dec57600080fd5b6000615dfa88828901615502565b955050610180615e0c8882890161578d565b945050610200615e1e88828901615801565b935050610220615e3088828901615088565b925050610240615e4288828901615088565b9150509295509295909350565b600080600060a08486031215615e6457600080fd5b6000615e7286828701615620565b9350506060615e8386828701615816565b9250506080615e948682870161546f565b9150509250925092565b60006101408284031215615eb157600080fd5b6000615ebf84828501615680565b91505092915050565b6000806101c08385031215615edc57600080fd5b6000615eea85828601615680565b925050610140615efc8582860161578d565b9150509250929050565b60008060006101e08486031215615f1c57600080fd5b6000615f2a86828701615680565b935050610140615f3c8682870161578d565b9250506101c0615f4e86828701615801565b9150509250925092565b6000806000806000806102408789031215615f7257600080fd5b6000615f8089828a01615680565b965050610140615f9289828a0161578d565b9550506101c0615fa489828a01615801565b9450506101e0615fb689828a01615088565b935050610200615fc889828a0161545a565b925050610220615fda89828a01615088565b9150509295509295509295565b600060808284031215615ff957600080fd5b60006160078482850161578d565b91505092915050565b60006020828403121561602257600080fd5b600061603084828501615840565b91505092915050565b600061604583836160a8565b60208301905092915050565b600061605d8383616255565b60208301905092915050565b6000616075838361670f565b60608301905092915050565b600061608d8383616924565b60208301905092915050565b6160a281617588565b82525050565b6160b1816173fc565b82525050565b6160c0816173fc565b82525050565b6160d76160d2826173fc565b61766f565b82525050565b60006160e88261726e565b6160f281856172d9565b93506160fd8361722e565b8060005b8381101561612e5781516161158882616039565b9750616120836172a5565b925050600181019050616101565b5085935050505092915050565b600061614682617279565b61615081856172ea565b935061615b8361723e565b8060005b8381101561618c5781516161738882616051565b975061617e836172b2565b92505060018101905061615f565b5085935050505092915050565b60006161a482617284565b6161ae81856172fb565b93506161b98361724e565b8060005b838110156161ea5781516161d18882616069565b97506161dc836172bf565b9250506001810190506161bd565b5085935050505092915050565b60006162028261728f565b61620c818561730c565b93506162178361725e565b8060005b8381101561624857815161622f8882616081565b975061623a836172cc565b92505060018101905061621b565b5085935050505092915050565b61625e81617420565b82525050565b61626d81617420565b82525050565b61628461627f8261742c565b617681565b82525050565b61629381617458565b82525050565b6162a281617458565b82525050565b6162b96162b482617458565b61768b565b82525050565b6162c881617462565b82525050565b6162d78161759a565b82525050565b6162e6816175be565b82525050565b6162f5816175d0565b82525050565b616304816175e2565b82525050565b616313816175f4565b82525050565b61632281617606565b82525050565b60006163338261729a565b61633d8185617328565b935061634d81856020860161763c565b616356816176a7565b840191505092915050565b600061636e600283617339565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006163ae602c83617328565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f4160008301527f525241595f4c454e4754485300000000000000000000000000000000000000006020830152604082019050919050565b6000616414602783617328565b91507f4e61746976654f7264657273466561747572652f4e4f5f434f4e54524143545f60008301527f4f524947494e53000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061647a60008361731d565b9150600082019050919050565b6000616494603883617328565b91507f4e61746976654f7264657273466561747572652f4d49534d4154434845445f5060008301527f4149525f4f52444552535f41525241595f4c454e4754485300000000000000006020830152604082019050919050565b60006164fa602483617328565b91507f466978696e546f6b656e5370656e6465722f43414e4e4f545f494e564f4b455f60008301527f53454c46000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000616560602783617328565b91507f466978696e50726f746f636f6c466565732f45544845525f5452414e5346455260008301527f5f46414c494544000000000000000000000000000000000000000000000000006020830152604082019050919050565b61018082016165cb6000830183617372565b6165d860008501826162ce565b506165e66020830183617372565b6165f360208501826162ce565b5061660160408301836173a0565b61660e6040850182616924565b5061661c60608301836173a0565b6166296060850182616924565b5061663760808301836173a0565b6166446080850182616924565b5061665260a0830183617344565b61665f60a08501826160a8565b5061666d60c0830183617344565b61667a60c08501826160a8565b5061668860e0830183617344565b61669560e08501826160a8565b506166a4610100830183617344565b6166b26101008501826160a8565b506166c161012083018361735b565b6166cf61012085018261628a565b506166de6101408301836173ce565b6166ec61014085018261696f565b506166fb6101608301836173b7565b616709610160850182616942565b50505050565b606082016000820151616725600085018261628a565b50602082015161673860208501826162fb565b50604082015161674b6040850182616924565b50505050565b606082016000820151616767600085018261628a565b50602082015161677a60208501826162fb565b50604082015161678d6040850182616924565b50505050565b61014082016167a56000830183617372565b6167b260008501826162ce565b506167c06020830183617372565b6167cd60208501826162ce565b506167db60408301836173a0565b6167e86040850182616924565b506167f660608301836173a0565b6168036060850182616924565b506168116080830183617344565b61681e60808501826160a8565b5061682c60a0830183617344565b61683960a08501826160a8565b5061684760c0830183617344565b61685460c08501826160a8565b5061686260e083018361735b565b61686f60e085018261628a565b5061687e6101008301836173ce565b61688c61010085018261696f565b5061689b6101208301836173b7565b6168a9610120850182616942565b50505050565b608082016168c06000830183617389565b6168cd600085018261630a565b506168db60208301836173e5565b6168e8602085018261697e565b506168f6604083018361735b565b616903604085018261628a565b50616911606083018361735b565b61691e606085018261628a565b50505050565b61692d81617511565b82525050565b61693c81617511565b82525050565b61694b8161754d565b82525050565b61695a8161754d565b82525050565b61696981617557565b82525050565b61697881617567565b82525050565b6169878161757b565b82525050565b6169968161757b565b82525050565b60006169a88287616273565b6001820191506169b882866160c6565b6014820191506169c882856162a8565b6020820191506169d882846162a8565b60208201915081905095945050505050565b60006169f582616361565b9150616a0182856162a8565b602082019150616a1182846162a8565b6020820191508190509392505050565b6000616a2c8261646d565b9150819050919050565b6000602082019050616a4b60008301846160b7565b92915050565b6000602082019050616a666000830184616099565b92915050565b6000606082019050616a816000830186616099565b616a8e6020830185616099565b616a9b6040830184616951565b949350505050565b6000606082019050616ab86000830186616099565b616ac560208301856160b7565b616ad26040830184616264565b949350505050565b6000606082019050616aef6000830186616099565b8181036020830152616b0181856160dd565b9050616b106040830184616264565b949350505050565b6000604082019050616b2d60008301856160b7565b616b3a60208301846160b7565b9392505050565b6000608082019050616b5660008301876160b7565b616b6360208301866160b7565b616b7060408301856160b7565b616b7d6060830184616951565b95945050505050565b6000604082019050616b9b60008301856160b7565b616ba86020830184616951565b9392505050565b60006060820190508181036000830152616bc98186616199565b90508181036020830152616bdd81856161f7565b90508181036040830152616bf1818461613b565b9050949350505050565b6000602082019050616c106000830184616264565b92915050565b6000602082019050616c2b6000830184616299565b92915050565b6000604082019050616c466000830185616299565b616c5360208301846160b7565b9392505050565b6000606082019050616c6f6000830186616299565b616c7c60208301856160b7565b616c8960408301846160b7565b949350505050565b600061016082019050616ca7600083018e616299565b616cb4602083018d6160b7565b616cc1604083018c6160b7565b616cce606083018b6160b7565b616cdb608083018a6160b7565b616ce860a08301896160b7565b616cf560c0830188616933565b616d0260e0830187616933565b616d10610100830186616933565b616d1e610120830185616951565b616d2c610140830184616299565b9c9b505050505050505050505050565b600061010082019050616d52600083018b616299565b616d5f602083018a6160b7565b616d6c60408301896160b7565b616d7960608301886160b7565b616d8660808301876160b7565b616d9360a0830186616933565b616da060c0830185616933565b616dad60e0830184616299565b9998505050505050505050565b6000606082019050616dcf6000830186616299565b616ddc6020830185616951565b616de96040830184616951565b949350505050565b6000604082019050616e066000830185616299565b616e13602083018461698d565b9392505050565b6000608082019050616e2f6000830187616299565b616e3c602083018661698d565b616e496040830185616299565b616e566060830184616299565b95945050505050565b6000602082019050616e7460008301846162bf565b92915050565b6000604082019050616e8f60008301856162bf565b616e9c60208301846160b7565b9392505050565b6000606082019050616eb860008301866162dd565b616ec56020830185616951565b616ed26040830184616951565b949350505050565b6000604082019050616eef60008301856162ec565b616efc6020830184616951565b9392505050565b6000604082019050616f186000830185616319565b616f256020830184616299565b9392505050565b60006020820190508181036000830152616f468184616328565b905092915050565b60006020820190508181036000830152616f67816163a1565b9050919050565b60006020820190508181036000830152616f8781616407565b9050919050565b60006020820190508181036000830152616fa781616487565b9050919050565b60006020820190508181036000830152616fc7816164ed565b9050919050565b60006020820190508181036000830152616fe781616553565b9050919050565b60006102008201905061700460008301856165b9565b6170126101808301846168af565b9392505050565b600060608201905061702e6000830184616751565b92915050565b600060a0820190506170496000830186616751565b6170566060830185616933565b6170636080830184616264565b949350505050565b60006101c0820190506170816000830185616793565b61708f6101408301846168af565b9392505050565b60006020820190506170ab6000830184616933565b92915050565b60006040820190506170c66000830185616933565b6170d36020830184616933565b9392505050565b60006020820190506170ef6000830184616951565b92915050565b600060408201905061710a6000830185616951565b6171176020830184616951565b9392505050565b60006020820190506171336000830184616960565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561715c57600080fd5b8060405250919050565b600067ffffffffffffffff82111561717d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156171a557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156171cd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156171f557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561721d57600080fd5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006173536020840184615088565b905092915050565b600061736a6020840184615484565b905092915050565b600061738160208401846154c3565b905092915050565b600061739860208401846154ed565b905092915050565b60006173af6020840184615801565b905092915050565b60006173c6602084018461582b565b905092915050565b60006173dd6020840184615855565b905092915050565b60006173f4602084018461586a565b905092915050565b60006174078261752d565b9050919050565b60006174198261752d565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006174998261740e565b9050919050565b60006174ab826173fc565b9050919050565b60008190506174c0826176c5565b919050565b60008190506174d3826176d2565b919050565b60008190506174e6826176df565b919050565b60008190506174f9826176ec565b919050565b600081905061750c826176f9565b919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600060ff82169050919050565b600061759382617618565b9050919050565b60006175a5826175ac565b9050919050565b60006175b78261752d565b9050919050565b60006175c9826174b2565b9050919050565b60006175db826174c5565b9050919050565b60006175ed826174d8565b9050919050565b60006175ff826174eb565b9050919050565b6000617611826174fe565b9050919050565b60006176238261762a565b9050919050565b60006176358261752d565b9050919050565b60005b8381101561765a57808201518184015260208101905061763f565b83811115617669576000848401525b50505050565b600061767a82617695565b9050919050565b6000819050919050565b6000819050919050565b60006176a0826176b8565b9050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b600481106176cf57fe5b50565b600481106176dc57fe5b50565b600581106176e957fe5b50565b600581106176f657fe5b50565b6006811061770357fe5b50565b61770f816173fc565b811461771a57600080fd5b50565b61772681617420565b811461773157600080fd5b50565b61773d81617458565b811461774857600080fd5b50565b6177548161748e565b811461775f57600080fd5b50565b61776b816174a0565b811461777657600080fd5b50565b6005811061778657600080fd5b50565b6005811061779657600080fd5b50565b6177a281617511565b81146177ad57600080fd5b50565b6177b98161754d565b81146177c457600080fd5b50565b6177d081617567565b81146177db57600080fd5b50565b6177e78161757b565b81146177f257600080fd5b5056fea26469706673582212203df694bfb08942db07ec35969c4e16264cf7b60bf1656fb217b6e489442ad90664736f6c634300060c0033";

type NativeOrdersFeatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NativeOrdersFeatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NativeOrdersFeature__factory extends ContractFactory {
  constructor(...args: NativeOrdersFeatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    zeroExAddress: string,
    weth: string,
    staking: string,
    feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NativeOrdersFeature> {
    return super.deploy(
      zeroExAddress,
      weth,
      staking,
      feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    ) as Promise<NativeOrdersFeature>;
  }
  override getDeployTransaction(
    zeroExAddress: string,
    weth: string,
    staking: string,
    feeCollectorController: string,
    protocolFeeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      zeroExAddress,
      weth,
      staking,
      feeCollectorController,
      protocolFeeMultiplier,
      overrides || {}
    );
  }
  override attach(address: string): NativeOrdersFeature {
    return super.attach(address) as NativeOrdersFeature;
  }
  override connect(signer: Signer): NativeOrdersFeature__factory {
    return super.connect(signer) as NativeOrdersFeature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NativeOrdersFeatureInterface {
    return new utils.Interface(_abi) as NativeOrdersFeatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NativeOrdersFeature {
    return new Contract(address, _abi, signerOrProvider) as NativeOrdersFeature;
  }
}
