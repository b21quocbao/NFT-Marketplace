/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  UniswapFeature,
  UniswapFeatureInterface,
} from "../../../../contracts/src/features/UniswapFeature";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEtherTokenV06",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FEATURE_NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEATURE_VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [
      {
        internalType: "bytes4",
        name: "success",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isSushi",
        type: "bool",
      },
    ],
    name: "sellToUniswap",
    outputs: [
      {
        internalType: "uint256",
        name: "buyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405261001760018060026100bf60201b60201c565b60a09081525034801561002957600080fd5b50604051610db0380380610db0833981810160405281019061004b91906100fe565b3073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610182565b60008163ffffffff1660208463ffffffff16901b60408663ffffffff16901b171790509392505050565b6000815190506100f88161016b565b92915050565b60006020828403121561011057600080fd5b600061011e848285016100e9565b91505092915050565b60006101328261014b565b9050919050565b600061014482610127565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61017481610139565b811461017f57600080fd5b50565b60805160601c60a05160c05160601c610bfd6101b3600039806101bd52508060f75250806107935250610bfd6000f3fe60806040526004361061003f5760003560e01c8063031b905c146100445780636ae4b4f71461006f5780638fd3ab801461009a578063d9627aa4146100c5575b600080fd5b34801561005057600080fd5b506100596100f5565b6040516100669190610aaa565b60405180910390f35b34801561007b57600080fd5b50610084610119565b6040516100919190610a48565b60405180910390f35b3480156100a657600080fd5b506100af610152565b6040516100bc9190610a04565b60405180910390f35b6100df60048036038101906100da9190610878565b610171565b6040516100ec9190610aaa565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b6040518060400160405280600e81526020017f556e69737761704665617475726500000000000000000000000000000000000081525081565b600061016463d9627aa460e01b610774565b632c64c5ef60e01b905090565b6000600186869050116101b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b090610a6a565b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000009050602460043501610a005282610a205280610a40525060016004803501350384915060008060005b838110156104ba576102168161053d565b6102226001830161053d565b935061022d84610566565b61023682610566565b10838061024e576102478684610593565b9050600094505b8361032c5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee831460008114610310578b341461027e57600080fd5b610a405193507fd0e30db000000000000000000000000000000000000000000000000000000000610b00526000806004610b008f885af16102c2576102c16106ad565b5b7fa9059cbb00000000000000000000000000000000000000000000000000000000610b005281610b04528b610b24526000806044610b006000885af161030b5761030a6106ad565b5b61032a565b600034111561031e57600080fd5b6103298c83866106b7565b5b505b7f0902f1ac00000000000000000000000000000000000000000000000000000000610b00526040610c006004610b00845afa61036b5761036a6106ad565b5b60403d101561037957600080fd5b8760008084156000811461039857610c20519250610c005191506103a5565b610c00519250610c205191505b506e0100000000000000000000000000008311156103c257600080fd5b6103e583026103e883028101828202049b505050506000886001870114600081146104185773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee89146000811461040e57309250610412565b3392505b50610433565b61042d6104276002890161053d565b8a610593565b97508791505b507f022c0d9f00000000000000000000000000000000000000000000000000000000610b00528360008114610472576000610b04528a610b245261047e565b8a610b04526000610b24525b5080610b44526080610b64526000610b845260008060a4610b006000875af16104aa576104a96106ad565b5b5050505050600181019050610205565b5073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee821415610538577f2e1a7d4d00000000000000000000000000000000000000000000000000000000610b005283610b04526000806024610b006000610a40515af161051e5761051d6106ad565b5b6000806000610b0087335af1610537576105366106ad565b5b5b610725565b600060208202610a0051013573ffffffffffffffffffffffffffffffffffffffff169050919050565b600081905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee82141561058e57610a405190505b919050565b600061059e82610566565b91506105a983610566565b9250828210600081146105c55783610b145282610b00526105d0565b82610b145283610b00525b506028610b0c20610a205160008114610637577fffc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac0000000000000000000000610b005281610b15527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303610b3552610687565b7fff5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f0000000000000000000000610b005281610b15527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f610b35525b506055610b002073ffffffffffffffffffffffffffffffffffffffff1691505092915050565b3d6000803e3d6000fd5b7f23b872dd00000000000000000000000000000000000000000000000000000000610b005233610b045281610b245282610b44526020610c006064610b006000855af13d6001610c005114602082101516811517821691508161071e57806000803e806000fd5b5050505050565b5050508281101561076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290610a8a565b60405180910390fd5b95945050505050565b3073ffffffffffffffffffffffffffffffffffffffff16636eb224cb827f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016107cf929190610a1f565b600060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b5050505050565b60008083601f84011261081657600080fd5b8235905067ffffffffffffffff81111561082f57600080fd5b60208301915083602082028301111561084757600080fd5b9250929050565b60008135905061085d81610b99565b92915050565b60008135905061087281610bb0565b92915050565b60008060008060006080868803121561089057600080fd5b600086013567ffffffffffffffff8111156108aa57600080fd5b6108b688828901610804565b955095505060206108c988828901610863565b93505060406108da88828901610863565b92505060606108eb8882890161084e565b9150509295509295909350565b61090181610ae1565b82525050565b61091081610aff565b82525050565b600061092182610ac5565b61092b8185610ad0565b935061093b818560208601610b55565b61094481610b88565b840191505092915050565b600061095c602283610ad0565b91507f556e6973776170466561747572652f496e76616c6964546f6b656e734c656e6760008301527f74680000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006109c2601a83610ad0565b91507f556e6973776170466561747572652f556e646572426f756768740000000000006000830152602082019050919050565b6109fe81610b4b565b82525050565b6000602082019050610a196000830184610907565b92915050565b6000604082019050610a346000830185610907565b610a4160208301846108f8565b9392505050565b60006020820190508181036000830152610a628184610916565b905092915050565b60006020820190508181036000830152610a838161094f565b9050919050565b60006020820190508181036000830152610aa3816109b5565b9050919050565b6000602082019050610abf60008301846109f5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610aec82610b2b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610b73578082015181840152602081019050610b58565b83811115610b82576000848401525b50505050565b6000601f19601f8301169050919050565b610ba281610af3565b8114610bad57600080fd5b50565b610bb981610b4b565b8114610bc457600080fd5b5056fea26469706673582212202fa1c1cf25b515c0015d8fa8ac875ab2b0d45d984d00dba1d978840c02d749f464736f6c634300060c0033";

type UniswapFeatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapFeatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapFeature__factory extends ContractFactory {
  constructor(...args: UniswapFeatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapFeature> {
    return super.deploy(weth, overrides || {}) as Promise<UniswapFeature>;
  }
  override getDeployTransaction(
    weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): UniswapFeature {
    return super.attach(address) as UniswapFeature;
  }
  override connect(signer: Signer): UniswapFeature__factory {
    return super.connect(signer) as UniswapFeature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapFeatureInterface {
    return new utils.Interface(_abi) as UniswapFeatureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapFeature {
    return new Contract(address, _abi, signerOrProvider) as UniswapFeature;
  }
}
