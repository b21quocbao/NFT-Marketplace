/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  CurveLiquidityProvider,
  CurveLiquidityProviderInterface,
} from "../../../../contracts/src/liquidity-providers/CurveLiquidityProvider";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "contract IERC20TokenV06",
        name: "inputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20TokenV06",
        name: "outputToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "inputTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "outputTokenAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "sourceId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sourceAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "LiquidityProviderFill",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getSellQuote",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "sellEthForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "sellTokenForEth",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20TokenV06",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "contract IERC20TokenV06",
        name: "outputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minBuyAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "auxiliaryData",
        type: "bytes",
      },
    ],
    name: "sellTokenForToken",
    outputs: [
      {
        internalType: "uint256",
        name: "boughtAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061159b806100206000396000f3fe6080604052600436106100435760003560e01c8063343fbcdd1461004f57806365d02b041461008c57806369be90ec146100c9578063b52e8458146101065761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610e39565b610136565b604051610083919061130a565b60405180910390f35b34801561009857600080fd5b506100b360048036038101906100ae9190610da7565b610173565b6040516100c0919061130a565b60405180910390f35b3480156100d557600080fd5b506100f060048036038101906100eb9190610ca7565b610265565b6040516100fd919061130a565b60405180910390f35b610120600480360381019061011b9190610d27565b610374565b60405161012d919061130a565b60405180910390f35b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016a906112ea565b60405180910390fd5b600061017e87610467565b158015610191575061018f86610467565b155b6101d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c79061128a565b60405180910390fd5b6101eb87878686868101906101e59190610e88565b896104b3565b905083811015610230576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610227906112aa565b60405180910390fd5b61025b85828873ffffffffffffffffffffffffffffffffffffffff166106bf9092919063ffffffff16565b9695505050505050565b600061027086610467565b156102b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a79061128a565b60405180910390fd5b6102df8673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8686868101906102d99190610e88565b896104b3565b905083811015610324576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031b906112aa565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561036a573d6000803e3d6000fd5b5095945050505050565b600061037f86610467565b156103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b69061128a565b60405180910390fd5b6103ee73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee878686868101906103e89190610e88565b896104b3565b905083811015610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a906112aa565b60405180910390fd5b61045e85828873ffffffffffffffffffffffffffffffffffffffff166106bf9092919063ffffffff16565b95945050505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806104c0873061074b565b90506104cb87610467565b6104ff576104fe8460000151828973ffffffffffffffffffffffffffffffffffffffff1661080c9092919063ffffffff16565b5b60006060856000015173ffffffffffffffffffffffffffffffffffffffff166105278a610467565b610532576000610534565b835b876020015188604001518960600151878c6040516024016105589493929190611245565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105c2919061110c565b60006040518083038185875af1925050503d80600081146105ff576040519150601f19603f3d011682016040523d82523d6000602084013e610604565b606091505b50915091508161061857610617816108cf565b5b60208151141561063d57808060200190518101906106369190610eb1565b935061064a565b610647883061074b565b93505b7f83dc79d57dbf7f65897db5b817ef3c45ebb363086f52ba01bb57d0cdef08dace898985877f43757276650000000000000000000000000000000000000000000000000000008b60000151338c6040516106ab989796959493929190611190565b60405180910390a150505095945050505050565b606063a9059cbb60e01b83836040516024016106dc929190611167565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061074584826108d7565b50505050565b600061075683610467565b1561077a578173ffffffffffffffffffffffffffffffffffffffff16319050610806565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016107b39190611123565b60206040518083038186803b1580156107cb57600080fd5b505afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190610eb1565b90505b92915050565b808373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161084892919061113e565b60206040518083038186803b15801561086057600080fd5b505afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190610eb1565b10156108ca576108c983837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6109f5565b5b505050565b805160208201fd5b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610900919061110c565b6000604051808303816000865af19150503d806000811461093d576040519150601f19603f3d011682016040523d82523d6000602084013e610942565b606091505b50915091508161095657610955816108cf565b5b6000815114156109b1576000843b9050600081116109a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a0906112ca565b60405180910390fd5b5050506109f1565b60208151106109e55760006109c7826000610a81565b905060018114156109da575050506109f1565b6109e3826108cf565b505b6109ee816108cf565b50505b5050565b606063095ea7b360e01b8383604051602401610a12929190611167565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050610a7b84826108d7565b50505050565b6000610a8d8383610a98565b60001c905092915050565b60006020820183511015610abf57610abe610ab96005855160208601610ad1565b6108cf565b5b60208201915081830151905092915050565b6060632800659560e01b848484604051602401610af09392919061120e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600081359050610b65816114db565b92915050565b600081359050610b7a816114f2565b92915050565b600081359050610b8f81611509565b92915050565b60008083601f840112610ba757600080fd5b8235905067ffffffffffffffff811115610bc057600080fd5b602083019150836001820283011115610bd857600080fd5b9250929050565b600081359050610bee81611520565b92915050565b600081359050610c0381611537565b92915050565b600060808284031215610c1b57600080fd5b610c256080611325565b90506000610c3584828501610b56565b6000830152506020610c4984828501610b80565b6020830152506040610c5d84828501610bf4565b6040830152506060610c7184828501610bf4565b60608301525092915050565b600081359050610c8c8161154e565b92915050565b600081519050610ca18161154e565b92915050565b600080600080600060808688031215610cbf57600080fd5b6000610ccd88828901610bdf565b9550506020610cde88828901610b6b565b9450506040610cef88828901610c7d565b935050606086013567ffffffffffffffff811115610d0c57600080fd5b610d1888828901610b95565b92509250509295509295909350565b600080600080600060808688031215610d3f57600080fd5b6000610d4d88828901610bdf565b9550506020610d5e88828901610b56565b9450506040610d6f88828901610c7d565b935050606086013567ffffffffffffffff811115610d8c57600080fd5b610d9888828901610b95565b92509250509295509295909350565b60008060008060008060a08789031215610dc057600080fd5b6000610dce89828a01610bdf565b9650506020610ddf89828a01610bdf565b9550506040610df089828a01610b56565b9450506060610e0189828a01610c7d565b935050608087013567ffffffffffffffff811115610e1e57600080fd5b610e2a89828a01610b95565b92509250509295509295509295565b600080600060608486031215610e4e57600080fd5b6000610e5c86828701610bdf565b9350506020610e6d86828701610bdf565b9250506040610e7e86828701610c7d565b9150509250925092565b600060808284031215610e9a57600080fd5b6000610ea884828501610c09565b91505092915050565b600060208284031215610ec357600080fd5b6000610ed184828501610c92565b91505092915050565b610ee38161142f565b82525050565b610ef281611379565b82525050565b610f018161139d565b82525050565b6000610f1282611352565b610f1c818561135d565b9350610f2c81856020860161149b565b80840191505092915050565b610f4181611441565b82525050565b610f5081611465565b82525050565b610f5f816113f8565b82525050565b6000610f72602383611368565b91507f43757276654c697175696469747950726f76696465722f494e56414c49445f4160008301527f52475300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610fd8602283611368565b91507f43757276654c697175696469747950726f76696465722f554e444552424f554760008301527f48540000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061103e602783611368565b91507f696e76616c696420746f6b656e20616464726573732c20636f6e7461696e732060008301527f6e6f20636f6465000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110a4602683611368565b91507f43757276654c697175696469747950726f76696465722f4e4f545f494d504c4560008301527f4d454e54454400000000000000000000000000000000000000000000000000006020830152604082019050919050565b61110681611425565b82525050565b60006111188284610f07565b915081905092915050565b60006020820190506111386000830184610ee9565b92915050565b60006040820190506111536000830185610ee9565b6111606020830184610ee9565b9392505050565b600060408201905061117c6000830185610ee9565b61118960208301846110fd565b9392505050565b6000610100820190506111a6600083018b610f38565b6111b3602083018a610f38565b6111c060408301896110fd565b6111cd60608301886110fd565b6111da6080830187610ef8565b6111e760a0830186610ee9565b6111f460c0830185610eda565b61120160e0830184610ee9565b9998505050505050505050565b60006060820190506112236000830186610f47565b61123060208301856110fd565b61123d60408301846110fd565b949350505050565b600060808201905061125a6000830187610f56565b6112676020830186610f56565b61127460408301856110fd565b61128160608301846110fd565b95945050505050565b600060208201905081810360008301526112a381610f65565b9050919050565b600060208201905081810360008301526112c381610fcb565b9050919050565b600060208201905081810360008301526112e381611031565b9050919050565b6000602082019050818103600083015261130381611097565b9050919050565b600060208201905061131f60008301846110fd565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561134857600080fd5b8060405250919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061138482611405565b9050919050565b600061139682611405565b9050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006113de82611379565b9050919050565b60008190506113f3826114ce565b919050565b600081600f0b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061143a82611477565b9050919050565b600061144c82611453565b9050919050565b600061145e82611405565b9050919050565b6000611470826113e5565b9050919050565b600061148282611489565b9050919050565b600061149482611405565b9050919050565b60005b838110156114b957808201518184015260208101905061149e565b838111156114c8576000848401525b50505050565b600881106114d857fe5b50565b6114e481611379565b81146114ef57600080fd5b50565b6114fb8161138b565b811461150657600080fd5b50565b611512816113a7565b811461151d57600080fd5b50565b611529816113d3565b811461153457600080fd5b50565b611540816113f8565b811461154b57600080fd5b50565b61155781611425565b811461156257600080fd5b5056fea26469706673582212209d0e84e04e0d25ee94939b20c183e91d4a78fcb39ddf69d4d33c1f0ae05e460864736f6c634300060c0033";

type CurveLiquidityProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveLiquidityProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveLiquidityProvider__factory extends ContractFactory {
  constructor(...args: CurveLiquidityProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveLiquidityProvider> {
    return super.deploy(overrides || {}) as Promise<CurveLiquidityProvider>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveLiquidityProvider {
    return super.attach(address) as CurveLiquidityProvider;
  }
  override connect(signer: Signer): CurveLiquidityProvider__factory {
    return super.connect(signer) as CurveLiquidityProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveLiquidityProviderInterface {
    return new utils.Interface(_abi) as CurveLiquidityProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveLiquidityProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CurveLiquidityProvider;
  }
}
